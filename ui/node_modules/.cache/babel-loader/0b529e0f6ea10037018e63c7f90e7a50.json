{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js!/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js!/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/components/LineChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/components/LineChart.vue","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.string.ends-with\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { addSeconds } from 'date-fns';\nimport vgridVue from '@/components/chart/vgridVue';\nimport hgridVue from '@/components/chart/hgridVue';\nimport lineVue from '@/components/chart/lineVue';\nimport bulletVue from '@/components/chart/bulletVue';\nimport circleTextVue from '@/components/chart/circleTextVue';\nimport sectionTextVue from '@/components/chart/sectionTextVue';\nimport imageVue from '@/components/chart/imageVue';\nimport legendVue from '@/components/chart/legendVue';\nimport defsVue from '@/components/chart/defsVue';\nimport * as d3 from 'd3';\nimport SunCalc from 'suncalc';\nexport default {\n  components: {\n    vgridVue: vgridVue,\n    hgridVue: hgridVue,\n    lineVue: lineVue,\n    bulletVue: bulletVue,\n    circleTextVue: circleTextVue,\n    sectionTextVue: sectionTextVue,\n    legendVue: legendVue,\n    imageVue: imageVue,\n    defsVue: defsVue\n  },\n  props: {\n    defineHeight: {\n      required: false,\n      type: Number,\n      default: 366\n    },\n    id: {\n      required: true,\n      type: String\n    },\n    sections: {\n      required: false\n    },\n    thresholds: {\n      required: false\n    },\n    graphData: {\n      required: false,\n      type: Array\n    },\n    useds: {\n      required: false\n    },\n    xAxisData: {\n      required: true\n    },\n    latlng: {\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      sunTime: {},\n      sunRise: 0,\n      sunSet: 0,\n      chartData: [],\n      difineMax: 30,\n      marginAxis: 40,\n      width: 0,\n      height: 0\n    };\n  },\n  computed: {\n    Root: function Root() {\n      var Root = d3.select(this.$el);\n      return Root;\n    },\n    Svg: function Svg() {\n      return this.Root.select('svg');\n    },\n    Ggrid: function Ggrid() {\n      return this.Svg.select('.grid');\n    },\n    svgWidth: function svgWidth() {\n      return this.width + this.margin.left + this.margin.right;\n    },\n    svgHeight: function svgHeight() {\n      return this.height + this.margin.top + this.margin.bottom;\n    },\n    xScale: function xScale() {\n      return d3.scaleTime().domain([this.$date().parse(this.xAxisData.min), this.$date().parse(this.xAxisData.max)]).range([0, this.width]);\n    },\n    yScales: function yScales() {\n      var yScales = this.yAxisData;\n\n      for (var index in this.yAxisData) {\n        yScales[index]['yScale'] = d3.scaleLinear().domain([this.yAxisData[index]['min'], this.yAxisData[index]['max']]).range([this.height, 0]);\n      }\n\n      return yScales;\n    },\n    yAxisData: function yAxisData() {\n      var yAxisData = {};\n      this.chartData.forEach(function (element) {\n        if (yAxisData[element.unit] === undefined) {\n          yAxisData[element.unit] = {\n            max: this.difineMax,\n            min: 0\n          };\n        }\n\n        var max = d3.max(element.data, function (d) {\n          return d.y;\n        });\n\n        if (yAxisData[element.unit]['max'] <= max) {\n          yAxisData[element.unit]['max'] = Math.ceil(max / 10) * 10;\n        }\n\n        var min = d3.min(element.data, function (d) {\n          return d.y;\n        });\n\n        if (yAxisData[element.unit]['min'] >= min) {\n          yAxisData[element.unit]['min'] = -Math.ceil(min / -10) * 10;\n        }\n\n        element.lineStyle = 'dash';\n      }, this);\n      this.handleWindowResize();\n      return yAxisData;\n    },\n    margin: function margin() {\n      var margin = {\n        top: 30,\n        right: 40,\n        bottom: 20,\n        left: Object.keys(this.yAxisData).length <= 0 ? this.marginAxis : Object.keys(this.yAxisData).length * this.marginAxis\n      };\n      return margin;\n    },\n    sunLines: function sunLines() {\n      var sunLines = [];\n\n      if (this.sunRise) {\n        sunLines.push({\n          x: this.sunRise,\n          type: 'rise'\n        });\n      }\n\n      if (this.sunSet) {\n        sunLines.push({\n          x: this.sunSet,\n          type: 'set'\n        });\n      }\n\n      return sunLines;\n    },\n    getSections: function getSections() {\n      var _this = this;\n\n      var sections = [];\n\n      if (this.sections) {\n        this.sections.forEach(function (section, sectionIdx) {\n          if (_this.useds[sectionIdx]) {\n            var item = {\n              name: section.name,\n              data: [{\n                x: _this.transTime(section.type, section.value),\n                y: _this.minValue\n              }, {\n                x: _this.transTime(section.type, section.value),\n                y: _this.maxValue\n              }]\n            };\n            sections.push(item);\n          }\n        });\n      }\n\n      return sections;\n    },\n    maxValue: function maxValue() {\n      var maxValue = 0;\n\n      for (var index in this.yAxisData) {\n        if (maxValue < this.yAxisData[index]['max']) {\n          maxValue = this.yAxisData[index]['max'];\n        }\n      }\n\n      return maxValue;\n    },\n    minValue: function minValue() {\n      var minValue = 0;\n\n      for (var index in this.yAxisData) {\n        if (minValue > this.yAxisData[index]['min']) {\n          minValue = this.yAxisData[index]['min'];\n        }\n      }\n\n      return minValue;\n    }\n  },\n  watch: {\n    thresholds: function thresholds() {\n      if (this.sunTime) {\n        this.chartDataMaker();\n      }\n    },\n    graphData: function graphData() {\n      this.chartDataMaker();\n    },\n    latlng: function latlng() {\n      this.sunTimeMaker();\n      this.chartDataMaker();\n    }\n  },\n  mounted: function mounted() {\n    window.addEventListener('resize', this.handleWindowResize);\n    this.handleWindowResize();\n    this.sunTimeMaker();\n    this.eventGrid();\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('resize', this.handleWindowResize);\n  },\n  methods: {\n    sunTimeMaker: function sunTimeMaker() {\n      if (this.latlng) {\n        this.sunTime = SunCalc.getTimes(new Date(), this.latlng.lat, this.latlng.lng);\n        this.sunRise = parseInt(this.sunTime.sunrise.getHours() * 60 * 60) + parseInt(this.sunTime.sunrise.getMinutes() * 60);\n        this.sunSet = parseInt(this.sunTime.sunset.getHours() * 60 * 60) + parseInt(this.sunTime.sunset.getMinutes() * 60);\n      }\n    },\n    chartDataMaker: function chartDataMaker() {\n      var _this2 = this;\n\n      this.$set(this, 'chartData', []);\n\n      if (this.thresholds) {\n        this.thresholds.forEach(function (threshold, thresholdIdx) {\n          var item = {\n            id: threshold.id,\n            name: threshold.name,\n            linetype: threshold.linetype,\n            unit: threshold.unit,\n            data: [],\n            opacity: threshold.opacity,\n            xValue: threshold.xValue,\n            yValue: threshold.yValue\n          };\n          threshold.timeoption.forEach(function (time, timeIdx) {\n            if (_this2.useds[timeIdx]) {\n              item.data.push({\n                isDot: true,\n                x: _this2.transTime(_this2.sections[timeIdx].type, _this2.sections[timeIdx].value),\n                y: time.to\n              });\n            }\n          });\n\n          if (item.data.length > 0) {\n            if (item.data[0].x > 0) {\n              var data = {\n                isDot: false,\n                x: 0,\n                y: item.data[0].y\n              };\n              item.data.splice(0, 0, data);\n            }\n          }\n\n          _this2.chartData.push(item);\n        });\n      }\n\n      if (this.graphData) {\n        var index = 0;\n        this.graphData.forEach(function (element, ii) {\n          element.data.forEach(function (element, i) {\n            element.x = element.time;\n            element.y = element.value;\n          }, this);\n          var threshold = {\n            deviceId: element.id,\n            name: element.name,\n            linetype: element.id.toString().endsWith('00') ? 'step' : 'monotone',\n            lineStyle: 'line',\n            unit: element.unit,\n            data: element.data,\n            xValue: 0,\n            yValue: 0,\n            opacity: 0,\n            id: index,\n            sigdigit: element.sigdigit\n          };\n          index++;\n          this.chartData.push(threshold);\n        }, this);\n      }\n    },\n    transTime: function transTime(type, value) {\n      var newTime = '';\n      var sun = '';\n\n      if (type.indexOf('rise') >= 0) {\n        sun = this.sunRise;\n      } else if (type.indexOf('set') >= 0) {\n        sun = this.sunSet;\n      }\n\n      if (type.indexOf('rise') >= 0 || type.indexOf('set') >= 0) {\n        if (type.indexOf('-') >= 0) {\n          newTime = Number(sun) - Number(value);\n        } else if (type.indexOf('+') >= 0) {\n          newTime = Number(sun) + Number(value);\n        } else {\n          newTime = Number(sun);\n        }\n      } else {\n        newTime = Number(value);\n      }\n\n      return newTime;\n    },\n    eventGrid: function eventGrid() {\n      var lines = d3.select(this.$el).select('svg').selectAll('#thresholdLine').node().childNodes;\n      var tooltip = this.Root.selectAll('.tooltip');\n      var self = this;\n      this.$nextTick(function () {\n        d3.select(this.$el).select('svg').selectAll('.dot').on('click', function (d) {\n          d3.selectAll('.active').classed('active', false);\n          d3.select(this).classed('active', true);\n          d3.select(this).transition().duration(400).attr('r', 50).transition().duration(400).attr('r', 7);\n          var time = self.$date().format(self.secondToHour(d3.select(this).attr('x')).toFixed(2), 'MM-DD HH:mm');\n          var ss = time + '<br>' + d3.select(this).attr('name') + ' : ' + d3.select(this).attr('y') + '<br>';\n          tooltip.html(ss);\n        });\n      });\n      d3.select(this.$el).select('svg').on('mouseover', function () {\n        tooltip.transition().style('opacity', 1);\n        d3.select(self.$el).select('svg').select('#circle').selectAll('circle').style('opacity', '1');\n      }).on('mouseleave', function () {\n        tooltip.transition().style('opacity', 0);\n        d3.select(self.$el).select('svg').select('#circle').selectAll('circle').style('opacity', '0'); // d3.select(this.$el).select('svg').selectAll('#thresholdLine').style('opacity', '0')\n\n        /* lines.forEach(function (element, i) {\n          self.$set(self.chartData[i], 'opacity', 0)\n        }) */\n      }, this).on('mousemove', function () {\n        var mouse = d3.mouse(this);\n        mouse[0] -= self.margin.left;\n\n        if (mouse[0] < 0) {\n          mouse[0] = 0;\n        } else if (mouse[0] >= self.width) {\n          mouse[0] = self.width;\n        }\n\n        var time = '<div style=\"font-weight: bold;margin: 0.25em 0;\">' + self.$date().format(self.xScale.invert(mouse[0]), 'HH:mm') + '</div>';\n        lines.forEach(function (element, i) {\n          var target = null;\n          var beginning = 0;\n          var end = element.getTotalLength();\n          var pos = element.getPointAtLength(mouse[0]);\n\n          while (true) {\n            target = Math.floor((beginning + end) / 2);\n            pos = element.getPointAtLength(target);\n\n            if ((target === end || target === beginning) && pos.x !== mouse[0]) {\n              break;\n            }\n\n            if (pos.x > mouse[0]) end = target;else if (pos.x < mouse[0]) beginning = target;else {\n              // self.thresholds[i].opacity = 1\n              // self.$set(self.chartData[i], 'opacity', 1)\n              break; // position found\n            }\n          }\n\n          self.$set(self.chartData[i], 'xValue', pos.x);\n          self.$set(self.chartData[i], 'yValue', pos.y);\n          var color = \"color:\".concat(d3.schemeCategory10[i % 10]);\n          var value = self.yScale(self.chartData[i].unit).invert(pos.y);\n          var sigdigit = Math.pow(10, self.chartData[i].sigdigit);\n          time += \"<div style=\\\"margin-left:5px;margin-right:5px;margin-bottom:5px;\".concat(color, \"\\\">\");\n\n          if (self.chartData[i].deviceId) {\n            if (self.chartData[i].deviceId.toString().endsWith('00')) {\n              time += \"\".concat(self.chartData[i].name, \" : \").concat(self.statusCode[value.toFixed(0)], \"</div>\");\n            } else {\n              time += \"\".concat(self.chartData[i].name, \" : \").concat(Math.floor(value * sigdigit) / sigdigit, \" \").concat(self.chartData[i].unit ? self.chartData[i].unit : '', \"</div>\");\n            }\n          }\n        });\n\n        if (tooltip.node()) {\n          if (self.latlng && self.sunLines[0]) {\n            var time2 = self.xScale(self.secondToHour(self.sunLines[0].x));\n\n            if (mouse[0] >= time2 - 35 && mouse[0] <= time2 + 35) {\n              time += '<div style=\"color: #0c6aff;\">일출 : ' + self.$date().format(self.xScale.invert(self.xScale(self.secondToHour(self.sunLines[0].x))), 'HH:mm') + '</div>';\n            }\n\n            time2 = self.xScale(self.secondToHour(self.sunLines[1].x));\n\n            if (mouse[0] >= time2 - 35 && mouse[0] <= time2 + 35) {\n              time += '<div style=\"color: #ff0505;\">일몰 : ' + self.$date().format(self.xScale.invert(self.xScale(self.secondToHour(self.sunLines[1].x))), 'HH:mm') + '</div>';\n            }\n          }\n\n          var tooltipX = 0;\n\n          if (mouse[0] < tooltip.node().getBoundingClientRect().width) {\n            tooltipX = mouse[0] + self.margin.left + 60 + 'px';\n          } else {\n            tooltipX = mouse[0] + self.margin.left - tooltip.node().getBoundingClientRect().width - 20 + 'px';\n          }\n\n          tooltip.html(time).style('left', tooltipX).style('top', mouse[1] + 200 + 'px').style('padding', 5 + 'px');\n        }\n      });\n    },\n    handleWindowResize: function handleWindowResize() {\n      this.getSize();\n    },\n    getSize: function getSize() {\n      var _this3 = this;\n\n      setTimeout(function () {\n        _this3.width = _this3.$el.clientWidth - _this3.margin.left - _this3.margin.right;\n        _this3.height = _this3.$el.clientHeight - _this3.margin.top - _this3.margin.bottom;\n      }, 1);\n    },\n    yScale: function yScale(unit) {\n      if (unit !== undefined && this.yAxisData[unit]) {\n        return d3.scaleLinear().domain([this.yAxisData[unit]['min'], this.yAxisData[unit]['max']]).range([this.height, 0]);\n      } else {\n        var ys = null;\n\n        for (var index in this.yAxisData) {\n          ys = d3.scaleLinear().domain([0, this.yAxisData[index]['max']]).range([this.height, 0]);\n        }\n\n        return ys;\n      }\n    },\n    secondToHour: function secondToHour(seconds) {\n      return addSeconds(this.xAxisData.min, seconds);\n    }\n  }\n};",{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"h-100\">\n    <svg :height=\"defineHeight\" style=\"width:100%;height:100%\">\n      <defsVue id=\"detail\" />\n      <g id=\"main\" :transform=\"'translate('+margin.left+ ','+margin.top+')'\">\n        <g id=\"grid\">\n          <vgridVue\n            ref=\"vgridVue\"\n            :x-scale=\"xScale\"\n            :isGrid=\"false\"\n            :width=\"width\"\n            :height=\"height\"\n          />\n          <hgridVue\n            ref=\"hgridVue\"\n            :yScales=\"yScales\"\n            :isGrid=\"false\"\n            :yAxisData=\"yAxisData\"\n            :width=\"width\"\n          />\n        </g>\n        <imageVue\n          v-for=\"(item,index) in sunLines\"\n          :key=\"index\"\n          :x-scale=\"xScale\"\n          :y-scale=\"yScale()\"\n          :parameters=\"item\"\n          :posY=\"height\"\n          :index=\"index\"\n          :xScaleFunction=\"secondToHour\"\n        />\n        <g id=\"line\">\n          <g id=\"sectionLine\">\n            <lineVue\n              v-for=\"(item,index) in getSections\"\n              :key=\"index\"\n              :x-scale=\"xScale\"\n              :y-scale=\"yScale()\"\n              :parameters=\"item.data\"\n              :index=\"0\"\n              :xScaleFunction=\"secondToHour\"\n              lineStyle=\"section\"\n              lineType=\"straight\"\n            />\n          </g>\n          <g id=\"thresholdLine\">\n            <lineVue\n              v-for=\"(item,index) in chartData\"\n              :lineStyle=\"item.lineStyle\"\n              :lineType=\"item.linetype\"\n              :key=\"item.id\"\n              :x-scale=\"xScale\"\n              :y-scale=\"yScale(item.unit)\"\n              :parameters=\"item.data\"\n              :index=\"index\"\n              :xScaleFunction=\"secondToHour\"\n            />\n          </g>\n        </g>\n        <g id=\"bullet\">\n          <bulletVue\n            v-for=\"(item,index) in chartData\"\n            :key=\"index\"\n            :x-scale=\"xScale\"\n            :y-scale=\"yScale(item.unit)\"\n            :parameters=\"item\"\n            :index=\"index\"\n            :xScaleFunction=\"secondToHour\"\n          />\n        </g>\n        <g id=\"circle\">\n          <circleTextVue\n            v-for=\"(item,index) in chartData\"\n            :key=\"item.id\"\n            :x-scale=\"xScale\"\n            :y-scale=\"yScale(item.unit)\"\n            :xValue=\"item.xValue\"\n            :opacity=\"item.opacity\"\n            :yValue=\"item.yValue\"\n            :index=\"index\"\n            :unit=\"item.unit\"\n            :deviceId=\"item.deviceId\"\n          />\n        </g>\n        <g id=\"title\">\n          <sectionTextVue\n            v-for=\"(item,index) in getSections\"\n            :key=\"index\"\n            :x-scale=\"xScale\"\n            :y-scale=\"yScale()\"\n            :parameters=\"item\"\n            :posY=\"-10\"\n            :index=\"index\"\n            :xScaleFunction=\"secondToHour\"\n          />\n        </g>\n        <g id=\"legend\">\n          <legendVue\n            v-for=\"(item,index) in chartData\"\n            :key=\"index\"\n            :index=\"index\"\n            :name=\"item.name\"\n            :posX=\"width\"\n          />\n        </g>\n      </g>\n    </svg>\n    <div class=\"tooltip\" />\n  </div>\n</template>\n\n<script>\nimport { addSeconds } from 'date-fns'\nimport vgridVue from '@/components/chart/vgridVue'\nimport hgridVue from '@/components/chart/hgridVue'\nimport lineVue from '@/components/chart/lineVue'\nimport bulletVue from '@/components/chart/bulletVue'\nimport circleTextVue from '@/components/chart/circleTextVue'\nimport sectionTextVue from '@/components/chart/sectionTextVue'\nimport imageVue from '@/components/chart/imageVue'\nimport legendVue from '@/components/chart/legendVue'\nimport defsVue from '@/components/chart/defsVue'\n\nimport * as d3 from 'd3'\nimport SunCalc from 'suncalc'\n\nexport default {\n  components: {\n    vgridVue,\n    hgridVue,\n    lineVue,\n    bulletVue,\n    circleTextVue,\n    sectionTextVue,\n    legendVue,\n    imageVue,\n    defsVue\n  },\n  props: {\n    defineHeight: {\n      required: false,\n      type: Number,\n      default: 366\n    },\n    id: {\n      required: true,\n      type: String\n    },\n    sections: {\n      required: false\n    },\n    thresholds: {\n      required: false\n    },\n    graphData: {\n      required: false,\n      type: Array\n    },\n    useds: {\n      required: false\n    },\n    xAxisData: {\n      required: true\n    },\n    latlng: {\n      required: false\n    }\n  },\n  data: function () {\n    return {\n      sunTime: {},\n      sunRise: 0,\n      sunSet: 0,\n      chartData: [],\n      difineMax: 30,\n      marginAxis: 40,\n      width: 0,\n      height: 0\n    }\n  },\n  computed: {\n    Root: function () {\n      const Root = d3.select(this.$el)\n      return Root\n    },\n    Svg: function () {\n      return this.Root.select('svg')\n    },\n    Ggrid: function () {\n      return this.Svg.select('.grid')\n    },\n    svgWidth: function () {\n      return this.width + this.margin.left + this.margin.right\n    },\n    svgHeight: function () {\n      return this.height + this.margin.top + this.margin.bottom\n    },\n    xScale: function () {\n      return d3\n        .scaleTime()\n        .domain([\n          this.$date().parse(this.xAxisData.min),\n          this.$date().parse(this.xAxisData.max)\n        ])\n        .range([0, this.width])\n    },\n    yScales: function () {\n      let yScales = this.yAxisData\n      for (var index in this.yAxisData) {\n        yScales[index]['yScale'] = d3\n          .scaleLinear()\n          .domain([this.yAxisData[index]['min'], this.yAxisData[index]['max']])\n          .range([this.height, 0])\n      }\n      return yScales\n    },\n    yAxisData: function () {\n      let yAxisData = {}\n      this.chartData.forEach(function (element) {\n        if (yAxisData[element.unit] === undefined) {\n          yAxisData[element.unit] = {\n            max: this.difineMax,\n            min: 0\n          }\n        }\n        let max = d3.max(element.data, function (d) {\n          return d.y\n        })\n        if (yAxisData[element.unit]['max'] <= max) {\n          yAxisData[element.unit]['max'] = Math.ceil(max / 10) * 10\n        }\n\n        let min = d3.min(element.data, function (d) {\n          return d.y\n        })\n        if (yAxisData[element.unit]['min'] >= min) {\n          yAxisData[element.unit]['min'] = -Math.ceil(min / -10) * 10\n        }\n        element.lineStyle = 'dash'\n      }, this)\n\n      this.handleWindowResize()\n\n      return yAxisData\n    },\n    margin () {\n      let margin = {\n        top: 30,\n        right: 40,\n        bottom: 20,\n        left:\n          Object.keys(this.yAxisData).length <= 0\n            ? this.marginAxis\n            : Object.keys(this.yAxisData).length * this.marginAxis\n      }\n      return margin\n    },\n    sunLines: function () {\n      let sunLines = []\n      if (this.sunRise) {\n        sunLines.push({\n          x: this.sunRise,\n          type: 'rise'\n        })\n      }\n      if (this.sunSet) {\n        sunLines.push({\n          x: this.sunSet,\n          type: 'set'\n        })\n      }\n      return sunLines\n    },\n    getSections: function () {\n      let sections = []\n\n      if (this.sections) {\n        this.sections.forEach((section, sectionIdx) => {\n          if (this.useds[sectionIdx]) {\n            const item = {\n              name: section.name,\n              data: [\n                {\n                  x: this.transTime(section.type, section.value),\n                  y: this.minValue\n                },\n                {\n                  x: this.transTime(section.type, section.value),\n                  y: this.maxValue\n                }\n              ]\n            }\n            sections.push(item)\n          }\n        })\n      }\n      return sections\n    },\n    maxValue () {\n      var maxValue = 0\n      for (var index in this.yAxisData) {\n        if (maxValue < this.yAxisData[index]['max']) {\n          maxValue = this.yAxisData[index]['max']\n        }\n      }\n      return maxValue\n    },\n    minValue () {\n      var minValue = 0\n      for (var index in this.yAxisData) {\n        if (minValue > this.yAxisData[index]['min']) {\n          minValue = this.yAxisData[index]['min']\n        }\n      }\n      return minValue\n    }\n  },\n  watch: {\n    thresholds () {\n      if (this.sunTime) {\n        this.chartDataMaker()\n      }\n    },\n    graphData () {\n      this.chartDataMaker()\n    },\n    latlng () {\n      this.sunTimeMaker()\n      this.chartDataMaker()\n    }\n  },\n  mounted () {\n    window.addEventListener('resize', this.handleWindowResize)\n    this.handleWindowResize()\n\n    this.sunTimeMaker()\n    this.eventGrid()\n  },\n  beforeDestroy: function () {\n    window.removeEventListener('resize', this.handleWindowResize)\n  },\n  methods: {\n    sunTimeMaker () {\n      if (this.latlng) {\n        this.sunTime = SunCalc.getTimes(\n          new Date(),\n          this.latlng.lat,\n          this.latlng.lng\n        )\n        this.sunRise =\n          parseInt(this.sunTime.sunrise.getHours() * 60 * 60) +\n          parseInt(this.sunTime.sunrise.getMinutes() * 60)\n        this.sunSet =\n          parseInt(this.sunTime.sunset.getHours() * 60 * 60) +\n          parseInt(this.sunTime.sunset.getMinutes() * 60)\n      }\n    },\n    chartDataMaker () {\n      this.$set(this, 'chartData', [])\n\n      if (this.thresholds) {\n        this.thresholds.forEach((threshold, thresholdIdx) => {\n          let item = {\n            id: threshold.id,\n            name: threshold.name,\n            linetype: threshold.linetype,\n            unit: threshold.unit,\n            data: [],\n            opacity: threshold.opacity,\n            xValue: threshold.xValue,\n            yValue: threshold.yValue\n          }\n\n          threshold.timeoption.forEach((time, timeIdx) => {\n            if (this.useds[timeIdx]) {\n              item.data.push({\n                isDot: true,\n                x: this.transTime(\n                  this.sections[timeIdx].type,\n                  this.sections[timeIdx].value\n                ),\n                y: time.to\n              })\n            }\n          })\n          if (item.data.length > 0) {\n            if (item.data[0].x > 0) {\n              const data = {\n                isDot: false,\n                x: 0,\n                y: item.data[0].y\n              }\n              item.data.splice(0, 0, data)\n            }\n          }\n          this.chartData.push(item)\n        })\n      }\n\n      if (this.graphData) {\n        let index = 0\n        this.graphData.forEach(function (element, ii) {\n          element.data.forEach(function (element, i) {\n            element.x = element.time\n            element.y = element.value\n          }, this)\n\n          let threshold = {\n            deviceId: element.id,\n            name: element.name,\n            linetype: element.id.toString().endsWith('00')\n              ? 'step'\n              : 'monotone',\n            lineStyle: 'line',\n            unit: element.unit,\n            data: element.data,\n            xValue: 0,\n            yValue: 0,\n            opacity: 0,\n            id: index,\n            sigdigit: element.sigdigit\n          }\n          index++\n          this.chartData.push(threshold)\n        }, this)\n      }\n    },\n    transTime (type, value) {\n      var newTime = ''\n      var sun = ''\n\n      if (type.indexOf('rise') >= 0) {\n        sun = this.sunRise\n      } else if (type.indexOf('set') >= 0) {\n        sun = this.sunSet\n      }\n\n      if (type.indexOf('rise') >= 0 || type.indexOf('set') >= 0) {\n        if (type.indexOf('-') >= 0) {\n          newTime = Number(sun) - Number(value)\n        } else if (type.indexOf('+') >= 0) {\n          newTime = Number(sun) + Number(value)\n        } else {\n          newTime = Number(sun)\n        }\n      } else {\n        newTime = Number(value)\n      }\n      return newTime\n    },\n    eventGrid () {\n      var lines = d3\n        .select(this.$el)\n        .select('svg')\n        .selectAll('#thresholdLine')\n        .node().childNodes\n      var tooltip = this.Root.selectAll('.tooltip')\n      var self = this\n\n      this.$nextTick(function () {\n        d3.select(this.$el)\n          .select('svg')\n          .selectAll('.dot')\n          .on('click', function (d) {\n            d3.selectAll('.active').classed('active', false)\n            d3.select(this).classed('active', true)\n\n            d3.select(this)\n              .transition()\n              .duration(400)\n              .attr('r', 50)\n              .transition()\n              .duration(400)\n              .attr('r', 7)\n\n            var time = self\n              .$date()\n              .format(\n                self.secondToHour(d3.select(this).attr('x')).toFixed(2),\n                'MM-DD HH:mm'\n              )\n\n            var ss =\n              time +\n              '<br>' +\n              d3.select(this).attr('name') +\n              ' : ' +\n              d3.select(this).attr('y') +\n              '<br>'\n            tooltip.html(ss)\n          })\n      })\n      d3.select(this.$el)\n        .select('svg')\n        .on('mouseover', function () {\n          tooltip.transition().style('opacity', 1)\n          d3.select(self.$el)\n            .select('svg')\n            .select('#circle')\n            .selectAll('circle')\n            .style('opacity', '1')\n        })\n        .on(\n          'mouseleave',\n          function () {\n            tooltip.transition().style('opacity', 0)\n            d3.select(self.$el)\n              .select('svg')\n              .select('#circle')\n              .selectAll('circle')\n              .style('opacity', '0')\n            // d3.select(this.$el).select('svg').selectAll('#thresholdLine').style('opacity', '0')\n            /* lines.forEach(function (element, i) {\n              self.$set(self.chartData[i], 'opacity', 0)\n            }) */\n          },\n          this\n        )\n        .on('mousemove', function () {\n          var mouse = d3.mouse(this)\n          mouse[0] -= self.margin.left\n          if (mouse[0] < 0) {\n            mouse[0] = 0\n          } else if (mouse[0] >= self.width) {\n            mouse[0] = self.width\n          }\n\n          var time =\n            '<div style=\"font-weight: bold;margin: 0.25em 0;\">' +\n            self.$date().format(self.xScale.invert(mouse[0]), 'HH:mm') +\n            '</div>'\n\n          lines.forEach((element, i) => {\n            var target = null\n            var beginning = 0\n            var end = element.getTotalLength()\n            var pos = element.getPointAtLength(mouse[0])\n            while (true) {\n              target = Math.floor((beginning + end) / 2)\n              pos = element.getPointAtLength(target)\n              if (\n                (target === end || target === beginning) &&\n                pos.x !== mouse[0]\n              ) {\n                break\n              }\n              if (pos.x > mouse[0]) end = target\n              else if (pos.x < mouse[0]) beginning = target\n              else {\n                // self.thresholds[i].opacity = 1\n                // self.$set(self.chartData[i], 'opacity', 1)\n                break // position found\n              }\n            }\n\n            self.$set(self.chartData[i], 'xValue', pos.x)\n            self.$set(self.chartData[i], 'yValue', pos.y)\n\n            const color = `color:${d3.schemeCategory10[i % 10]}`\n            let value = self.yScale(self.chartData[i].unit).invert(pos.y)\n\n            const sigdigit = Math.pow(10, self.chartData[i].sigdigit)\n            time += `<div style=\"margin-left:5px;margin-right:5px;margin-bottom:5px;${color}\">`\n            if (self.chartData[i].deviceId) {\n              if (self.chartData[i].deviceId.toString().endsWith('00')) {\n                time += `${self.chartData[i].name} : ${\n                  self.statusCode[value.toFixed(0)]\n                }</div>`\n              } else {\n                time += `${self.chartData[i].name} : ${Math.floor(\n                  value * sigdigit\n                ) / sigdigit} ${\n                  self.chartData[i].unit ? self.chartData[i].unit : ''\n                }</div>`\n              }\n            }\n          })\n\n          if (tooltip.node()) {\n            if (self.latlng && self.sunLines[0]) {\n              var time2 = self.xScale(self.secondToHour(self.sunLines[0].x))\n              if (mouse[0] >= time2 - 35 && mouse[0] <= time2 + 35) {\n                time +=\n                  '<div style=\"color: #0c6aff;\">일출 : ' +\n                  self\n                    .$date()\n                    .format(\n                      self.xScale.invert(\n                        self.xScale(self.secondToHour(self.sunLines[0].x))\n                      ),\n                      'HH:mm'\n                    ) +\n                  '</div>'\n              }\n\n              time2 = self.xScale(self.secondToHour(self.sunLines[1].x))\n              if (mouse[0] >= time2 - 35 && mouse[0] <= time2 + 35) {\n                time +=\n                  '<div style=\"color: #ff0505;\">일몰 : ' +\n                  self\n                    .$date()\n                    .format(\n                      self.xScale.invert(\n                        self.xScale(self.secondToHour(self.sunLines[1].x))\n                      ),\n                      'HH:mm'\n                    ) +\n                  '</div>'\n              }\n            }\n\n            let tooltipX = 0\n            if (mouse[0] < tooltip.node().getBoundingClientRect().width) {\n              tooltipX = mouse[0] + self.margin.left + 60 + 'px'\n            } else {\n              tooltipX =\n                mouse[0] +\n                self.margin.left -\n                tooltip.node().getBoundingClientRect().width -\n                20 +\n                'px'\n            }\n\n            tooltip\n              .html(time)\n              .style('left', tooltipX)\n              .style(\n                'top',\n                mouse[1] + 200 +\n                  'px'\n              )\n              .style('padding', 5 + 'px')\n          }\n        })\n    },\n    handleWindowResize () {\n      this.getSize()\n    },\n    getSize () {\n      setTimeout(() => {\n        this.width =\n          this.$el.clientWidth - this.margin.left - this.margin.right\n        this.height =\n          this.$el.clientHeight - this.margin.top - this.margin.bottom\n      }, 1)\n    },\n    yScale (unit) {\n      if (unit !== undefined && this.yAxisData[unit]) {\n        return d3\n          .scaleLinear()\n          .domain([this.yAxisData[unit]['min'], this.yAxisData[unit]['max']])\n          .range([this.height, 0])\n      } else {\n        let ys = null\n        for (var index in this.yAxisData) {\n          ys = d3\n            .scaleLinear()\n            .domain([0, this.yAxisData[index]['max']])\n            .range([this.height, 0])\n        }\n        return ys\n      }\n    },\n    secondToHour (seconds) {\n      return addSeconds(this.xAxisData.min, seconds)\n    }\n  }\n}\n</script>\n\n<style >\ndiv.tooltip {\n  position: absolute;\n  text-align: center;\n  pointer-events: none;\n\n  /* width: auto;\n  height: auto;\n  padding: 2px;\n  font: 12px sans-serif;\n  background: lightsteelblue;\n  border: 0px;\n  border-radius: 8px;\n  pointer-events: none; */\n\n  border-radius: 10px;\n  padding: 6px;\n  color: #666;\n  background: rgba(255, 255, 255, 0.9);\n  border: solid 2px rgba(230, 230, 230, 0.8);\n  font-size: 14px;\n  text-align: center;\n}\n</style>\n"],"sourceRoot":"src/components"}]}