{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js!/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js!/home/mrchoi87/farmosV2/ui/node_modules/eslint-loader/index.js??ref--13-0!/home/mrchoi87/farmosV2/ui/src/store/modules/device.js","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/store/modules/device.js","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/mrchoi87/farmosV2/ui/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/web.dom.iterable\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Vue from 'vue';\nvar state = {\n  deviceList: []\n};\nvar getters = {\n  getAllFieldDevices: function getAllFieldDevices(state, getters, rootState) {\n    var fieldDeviceList = {};\n\n    var _iterator = _createForOfIteratorHelper(rootState.field.items),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var field = _step.value;\n        fieldDeviceList[field.id] = [];\n\n        var _iterator2 = _createForOfIteratorHelper(state.deviceList),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var device = _step2.value;\n\n            if (device.place.indexOf(field.id) >= 0) {\n              fieldDeviceList[field.id].push(device);\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return fieldDeviceList;\n  },\n  getDevices: function getDevices(state) {\n    return state.deviceList;\n  }\n};\nvar actions = {\n  fetchDeviceFields: function fetchDeviceFields(_ref) {\n    var dispatch = _ref.dispatch,\n        rootState = _ref.rootState;\n    rootState.field.items.forEach(function (element) {\n      dispatch('fetchDataFieldDevice', element.id);\n    });\n  },\n  fetchDataFieldDevice: function () {\n    var _fetchDataFieldDevice = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref2, payload) {\n      var commit, _yield$Vue$axios$get, data;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context.prev = 1;\n              _context.next = 4;\n              return Vue.axios.get(\"field/\".concat(payload, \"/devices\"));\n\n            case 4:\n              _yield$Vue$axios$get = _context.sent;\n              data = _yield$Vue$axios$get.data;\n              commit('setFieldDevices', {\n                payload: payload,\n                data: data\n              });\n              _context.next = 11;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 9]]);\n    }));\n\n    function fetchDataFieldDevice(_x, _x2) {\n      return _fetchDataFieldDevice.apply(this, arguments);\n    }\n\n    return fetchDataFieldDevice;\n  }(),\n  fetchDataDevice: function () {\n    var _fetchDataDevice = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3) {\n      var commit, _yield$Vue$axios$get2, data;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref3.commit;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return Vue.axios.get('device');\n\n            case 4:\n              _yield$Vue$axios$get2 = _context2.sent;\n              data = _yield$Vue$axios$get2.data;\n              commit('setDevices', {\n                data: data\n              });\n              _context2.next = 11;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](1);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 9]]);\n    }));\n\n    function fetchDataDevice(_x3) {\n      return _fetchDataDevice.apply(this, arguments);\n    }\n\n    return fetchDataDevice;\n  }()\n};\nvar mutations = {\n  setFieldDevices: function setFieldDevices(state, _ref4) {\n    var payload = _ref4.payload,\n        data = _ref4.data;\n    Vue.set(state.fieldDeviceList, payload, data);\n  },\n  setDevices: function setDevices(state, _ref5) {\n    var data = _ref5.data;\n    Vue.set(state, 'deviceList', data);\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};",{"version":3,"sources":["/home/mrchoi87/farmosV2/ui/src/store/modules/device.js"],"names":["Vue","state","deviceList","getters","getAllFieldDevices","rootState","fieldDeviceList","field","items","id","device","place","indexOf","push","getDevices","actions","fetchDeviceFields","dispatch","forEach","element","fetchDataFieldDevice","payload","commit","axios","get","data","fetchDataDevice","mutations","setFieldDevices","set","setDevices","namespaced"],"mappings":"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","sourcesContent":["import Vue from 'vue'\r\n\r\nconst state = {\r\n  deviceList: []\r\n}\r\n\r\nconst getters = {\r\n  getAllFieldDevices (state, getters, rootState) {\r\n    let fieldDeviceList = {}\r\n    for (const field of rootState.field.items) {\r\n      fieldDeviceList[field.id] = []\r\n      for (const device of state.deviceList) {\r\n        if (device.place.indexOf(field.id) >= 0) {\r\n          fieldDeviceList[field.id].push(device)\r\n        }\r\n      }\r\n    }\r\n    return fieldDeviceList\r\n  },\r\n  getDevices (state) {\r\n    return state.deviceList\r\n  }\r\n}\r\n\r\nconst actions = {\r\n  fetchDeviceFields ({ dispatch, rootState }) {\r\n    rootState.field.items.forEach(element => {\r\n      dispatch('fetchDataFieldDevice', element.id)\r\n    })\r\n  },\r\n  fetchDataFieldDevice: async ({ commit }, payload) => {\r\n    try {\r\n      const { data } = await Vue.axios.get(`field/${payload}/devices`)\r\n      commit('setFieldDevices', { payload, data })\r\n    } catch (error) { }\r\n  },\r\n  fetchDataDevice: async ({ commit }) => {\r\n    try {\r\n      const { data } = await Vue.axios.get('device')\r\n      commit('setDevices', { data })\r\n    } catch (error) {\r\n    }\r\n  }\r\n}\r\n\r\nconst mutations = {\r\n  setFieldDevices: (state, { payload, data }) => {\r\n    Vue.set(state.fieldDeviceList, payload, data)\r\n  },\r\n  setDevices: (state, { data }) => {\r\n    Vue.set(state, 'deviceList', data)\r\n  }\r\n}\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  mutations,\r\n  actions\r\n}\r\n"]}]}