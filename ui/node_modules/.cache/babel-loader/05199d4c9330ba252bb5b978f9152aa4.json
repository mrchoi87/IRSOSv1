{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js!/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js!/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/views/app/page/control/auto/detail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/views/app/page/control/auto/detail.vue","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.string.starts-with\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es7.object.values\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/mrchoi87/farmosV2/ui/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\nimport _defineProperty from \"/home/mrchoi87/farmosV2/ui/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport LineChart from '@/components/LineChart';\nimport { mapGetters } from 'vuex';\nexport default {\n  props: ['fieldId', 'ruleId'],\n  components: {\n    LineChart: LineChart\n  },\n  data: function data() {\n    var today = new Date();\n    return {\n      isBasicUsedComplate: false,\n      isSetLoading: true,\n      configTimeViewer: false,\n      configAdViewer: false,\n      section: 0,\n      rule: {},\n      outputDataIndex: {},\n      dataindexList: [],\n      timeSpan: {},\n      xAxisData: {\n        min: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0),\n        max: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 24, 0, 0)\n      }\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    getAllFieldDevices: 'device/getAllFieldDevices',\n    getObservations: 'observation/getObservations'\n  })), {}, {\n    useTimespan: function useTimespan() {\n      if (this.rule.configurations) {\n        return this.rule.configurations.timespan.id > 0;\n      }\n\n      return true;\n    },\n    getFieldDevice: function getFieldDevice() {\n      var devices = [];\n\n      if (Number(this.fieldId) !== 0 && this.getAllFieldDevices[0]) {\n        devices = this.getAllFieldDevices[0].concat(this.getAllFieldDevices[this.fieldId]);\n      } else {\n        devices = this.getAllFieldDevices[this.fieldId];\n      }\n\n      return devices;\n    },\n    getField: function getField() {\n      return this.$store.getters['field/getField'](this.fieldId);\n    },\n    getLatLng: function getLatLng() {\n      if (this.getField) {\n        return {\n          lat: this.getField.data.lat.value,\n          lng: this.getField.data.lng.value\n        };\n      }\n\n      return {};\n    },\n    getChartData: function getChartData() {\n      var chartData = {\n        thresholds: [],\n        sections: [],\n        useds: []\n      };\n\n      if (!this.timeSpan.timespan) {\n        return chartData;\n      }\n\n      chartData.sections = this.timeSpan.timespan.parts;\n      chartData.thresholds = this.timeSpan.timespan.threshold;\n      this.timeSpan.timespan.parts.forEach(function (element) {\n        chartData.useds.push(true);\n      });\n      return chartData;\n    }\n  }),\n  methods: {\n    saveDataIndex: function () {\n      var _saveDataIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.axios.put('dataindex', Object.values(this.outputDataIndex));\n\n              case 3:\n                this.$notify({\n                  title: '성공',\n                  message: '데이터 이름을 변경 하였습니다',\n                  type: 'success'\n                });\n                _context.next = 9;\n                break;\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n                this.$notify({\n                  title: '실패',\n                  message: '에러가 발생 하였습니다',\n                  type: 'error'\n                });\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 6]]);\n      }));\n\n      function saveDataIndex() {\n        return _saveDataIndex.apply(this, arguments);\n      }\n\n      return saveDataIndex;\n    }(),\n    ruleDelete: function () {\n      var _ruleDelete = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.$confirm('해당 룰을 삭제 하시겠습니까?', '확인', {\n                  type: 'warning'\n                }).then( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_) {\n                    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.prev = 0;\n                            _context2.next = 3;\n                            return _this.axios.delete(\"rule/applied/\".concat(_this.ruleId));\n\n                          case 3:\n                            _this.$notify({\n                              title: '성공',\n                              message: '룰을 제거 하였습니다',\n                              type: 'success'\n                            });\n\n                            _this.$router.push(\"/control/auto/\".concat(_this.fieldId));\n\n                            _context2.next = 10;\n                            break;\n\n                          case 7:\n                            _context2.prev = 7;\n                            _context2.t0 = _context2[\"catch\"](0);\n\n                            _this.$notify({\n                              title: '실패',\n                              message: '에러가 발생 하였습니다',\n                              type: 'error'\n                            });\n\n                          case 10:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, null, [[0, 7]]);\n                  }));\n\n                  return function (_x) {\n                    return _ref.apply(this, arguments);\n                  };\n                }()).catch(function (_) {});\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function ruleDelete() {\n        return _ruleDelete.apply(this, arguments);\n      }\n\n      return ruleDelete;\n    }(),\n    useChange: function () {\n      var _useChange = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(val) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return this.axios.put(\"rule/applied/\".concat(this.ruleId), {\n                  used: val\n                });\n\n              case 3:\n                if (val === 1) {\n                  this.$notify({\n                    title: '성공',\n                    message: '작동규칙 사용함으로 변경 하였습니다',\n                    type: 'success'\n                  });\n                } else {\n                  this.$notify({\n                    title: '성공',\n                    message: '작동규칙 중지로 변경 하였습니다',\n                    type: 'success'\n                  });\n                }\n\n                _context4.next = 10;\n                break;\n\n              case 6:\n                _context4.prev = 6;\n                _context4.t0 = _context4[\"catch\"](0);\n                this.$notify({\n                  title: '실패',\n                  message: '에러가 발생 하였습니다',\n                  type: 'error'\n                });\n                this.rule.used = !this.rule.used;\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 6]]);\n      }));\n\n      function useChange(_x2) {\n        return _useChange.apply(this, arguments);\n      }\n\n      return useChange;\n    }(),\n    checkConstraint: function checkConstraint() {\n      var isCheck = true;\n\n      if (this.rule.constraints.devices) {\n        var _iterator = _createForOfIteratorHelper(this.rule.constraints.devices),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var device = _step.value;\n\n            if (!device.optional || device.optional === 'false') {\n              if (device.deviceid === '') {\n                isCheck = false;\n                break;\n              }\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      if (this.rule.constraints.data) {\n        var _iterator2 = _createForOfIteratorHelper(this.rule.constraints.data),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var data = _step2.value;\n\n            if (!data.optional || data.optional === 'false') {\n              if (data.dataid === '') {\n                isCheck = false;\n                break;\n              }\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      if (isCheck) {\n        this.isSetLoading = false;\n        return true;\n      } else {\n        this.isSetLoading = true;\n        return false;\n      }\n    },\n    saveTimeSpan: function () {\n      var _saveTimeSpan = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                this.timeSpan.timespan.parts.forEach(function (element) {\n                  element.to = element.type + element.value;\n                });\n                _context5.next = 4;\n                return this.axios.put(\"rule/applied/\".concat(this.ruleId), {\n                  timespan: this.timeSpan,\n                  configurations: this.rule.configurations\n                });\n\n              case 4:\n                this.$notify({\n                  title: '성공',\n                  message: '동작설정을 변경 하였습니다',\n                  type: 'success'\n                });\n                _context5.next = 10;\n                break;\n\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](0);\n                console.log(_context5.t0);\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 7]]);\n      }));\n\n      function saveTimeSpan() {\n        return _saveTimeSpan.apply(this, arguments);\n      }\n\n      return saveTimeSpan;\n    }(),\n    saveConfiguration: function () {\n      var _saveConfiguration = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n        var configurations;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                configurations = this._.cloneDeep(this.rule.configurations);\n                configurations.basic.forEach(function (element) {\n                  if (element.use) {\n                    if (element.type) {\n                      if (element.type === 'time') {\n                        if (element.value !== null) {\n                          var time = element.value.split(':');\n                          var second = +time[0] * 60 * 60 + +time[1] * 60 + +time[2];\n                          element.value = second;\n                        }\n                      } else if (element.type === 'ts_time') {\n                        if (element.value !== null) {\n                          element.value.forEach(function (element) {\n                            var time = element.value.split(':');\n                            var second = +time[0] * 60 * 60 + +time[1] * 60 + +time[2];\n                            element.value = second;\n                          });\n                        }\n                      }\n                    }\n                  } else {\n                    element.value = null;\n                  }\n\n                  delete element.use;\n                });\n                _context6.next = 5;\n                return this.axios.put(\"rule/applied/\".concat(this.ruleId), {\n                  configurations: configurations\n                });\n\n              case 5:\n                this.$notify({\n                  title: '성공',\n                  message: '동작설정을 변경 하였습니다',\n                  type: 'success'\n                });\n                _context6.next = 11;\n                break;\n\n              case 8:\n                _context6.prev = 8;\n                _context6.t0 = _context6[\"catch\"](0);\n                console.log(_context6.t0);\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 8]]);\n      }));\n\n      function saveConfiguration() {\n        return _saveConfiguration.apply(this, arguments);\n      }\n\n      return saveConfiguration;\n    }(),\n    saveConstraint: function () {\n      var _saveConstraint = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n        var _this2 = this;\n\n        var inputList, _iterator3, _step3, device, _iterator6, _step6, fieldDevice, _iterator7, _step7, code, _iterator8, _step8, data;\n\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n\n                if (this.checkConstraint()) {\n                  _context7.next = 4;\n                  break;\n                }\n\n                this.$notify({\n                  title: '실패',\n                  message: '환경설정 센서를 선택 해 주세요',\n                  type: 'error'\n                });\n                return _context7.abrupt(\"return\");\n\n              case 4:\n                inputList = [];\n\n                if (!this.rule.constraints.devices) {\n                  _context7.next = 42;\n                  break;\n                }\n\n                _iterator3 = _createForOfIteratorHelper(this.rule.constraints.devices);\n                _context7.prev = 7;\n\n                _iterator3.s();\n\n              case 9:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context7.next = 33;\n                  break;\n                }\n\n                device = _step3.value;\n                _iterator6 = _createForOfIteratorHelper(this.getFieldDevice);\n                _context7.prev = 12;\n\n                _iterator6.s();\n\n              case 14:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context7.next = 22;\n                  break;\n                }\n\n                fieldDevice = _step6.value;\n\n                if (!(device.deviceid === fieldDevice.id)) {\n                  _context7.next = 20;\n                  break;\n                }\n\n                console.log(fieldDevice);\n                device.name = fieldDevice.name;\n                return _context7.abrupt(\"break\", 22);\n\n              case 20:\n                _context7.next = 14;\n                break;\n\n              case 22:\n                _context7.next = 27;\n                break;\n\n              case 24:\n                _context7.prev = 24;\n                _context7.t0 = _context7[\"catch\"](12);\n\n                _iterator6.e(_context7.t0);\n\n              case 27:\n                _context7.prev = 27;\n\n                _iterator6.f();\n\n                return _context7.finish(27);\n\n              case 30:\n                if (device.hasOwnProperty('inputs')) {\n                  _iterator7 = _createForOfIteratorHelper(device.inputs.codes);\n\n                  try {\n                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                      code = _step7.value;\n                      inputList.push({\n                        key: device.inputs.key + code,\n                        dataid: 1 * 10000000 + device.deviceid * 100 + code\n                      });\n                    }\n                  } catch (err) {\n                    _iterator7.e(err);\n                  } finally {\n                    _iterator7.f();\n                  }\n                }\n\n              case 31:\n                _context7.next = 9;\n                break;\n\n              case 33:\n                _context7.next = 38;\n                break;\n\n              case 35:\n                _context7.prev = 35;\n                _context7.t1 = _context7[\"catch\"](7);\n\n                _iterator3.e(_context7.t1);\n\n              case 38:\n                _context7.prev = 38;\n\n                _iterator3.f();\n\n                return _context7.finish(38);\n\n              case 41:\n                if (this.rule.outputs.req) {\n                  (function () {\n                    var removeDevice = [];\n                    var targets = [];\n\n                    var _iterator4 = _createForOfIteratorHelper(_this2.rule.constraints.devices),\n                        _step4;\n\n                    try {\n                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                        var device = _step4.value;\n\n                        if (device.class !== 'sensor' && device.optional && device.optional === true) {\n                          if (device.deviceid.toString().length > 0) {\n                            targets.push(device.outputs);\n                          }\n\n                          removeDevice.push(device.outputs);\n                        }\n                      }\n                    } catch (err) {\n                      _iterator4.e(err);\n                    } finally {\n                      _iterator4.f();\n                    }\n\n                    var _iterator5 = _createForOfIteratorHelper(_this2.rule.outputs.req),\n                        _step5;\n\n                    try {\n                      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                        var req = _step5.value;\n\n                        _this2._.remove(req.targets, function (el) {\n                          return removeDevice.indexOf(el) !== -1;\n                        });\n\n                        req.targets = req.targets.concat(targets);\n                      }\n                    } catch (err) {\n                      _iterator5.e(err);\n                    } finally {\n                      _iterator5.f();\n                    }\n                  })();\n                }\n\n              case 42:\n                if (this.rule.constraints.data) {\n                  _iterator8 = _createForOfIteratorHelper(this.rule.constraints.data);\n\n                  try {\n                    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                      data = _step8.value;\n                      inputList.push({\n                        key: data.key,\n                        dataid: Number(data.dataid)\n                      });\n                    }\n                  } catch (err) {\n                    _iterator8.e(err);\n                  } finally {\n                    _iterator8.f();\n                  }\n                }\n\n                _context7.next = 45;\n                return this.axios.put(\"rule/applied/\".concat(this.ruleId), {\n                  constraints: this.rule.constraints,\n                  inputs: inputList,\n                  outputs: this.rule.outputs\n                });\n\n              case 45:\n                this.$notify({\n                  title: '성공',\n                  message: '환경설정을 완료 하였습니다',\n                  type: 'success'\n                });\n                this.checkConstraint();\n                _context7.next = 52;\n                break;\n\n              case 49:\n                _context7.prev = 49;\n                _context7.t2 = _context7[\"catch\"](0);\n                console.log(_context7.t2);\n\n              case 52:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[0, 49], [7, 35, 38, 41], [12, 24, 27, 30]]);\n      }));\n\n      function saveConstraint() {\n        return _saveConstraint.apply(this, arguments);\n      }\n\n      return saveConstraint;\n    }(),\n    getRule: function () {\n      var _getRule = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n        var _yield$this$axios$get, data;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _context8.next = 3;\n                return this.axios.get(\"/rule/applied/\".concat(this.ruleId));\n\n              case 3:\n                _yield$this$axios$get = _context8.sent;\n                data = _yield$this$axios$get.data;\n                this.rule = data;\n                this.checkConstraint();\n                _context8.next = 12;\n                break;\n\n              case 9:\n                _context8.prev = 9;\n                _context8.t0 = _context8[\"catch\"](0);\n                console.log(_context8.t0);\n\n              case 12:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[0, 9]]);\n      }));\n\n      function getRule() {\n        return _getRule.apply(this, arguments);\n      }\n\n      return getRule;\n    }(),\n    makeOutputDataIndex: function makeOutputDataIndex() {\n      if (this.rule.outputs.data) {\n        var _iterator9 = _createForOfIteratorHelper(this.rule.outputs.data),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var data = _step9.value;\n            var code = 30000000 + this.rule.id * 10000 + data.outcode;\n\n            var _iterator10 = _createForOfIteratorHelper(this.dataindexList),\n                _step10;\n\n            try {\n              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                var dataIndex = _step10.value;\n\n                if (dataIndex.id === code) {\n                  this.$set(this.outputDataIndex, code, dataIndex);\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator10.e(err);\n            } finally {\n              _iterator10.f();\n            }\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      }\n    },\n    checkIdfmt: function checkIdfmt(idfmt, item) {\n      var re = new RegExp(idfmt);\n      var regResult = re.test(item.id);\n\n      if (regResult) {\n        if (item.id.toString().startsWith('0') || item.id.toString().startsWith('2')) {\n          var id = item.id.substring(1, 3);\n\n          if (Number(id) === Number(this.fieldId)) {\n            regResult = true;\n          } else {\n            regResult = false;\n          }\n        }\n      }\n\n      return regResult;\n    },\n    getDataIndex: function () {\n      var _getDataIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n        var _yield$this$axios$get2, data;\n\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n                _context9.next = 3;\n                return this.axios.get('dataindex');\n\n              case 3:\n                _yield$this$axios$get2 = _context9.sent;\n                data = _yield$this$axios$get2.data;\n                this.dataindexList = data;\n                _context9.next = 11;\n                break;\n\n              case 8:\n                _context9.prev = 8;\n                _context9.t0 = _context9[\"catch\"](0);\n                console.log(_context9.t0);\n\n              case 11:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[0, 8]]);\n      }));\n\n      function getDataIndex() {\n        return _getDataIndex.apply(this, arguments);\n      }\n\n      return getDataIndex;\n    }(),\n    getTimeSpan: function () {\n      var _getTimeSpan = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n        var _yield$this$axios$get3, data;\n\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                _context10.next = 3;\n                return this.axios.get(\"/rule/timespan/\".concat(this.rule.configurations.timespan.id, \"/field/\").concat(this.fieldId));\n\n              case 3:\n                _yield$this$axios$get3 = _context10.sent;\n                data = _yield$this$axios$get3.data;\n                this.timeSpan = data;\n                _context10.next = 11;\n                break;\n\n              case 8:\n                _context10.prev = 8;\n                _context10.t0 = _context10[\"catch\"](0);\n                console.log(_context10.t0);\n\n              case 11:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[0, 8]]);\n      }));\n\n      function getTimeSpan() {\n        return _getTimeSpan.apply(this, arguments);\n      }\n\n      return getTimeSpan;\n    }(),\n    setBasicUsed: function () {\n      var _setBasicUsed = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\n        var _this3 = this;\n\n        var _iterator11, _step11, _loop, hour, min, sec;\n\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _iterator11 = _createForOfIteratorHelper(this.rule.configurations.basic);\n\n                try {\n                  _loop = function _loop() {\n                    var item = _step11.value;\n\n                    if (item.value === null) {\n                      _this3.$set(item, 'use', false);\n\n                      if (item.type) {\n                        if (item.type === 'time') {\n                          item.value = \"0:0:0\";\n                        } else if (item.type === 'ts_time') {\n                          item.value = [];\n\n                          _this3.timeSpan.timespan.parts.forEach(function (element) {\n                            item.value.push(\"0:0:0\");\n                          });\n                        } else if (item.type === 'ts_float') {\n                          item.value = [];\n\n                          _this3.timeSpan.timespan.parts.forEach(function (element) {\n                            item.value.push(0);\n                          });\n                        }\n                      } else {\n                        item.value = 0;\n                      }\n                    } else {\n                      _this3.$set(item, 'use', true);\n\n                      if (item.type) {\n                        if (item.type === 'time') {\n                          hour = parseInt(item.value / 3600);\n                          min = parseInt(item.value % 3600 / 60);\n                          sec = item.value % 60;\n                          item.value = \"\".concat(hour, \":\").concat(min, \":\").concat(sec);\n                        } else if (item.type === 'ts_time') {\n                          item.value.forEach(function (element) {\n                            var hour = parseInt(element / 3600);\n                            var min = parseInt(element % 3600 / 60);\n                            var sec = element % 60;\n                            element = \"\".concat(hour, \":\").concat(min, \":\").concat(sec);\n                          });\n                        }\n                      }\n                    }\n                  };\n\n                  for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                    _loop();\n                  }\n                } catch (err) {\n                  _iterator11.e(err);\n                } finally {\n                  _iterator11.f();\n                }\n\n                this.isBasicUsedComplate = true;\n\n              case 3:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function setBasicUsed() {\n        return _setBasicUsed.apply(this, arguments);\n      }\n\n      return setBasicUsed;\n    }()\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {\n      return regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this.getRule();\n\n            case 2:\n              _context12.next = 4;\n              return this.getTimeSpan();\n\n            case 4:\n              _context12.next = 6;\n              return this.setBasicUsed();\n\n            case 6:\n              _context12.next = 8;\n              return this.getDataIndex();\n\n            case 8:\n              this.makeOutputDataIndex(); // this.chartDataMake()\n\n            case 9:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }()\n};",{"version":3,"sources":["detail.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"col-xxs-12 mx-auto my-auto\">\n    <el-card\n      class=\"header\"\n      shadow=\"never\"\n      style=\"border-radius:0px;z-index: 10;border-left-width: 0px;\"\n    >\n      <div class=\"clearfix\">\n        <div style=\"display: flex;align-items: center;\">\n          {{rule.name}}\n          <div class=\"ml-auto\" style=\"display: flex;align-items: center;\">\n            <div>\n              <el-switch\n                :disabled=\"this.isSetLoading\"\n                v-model=\"rule.used\"\n                active-text=\"사용\"\n                inactive-text=\"자동 중지\"\n                :active-value=\"1\"\n                :inactive-value=\"0\"\n                @change=\"useChange\"\n              ></el-switch>\n            </div>\n            <div class=\"ml-3\">\n              <div>\n                <el-checkbox\n                  style=\"margin-bottom: 0px;\"\n                  v-model=\"configTimeViewer\"\n                  v-if=\"useTimespan\"\n                >공통설정 보기</el-checkbox>\n              </div>\n              <el-checkbox style=\"margin-bottom: 0px;\" v-model=\"configAdViewer\">고급설정 보기</el-checkbox>\n            </div>\n            <el-button class=\"ml-4\" @click=\"ruleDelete\">작동규칙 삭제</el-button>\n          </div>\n        </div>\n      </div>\n    </el-card>\n\n    <div style=\"display: flex;padding-right: 15px;padding-left: 15px;\">\n      <div\n        style=\"margin-top: 100px;\"\n        ref=\"scroll\"\n        v-if=\"rule.constraints\"\n        class=\"main\"\n        v-scroll-spy=\"{data: 'section',offset: 146}\"\n      >\n        <div v-if=\"useTimespan\">\n          <el-card\n            v-loading=\"isSetLoading\"\n            element-loading-text=\"환경 설정을 완료해 주세요\"\n            class=\"box-card mb-5\"\n            shadow=\"al\"\n            style=\"cursor: pointer;\"\n          >\n            <div slot=\"header\" class=\"clearfix\">\n              <div style=\"display: flex;align-items: center;\">\n                공통 설정\n                <el-button class=\"ml-auto\" @click=\"saveTimeSpan\">저장</el-button>\n              </div>\n            </div>\n\n            <lineChart\n              class=\"mb-4\"\n              :id=\"'line'\"\n              :latlng=\"getLatLng\"\n              :sections=\"getChartData.sections\"\n              :thresholds=\"getChartData.thresholds\"\n              :useds=\"getChartData.useds\"\n              :xAxisData=\"xAxisData\"\n            ></lineChart>\n            <div style=\"overflow-x:auto\">\n              <table class=\"table text-nowrap\" v-if=\"timeSpan.timespan && timeSpan.timespan\">\n                <thead>\n                  <tr style=\"background-color: #f8f8f8;\">\n                    <th style=\"text-align:center;border-bottom: 1px solid #bbb;\">시간대 사용유무</th>\n                    <th\n                      v-for=\"(part,idx) in timeSpan.timespan.parts\"\n                      style=\"text-align:center;border-bottom: 1px solid #bbb;\"\n                      :key=\"idx\"\n                    >\n                      <el-checkbox\n                        border\n                        size=\"small\"\n                        v-model=\"rule.configurations.timespan.used[idx]\"\n                        :label=\"part.name\"\n                        style=\"margin-bottom: 0px\"\n                      ></el-checkbox>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody v-if=\"configTimeViewer\">\n                  <tr>\n                    <td>시간</td>\n                    <td :key=\"index\" v-for=\"(part,index) in timeSpan.timespan.parts\">\n                      <el-input\n                        placeholder=\"초\"\n                        :max=\"86400\"\n                        :min=\"0\"\n                        v-model=\"part.value\"\n                        :disabled=\"part.type === 'rise' || part.type === 'set'\"\n                        type=\"number\"\n                        class=\"input-with-select\"\n                      >\n                        <el-select\n                          v-model=\"part.type\"\n                          slot=\"prepend\"\n                          placeholder=\"선택\"\n                          style=\"width: 70px;\"\n                        >\n                          <el-option value label=\"초\"></el-option>\n                          <el-option value=\"rise-\" label=\"일출전\"></el-option>\n                          <el-option value=\"rise\" label=\"일출\"></el-option>\n                          <el-option value=\"rise+\" label=\"일출후\"></el-option>\n                          <el-option value=\"set-\" label=\"일몰전\"></el-option>\n                          <el-option value=\"set\" label=\"일몰\"></el-option>\n                          <el-option value=\"set+\" label=\"일몰후\"></el-option>\n                        </el-select>\n                      </el-input>\n                    </td>\n                  </tr>\n                  <tr :key=\"index\" v-for=\"(threshold,index) in timeSpan.timespan.threshold\">\n                    <td>{{threshold.name}}</td>\n                    <td :key=\"index\" v-for=\"(timeoption,index) in threshold.timeoption\">\n                      <el-input-number v-model=\"timeoption.to\" class=\"w-100\"></el-input-number>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </el-card>\n        </div>\n\n        <div>\n          <el-card\n            v-loading=\"isSetLoading\"\n            element-loading-text=\"환경 설정을 완료해 주세요\"\n            class=\"box-card mb-5\"\n            shadow=\"al\"\n            style=\"cursor: pointer;\"\n          >\n            <div slot=\"header\" class=\"clearfix\">\n              <div style=\"display: flex;align-items: center;\">\n                동작 설정\n                <el-button class=\"ml-auto\" @click=\"saveConfiguration\">저장</el-button>\n              </div>\n            </div>\n            <transition name=\"slide-fade\">\n              <div>\n                <div :style=\"{opacity : configAdViewer ? 1 : 0.3}\">\n                  <el-divider content-position=\"left\">고급 설정</el-divider>\n                </div>\n                <div v-if=\"configAdViewer\">\n                  <div>Use TimeSpan ID : {{rule.configurations.timespan}}</div>\n                  <div class=\"mb-4\">TimeSpan 변경은 관리자의 수동 변경만 가능 합니다</div>\n                  <el-row :gutter=\"20\">\n                    <el-col\n                      class=\"mb-4\"\n                      :span=\"8\"\n                      v-for=\"(item,index) in rule.configurations.advanced\"\n                      :key=\"index\"\n                    >\n                      <el-card style shadow=\"hover\">\n                        <div slot=\"header\" class=\"clearfix\">\n                          <div>{{item.name}}</div>\n                          <div>{{item.key}}</div>\n                        </div>\n\n                        <el-input-number\n                          v-if=\"item.minmax\"\n                          class=\"w-100\"\n                          v-model=\"item.value\"\n                          :min=\"item.minmax[0]\"\n                          :max=\"item.minmax[1]\"\n                        ></el-input-number>\n                        <el-input-number v-else class=\"w-100\" v-model=\"item.value\"></el-input-number>\n                        <div class=\"mt-2\" style=\"white-space: nowrap;\">{{item.description}}</div>\n                      </el-card>\n                    </el-col>\n                  </el-row>\n                </div>\n              </div>\n            </transition>\n            <div class=\"mb-5\"></div>\n            <el-divider content-position=\"left\">일반 설정</el-divider>\n            <div style=\"overflow-x:auto\">\n              <table class=\"table text-nowrap\" v-if=\"rule.configurations\">\n                <thead>\n                  <tr style=\"background-color: #f8f8f8;\">\n                    <th style=\"text-align:center;border-bottom: 1px solid #bbb;\">이름</th>\n                    <template v-if=\"timeSpan.timespan && timeSpan.timespan\">\n                      <th\n                        v-for=\"(part,idx) in timeSpan.timespan.parts\"\n                        style=\"text-align:center;border-bottom: 1px solid #bbb;\"\n                        :key=\"idx\"\n                      >{{part.name}}</th>\n                    </template>\n                    <template v-else>\n                      <th style=\"text-align:center;border-bottom: 1px solid #bbb;\">전체 시간</th>\n                    </template>\n                  </tr>\n                </thead>\n                <tbody v-if=\"isBasicUsedComplate\">\n                  <tr v-for=\"(item,index) in rule.configurations.basic\" :key=\"index\">\n                    <td>\n                      <el-checkbox v-model=\"item.use\">설정 사용</el-checkbox>\n                      <br />\n                      {{item.name}}\n                    </td>\n                    <template v-if=\"item.type\">\n                      <template v-if=\"item.type === 'ts_float'\">\n                        <td v-for=\"(value,index) in item.value\" :key=\"index\">\n                          <el-input-number\n                            v-model=\"item.value[index]\"\n                            class=\"w-100\"\n                            :disabled=\"!item.use || !rule.configurations.timespan.used[index]\">\n                          </el-input-number>\n                        </td>\n                      </template>\n                      <template v-if=\"item.type === 'ts_time'\">\n                        <td v-for=\"(value,index) in item.value\" :key=\"index\">\n                          <el-time-picker\n                            class=\"w-100\"\n                            value-format=\"HH:mm:ss\"\n                            v-model=\"item.value[index]\"\n                            :disabled=\"!item.use || !rule.configurations.timespan.used[index]\">\n                          </el-time-picker>\n                        </td>\n                      </template>\n                      <td v-else colspan=\"100%\">\n                        <el-time-picker\n                          class=\"w-100\"\n                          value-format=\"HH:mm:ss\"\n                          v-model=\"item.value\"\n                          :disabled=\"!item.use\"\n                        ></el-time-picker>\n                      </td>\n                    </template>\n                    <template v-else>\n                      <td colspan=\"100%\">\n                        <el-input-number\n                          v-model=\"item.value\"\n                          class=\"w-100\"\n                          :disabled=\"!item.use\"\n                        ></el-input-number>\n                      </td>\n                    </template>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </el-card>\n        </div>\n        <div>\n          <el-card class=\"box-card mb-5\" shadow=\"al\" style=\"cursor: pointer;\">\n            <div slot=\"header\" class=\"clearfix\">\n              <div style=\"display: flex;align-items: center;\">\n                출력 설정\n                <el-button class=\"ml-auto\" @click=\"saveDataIndex\">저장</el-button>\n              </div>\n            </div>\n\n            <el-row :gutter=\"20\">\n              <template v-for=\"(data,index) in rule.outputs.data\">\n                <el-col\n                  class=\"mb-4\"\n                  :span=\"8\"\n                  :key=\"index\"\n                  v-if=\"data.name && outputDataIndex[30000000 + (rule.id * 10000) + data.outcode]\"\n                >\n                  <el-card style shadow=\"hover\">\n                    <div slot=\"header\" class=\"clearfix\">{{data.outputs}} : {{data.name}}</div>\n                    <font class=\"text-muted ml-1\">이름 변경</font>\n                    <el-input\n                      class=\"mt-1\"\n                      placeholder=\"데이터 이름\"\n                      v-model=\"outputDataIndex[30000000 + (rule.id * 10000) + data.outcode].name\"\n                    ></el-input>\n                  </el-card>\n                </el-col>\n              </template>\n            </el-row>\n          </el-card>\n        </div>\n        <div>\n          <el-card class=\"box-card mb-5\" shadow=\"al\" style=\"cursor: pointer;\">\n            <div slot=\"header\" class=\"clearfix\">\n              <div style=\"display: flex;align-items: center;\">\n                환경 설정\n                <el-button class=\"ml-auto\" @click=\"saveConstraint\">저장</el-button>\n              </div>\n            </div>\n\n            <el-row :gutter=\"20\">\n              <el-col\n                class=\"mb-4\"\n                :sm=\"16\"\n                :lg=\"8\"\n                v-for=\"(device,index) in rule.constraints.devices\"\n                :key=\"`device${index}`\"\n              >\n                <el-card style shadow=\"hover\">\n                  <div slot=\"header\" class=\"clearfix\">{{device.desc}}</div>\n                  장비 {{!device.optional || device.optional === 'false' ? ' 필수 선택' : '옵션 선택' }}\n                  <el-select v-model=\"device.deviceid\" placeholder=\"미설정\" class=\"w-100 mt-2\">\n                    <template v-for=\"item in getFieldDevice\">\n                      <el-option\n                        v-if=\"item.spec.Type === device.type\"\n                        :key=\"`${index}_${item.id}`\"\n                        :label=\"item.name ? item.name : item.spec.Name ? item.spec.Name : item.spec.Type \"\n                        :value=\"item.id\"\n                      ></el-option>\n                    </template>\n                  </el-select>\n                </el-card>\n              </el-col>\n              <el-col\n                class=\"mb-4\"\n                :span=\"8\"\n                v-for=\"(device,index) in rule.constraints.data\"\n                :key=\"`data${index}`\"\n              >\n                <el-card style shadow=\"hover\">\n                  <div slot=\"header\" class=\"clearfix\">{{device.desc}}</div>\n                  데이터 {{!device.optional || device.optional === 'false' ? ' 필수 선택' : '옵션 선택' }}\n                  <el-select v-model=\"device.dataid\" placeholder=\"미설정\" class=\"w-100 mt-2\">\n                    <template v-for=\"item in dataindexList\">\n                      <el-option\n                        v-if=\"checkIdfmt(device.idfmt,item)\"\n                        :key=\"`${index}_${item.id}`\"\n                        :label=\"item.name\"\n                        :value=\"item.id\"\n                      ></el-option>\n                    </template>\n                  </el-select>\n                </el-card>\n              </el-col>\n            </el-row>\n          </el-card>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport LineChart from '@/components/LineChart'\nimport { mapGetters } from 'vuex'\nexport default {\n  props: ['fieldId', 'ruleId'],\n  components: {\n    LineChart\n  },\n  data () {\n    var today = new Date()\n    return {\n      isBasicUsedComplate: false,\n      isSetLoading: true,\n      configTimeViewer: false,\n      configAdViewer: false,\n      section: 0,\n      rule: {},\n      outputDataIndex: {},\n      dataindexList: [],\n      timeSpan: {},\n      xAxisData: {\n        min: new Date(\n          today.getFullYear(),\n          today.getMonth(),\n          today.getDate(),\n          0,\n          0,\n          0\n        ),\n        max: new Date(\n          today.getFullYear(),\n          today.getMonth(),\n          today.getDate(),\n          24,\n          0,\n          0\n        )\n      }\n    }\n  },\n  computed: {\n    ...mapGetters({\n      getAllFieldDevices: 'device/getAllFieldDevices',\n      getObservations: 'observation/getObservations'\n    }),\n    useTimespan () {\n      if (this.rule.configurations) {\n        return this.rule.configurations.timespan.id > 0\n      }\n      return true\n    },\n    getFieldDevice () {\n      let devices = []\n      if (Number(this.fieldId) !== 0 && this.getAllFieldDevices[0]) {\n        devices = this.getAllFieldDevices[0].concat(\n          this.getAllFieldDevices[this.fieldId]\n        )\n      } else {\n        devices = this.getAllFieldDevices[this.fieldId]\n      }\n      return devices\n    },\n    getField () {\n      return this.$store.getters['field/getField'](this.fieldId)\n    },\n    getLatLng () {\n      if (this.getField) {\n        return {\n          lat: this.getField.data.lat.value,\n          lng: this.getField.data.lng.value\n        }\n      }\n      return {}\n    },\n    getChartData () {\n      let chartData = {\n        thresholds: [],\n        sections: [],\n        useds: []\n      }\n\n      if (!this.timeSpan.timespan) {\n        return chartData\n      }\n\n      chartData.sections = this.timeSpan.timespan.parts\n      chartData.thresholds = this.timeSpan.timespan.threshold\n      this.timeSpan.timespan.parts.forEach(element => {\n        chartData.useds.push(true)\n      })\n      return chartData\n    }\n  },\n  methods: {\n    async saveDataIndex () {\n      try {\n        await this.axios.put('dataindex', Object.values(this.outputDataIndex))\n        this.$notify({\n          title: '성공',\n          message: '데이터 이름을 변경 하였습니다',\n          type: 'success'\n        })\n      } catch (error) {\n        this.$notify({\n          title: '실패',\n          message: '에러가 발생 하였습니다',\n          type: 'error'\n        })\n      }\n    },\n    async ruleDelete () {\n      this.$confirm('해당 룰을 삭제 하시겠습니까?', '확인', {\n        type: 'warning'\n      })\n        .then(async _ => {\n          try {\n            await this.axios.delete(`rule/applied/${this.ruleId}`)\n            this.$notify({\n              title: '성공',\n              message: '룰을 제거 하였습니다',\n              type: 'success'\n            })\n            this.$router.push(`/control/auto/${this.fieldId}`)\n          } catch (error) {\n            this.$notify({\n              title: '실패',\n              message: '에러가 발생 하였습니다',\n              type: 'error'\n            })\n          }\n        })\n        .catch(_ => {})\n    },\n    async useChange (val) {\n      try {\n        await this.axios.put(`rule/applied/${this.ruleId}`, {\n          used: val\n        })\n\n        if (val === 1) {\n          this.$notify({\n            title: '성공',\n            message: '작동규칙 사용함으로 변경 하였습니다',\n            type: 'success'\n          })\n        } else {\n          this.$notify({\n            title: '성공',\n            message: '작동규칙 중지로 변경 하였습니다',\n            type: 'success'\n          })\n        }\n      } catch (error) {\n        this.$notify({\n          title: '실패',\n          message: '에러가 발생 하였습니다',\n          type: 'error'\n        })\n        this.rule.used = !this.rule.used\n      }\n    },\n    checkConstraint () {\n      let isCheck = true\n\n      if (this.rule.constraints.devices) {\n        for (const device of this.rule.constraints.devices) {\n          if (!device.optional || device.optional === 'false') {\n            if (device.deviceid === '') {\n              isCheck = false\n              break\n            }\n          }\n        }\n      }\n\n      if (this.rule.constraints.data) {\n        for (const data of this.rule.constraints.data) {\n          if (!data.optional || data.optional === 'false') {\n            if (data.dataid === '') {\n              isCheck = false\n              break\n            }\n          }\n        }\n      }\n\n      if (isCheck) {\n        this.isSetLoading = false\n        return true\n      } else {\n        this.isSetLoading = true\n        return false\n      }\n    },\n    async saveTimeSpan () {\n      try {\n        this.timeSpan.timespan.parts.forEach(element => {\n          element.to = element.type + element.value\n        })\n\n        await this.axios.put(`rule/applied/${this.ruleId}`, {\n          timespan: this.timeSpan,\n          configurations: this.rule.configurations\n        })\n\n        this.$notify({\n          title: '성공',\n          message: '동작설정을 변경 하였습니다',\n          type: 'success'\n        })\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    async saveConfiguration () {\n      try {\n        const configurations = this._.cloneDeep(this.rule.configurations)\n\n        configurations.basic.forEach(element => {\n          if (element.use) {\n            if (element.type) {\n              if (element.type === 'time') {\n                if (element.value !== null) {\n                  const time = element.value.split(':')\n                  const second = +time[0] * 60 * 60 + +time[1] * 60 + +time[2]\n                  element.value = second\n                }\n              } else if (element.type === 'ts_time') {\n                if (element.value !== null) {\n                  element.value.forEach(element => {\n                    const time = element.value.split(':')\n                    const second = +time[0] * 60 * 60 + +time[1] * 60 + +time[2]\n                    element.value = second\n                  })\n                }\n              }\n            }\n          } else {\n            element.value = null\n          }\n          delete element.use\n        })\n\n        await this.axios.put(`rule/applied/${this.ruleId}`, {\n          configurations: configurations\n        })\n        this.$notify({\n          title: '성공',\n          message: '동작설정을 변경 하였습니다',\n          type: 'success'\n        })\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    async saveConstraint () {\n      try {\n        if (!this.checkConstraint()) {\n          this.$notify({\n            title: '실패',\n            message: '환경설정 센서를 선택 해 주세요',\n            type: 'error'\n          })\n          return\n        }\n        let inputList = []\n\n        if (this.rule.constraints.devices) {\n          for (const device of this.rule.constraints.devices) {\n            for (const fieldDevice of this.getFieldDevice) {\n              if (device.deviceid === fieldDevice.id) {\n                console.log(fieldDevice)\n                device.name = fieldDevice.name\n                break\n              }\n            }\n\n            if (device.hasOwnProperty('inputs')) {\n              for (const code of device.inputs.codes) {\n                inputList.push({\n                  key: device.inputs.key + code,\n                  dataid: 1 * 10000000 + device.deviceid * 100 + code\n                })\n              }\n            }\n          }\n\n          if (this.rule.outputs.req) {\n            let removeDevice = []\n            let targets = []\n            for (const device of this.rule.constraints.devices) {\n              if (\n                device.class !== 'sensor' &&\n                (device.optional && device.optional === true)\n              ) {\n                if (device.deviceid.toString().length > 0) {\n                  targets.push(device.outputs)\n                }\n                removeDevice.push(device.outputs)\n              }\n            }\n\n            for (const req of this.rule.outputs.req) {\n              this._.remove(req.targets, function (el) {\n                return removeDevice.indexOf(el) !== -1\n              })\n              req.targets = req.targets.concat(targets)\n            }\n          }\n        }\n\n        if (this.rule.constraints.data) {\n          for (const data of this.rule.constraints.data) {\n            inputList.push({\n              key: data.key,\n              dataid: Number(data.dataid)\n            })\n          }\n        }\n\n        await this.axios.put(`rule/applied/${this.ruleId}`, {\n          constraints: this.rule.constraints,\n          inputs: inputList,\n          outputs: this.rule.outputs\n        })\n\n        this.$notify({\n          title: '성공',\n          message: '환경설정을 완료 하였습니다',\n          type: 'success'\n        })\n        this.checkConstraint()\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    async getRule () {\n      try {\n        const { data } = await this.axios.get(`/rule/applied/${this.ruleId}`)\n        this.rule = data\n\n        this.checkConstraint()\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    makeOutputDataIndex () {\n      if (this.rule.outputs.data) {\n        for (const data of this.rule.outputs.data) {\n          const code = 30000000 + this.rule.id * 10000 + data.outcode\n          for (const dataIndex of this.dataindexList) {\n            if (dataIndex.id === code) {\n              this.$set(this.outputDataIndex, code, dataIndex)\n              break\n            }\n          }\n        }\n      }\n    },\n    checkIdfmt (idfmt, item) {\n      var re = new RegExp(idfmt)\n      let regResult = re.test(item.id)\n\n      if (regResult) {\n        if (\n          item.id.toString().startsWith('0') ||\n          item.id.toString().startsWith('2')\n        ) {\n          const id = item.id.substring(1, 3)\n          if (Number(id) === Number(this.fieldId)) {\n            regResult = true\n          } else {\n            regResult = false\n          }\n        }\n      }\n\n      return regResult\n    },\n    async getDataIndex () {\n      try {\n        const { data } = await this.axios.get('dataindex')\n        this.dataindexList = data\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    async getTimeSpan () {\n      try {\n        const { data } = await this.axios.get(\n          `/rule/timespan/${this.rule.configurations.timespan.id}/field/${this.fieldId}`\n        )\n        this.timeSpan = data\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    async setBasicUsed () {\n      for (const item of this.rule.configurations.basic) {\n        if (item.value === null) {\n          this.$set(item, 'use', false)\n\n          if (item.type) {\n            if (item.type === 'time') {\n              item.value = `0:0:0`\n            } else if (item.type === 'ts_time') {\n              item.value = []\n              this.timeSpan.timespan.parts.forEach(element => {\n                item.value.push(`0:0:0`)\n              })\n            } else if (item.type === 'ts_float') {\n              item.value = []\n              this.timeSpan.timespan.parts.forEach(element => {\n                item.value.push(0)\n              })\n            }\n          } else {\n            item.value = 0\n          }\n        } else {\n          this.$set(item, 'use', true)\n\n          if (item.type) {\n            if (item.type === 'time') {\n              var hour = parseInt(item.value / 3600)\n              var min = parseInt((item.value % 3600) / 60)\n              var sec = item.value % 60\n              item.value = `${hour}:${min}:${sec}`\n            } else if (item.type === 'ts_time') {\n              item.value.forEach(element => {\n                var hour = parseInt(element / 3600)\n                var min = parseInt((element % 3600) / 60)\n                var sec = element % 60\n                element = `${hour}:${min}:${sec}`\n              })\n            }\n          }\n        }\n      }\n      this.isBasicUsedComplate = true\n    }\n  },\n  async mounted () {\n    await this.getRule()\n    await this.getTimeSpan()\n    await this.setBasicUsed()\n    await this.getDataIndex()\n    this.makeOutputDataIndex()\n    // this.chartDataMake()\n  }\n}\n</script>\n\n<style scoped>\n.table th {\n  vertical-align: middle;\n  border-bottom: 2px solid rgba(0, 0, 0, 0.0625);\n}\n\n.table td {\n  vertical-align: middle;\n}\n\n.table >>> .el-loading-mask {\n  top: 60px;\n}\n\ndiv >>> .el-card__header {\n  padding-top: 10px;\n  padding-bottom: 10px;\n  background-color: #f8f8f8;\n}\n\ndiv >>> .el-input-group__prepend {\n  background-color: white;\n}\n\ndiv >>> .el-input__inner {\n  /* padding-left: 8px; */\n  /* padding-right: 0px; */\n  /* text-align: center; */\n}\n\ndiv >>> .el-input__suffix {\n  right: -2px;\n}\n\n.scollSideBar {\n  /* top: 30px;\n  left: 10px; */\n  max-width: 180px;\n  font-size: 18px;\n}\n.menu {\n  padding: 0;\n  list-style: none;\n}\n.current-section {\n  padding-top: 50px;\n}\n.current-section input {\n  max-width: 3em;\n}\n.menu-item {\n  margin-bottom: 20px;\n}\n.menu-item a {\n  cursor: pointer;\n}\n.main {\n  /* margin-left: 180px; */\n  width: 100%;\n}\n.customActive {\n  color: #178ce6;\n  border-left: 1px solid #178ce6;\n  padding-left: 5px;\n  transition: all 0.5s;\n}\n</style>\n"],"sourceRoot":"src/views/app/page/control/auto"}]}