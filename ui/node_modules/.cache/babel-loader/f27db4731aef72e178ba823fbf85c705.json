{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js!/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js!/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/components/newDeviceTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/components/newDeviceTree.vue","mtime":1607502276916},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _slicedToArray from \"/home/mrchoi87/farmosV2/ui/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\nimport _defineProperty from \"/home/mrchoi87/farmosV2/ui/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/mrchoi87/farmosV2/ui/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { commonSpecIp } from '@/constants/config';\nimport JsonEditor from '@/components/JsonEditor';\nimport { Multipane, MultipaneResizer } from 'vue-multipane';\nimport { mapGetters } from 'vuex';\nexport default {\n  components: {\n    Multipane: Multipane,\n    MultipaneResizer: MultipaneResizer,\n    JsonEditor: JsonEditor\n  },\n  props: ['devices'],\n  data: function data() {\n    return {\n      showNode: undefined,\n      deviceSpec: {},\n      nodeList: [],\n      legacyDeviceList: [],\n      jsonEditorOptions: {\n        mode: 'code'\n      }\n    };\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.getNodeIdDeviceList();\n\n            case 2:\n              _context.next = 4;\n              return this.nodeTreeCreate();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  computed: _objectSpread({}, mapGetters({\n    getFields: 'field/getFields',\n    getCvtgate: 'cvtgate/getCvtgate'\n  })),\n  methods: {\n    getField: function getField(id) {\n      var _iterator = _createForOfIteratorHelper(this.getFields),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var field = _step.value;\n          if (field.id === id) return field;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n    getNodeIdDeviceList: function () {\n      var _getNodeIdDeviceList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _yield$this$axios$get, data;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.axios.get(\"device\");\n\n              case 2:\n                _yield$this$axios$get = _context2.sent;\n                data = _yield$this$axios$get.data;\n                this.legacyDeviceList = data;\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getNodeIdDeviceList() {\n        return _getNodeIdDeviceList.apply(this, arguments);\n      }\n\n      return getNodeIdDeviceList;\n    }(),\n    deviceItemCreate: function () {\n      var _deviceItemCreate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(coupleId, gatewayId, nodeId, node, spec, i, children, isDevices) {\n        var devcode, tempSpec, deviceStatus, name, place, _iterator2, _step2, legacyDevice, isDisabled;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(!isDevices && !node.devcodes[i] && node.devcodes[i] === 0)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 2:\n                devcode = 0;\n\n                if (isDevices) {\n                  devcode = i + 1;\n                } else {\n                  devcode = node.devcodes[i];\n                }\n\n                tempSpec = this._.cloneDeep(spec);\n                deviceStatus = 'new';\n                name = tempSpec.Name ? tempSpec.Name : tempSpec.Type;\n                place = [];\n                _iterator2 = _createForOfIteratorHelper(this.legacyDeviceList);\n                _context3.prev = 9;\n\n                _iterator2.s();\n\n              case 11:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context3.next = 21;\n                  break;\n                }\n\n                legacyDevice = _step2.value;\n\n                if (!(legacyDevice.coupleid === coupleId && legacyDevice.gateid === gatewayId && legacyDevice.nodeid === Number(nodeId))) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                if (!(legacyDevice.compcode === node.compcode && legacyDevice.devcode === devcode && legacyDevice.devindex === i)) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                deviceStatus = 'legacy';\n                name = legacyDevice.name;\n                place = legacyDevice.place;\n                return _context3.abrupt(\"break\", 21);\n\n              case 19:\n                _context3.next = 11;\n                break;\n\n              case 21:\n                _context3.next = 26;\n                break;\n\n              case 23:\n                _context3.prev = 23;\n                _context3.t0 = _context3[\"catch\"](9);\n\n                _iterator2.e(_context3.t0);\n\n              case 26:\n                _context3.prev = 26;\n\n                _iterator2.f();\n\n                return _context3.finish(26);\n\n              case 29:\n                isDisabled = deviceStatus === 'legacy';\n\n                if (spec.noSpec) {\n                  name = '미지원 스펙';\n                  isDisabled = true;\n                }\n\n                children.push({\n                  name: name,\n                  place: place,\n                  nodeid: nodeId,\n                  compcode: node.compcode,\n                  devcode: devcode,\n                  devindex: i,\n                  spec: tempSpec,\n                  coupleid: coupleId,\n                  gateid: gatewayId,\n                  deviceStatus: deviceStatus,\n                  disabled: isDisabled\n                });\n\n              case 32:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[9, 23, 26, 29]]);\n      }));\n\n      function deviceItemCreate(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n        return _deviceItemCreate.apply(this, arguments);\n      }\n\n      return deviceItemCreate;\n    }(),\n    nodeTreeCreate: function () {\n      var _nodeTreeCreate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var _this = this;\n\n        var noSpectItems, gateList, id, temp, specCodeList, searchCodePrmise, _iterator3, _step3, item, results, _iterator5, _step5, _item;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                this.nodeList = [];\n                noSpectItems = [];\n                gateList = [];\n\n                for (id in this.devices) {\n                  if (id !== 'code' && id !== 'opid' && id !== 'time') {\n                    temp = {};\n                    temp.gatewayId = id;\n                    temp.node = this._.cloneDeep(this.devices[id]);\n                    gateList.push(temp);\n                  }\n                }\n\n                specCodeList = new Set([]);\n                gateList.forEach(function (gate) {\n                  for (var nodeId in gate.node) {\n                    specCodeList.add(\"\".concat(gate.node[nodeId].compcode, \"/\").concat(gate.node[nodeId].nodecode));\n                  }\n                });\n                searchCodePrmise = [];\n                _iterator3 = _createForOfIteratorHelper(specCodeList);\n\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    item = _step3.value;\n                    searchCodePrmise.push(this.getDevSpec(item.split('/')[0], item.split('/')[1], 'nd', 1));\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n\n                results = [];\n                _context4.next = 13;\n                return Promise.all(searchCodePrmise.map(function (p) {\n                  return p.then(function (p) {\n                    results.push(p);\n                    return p;\n                  }).catch(function (p) {\n                    results.push(p);\n                  });\n                }));\n\n              case 13:\n                results.map(function (result) {\n                  if (result.status === 200) {\n                    _this.$set(_this.deviceSpec, \"\".concat(result.config.params.compcode, \"/\").concat(result.config.params.code), result.data);\n                  } else {\n                    _this.$set(_this.deviceSpec, \"\".concat(result.config.params.compcode, \"/\").concat(result.config.params.code), {\n                      noSpec: true,\n                      newSpec: {}\n                    });\n                  }\n                });\n                specCodeList = new Set([]);\n                gateList.forEach(function (gate) {\n                  for (var nodeId in gate.node) {\n                    var node = gate.node[nodeId];\n\n                    if (_this.deviceSpec[\"\".concat(node.compcode, \"/\").concat(node.nodecode)] && !_this.deviceSpec[\"\".concat(node.compcode, \"/\").concat(node.nodecode)].noSpec && !_this.deviceSpec[\"\".concat(node.compcode, \"/\").concat(node.nodecode)].Devices && node.devcodes) {\n                      var _iterator4 = _createForOfIteratorHelper(node.devcodes),\n                          _step4;\n\n                      try {\n                        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                          var devcode = _step4.value;\n                          specCodeList.add(\"\".concat(node.compcode, \"/\").concat(devcode));\n                        }\n                      } catch (err) {\n                        _iterator4.e(err);\n                      } finally {\n                        _iterator4.f();\n                      }\n                    }\n                  }\n                });\n                searchCodePrmise = [];\n                _iterator5 = _createForOfIteratorHelper(specCodeList);\n\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    _item = _step5.value;\n                    searchCodePrmise.push(this.getDevSpec(_item.split('/')[0], _item.split('/')[1], 'dev', 1));\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n\n                _context4.next = 21;\n                return Promise.all(searchCodePrmise.map(function (p) {\n                  return p.then(function (p) {\n                    results.push(p);\n                    return p;\n                  }).catch(function (p) {\n                    results.push(p);\n                  });\n                }));\n\n              case 21:\n                results.map(function (result) {\n                  if (result.status === 200) {\n                    _this.$set(_this.deviceSpec, \"\".concat(result.config.params.compcode, \"/\").concat(result.config.params.code), result.data);\n                  } else {\n                    _this.$set(_this.deviceSpec, \"\".concat(result.config.params.compcode, \"/\").concat(result.config.params.code), {\n                      noSpec: true,\n                      newSpec: {}\n                    });\n                  }\n                });\n                gateList.forEach(function (gate) {\n                  for (var nodeId in gate.node) {\n                    var node = gate.node[nodeId];\n\n                    var item = _this.deviceSpec[\"\".concat(node.compcode, \"/\").concat(node.nodecode)];\n\n                    if (item) {\n                      var deviceStatus = 'new';\n                      var name = item.Name ? item.Name : item.Type;\n\n                      var _iterator6 = _createForOfIteratorHelper(_this.legacyDeviceList),\n                          _step6;\n\n                      try {\n                        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                          var legacyDevice = _step6.value;\n\n                          if (legacyDevice.coupleid === _this.getCvtgate.couple && legacyDevice.gateid === gate.gatewayId && legacyDevice.nodeid === Number(nodeId)) {\n                            if (legacyDevice.compcode === node.compcode && legacyDevice.devcode === node.nodecode) {\n                              deviceStatus = 'legacy';\n                              name = legacyDevice.name;\n                            } else {\n                              deviceStatus = 'new';\n                            }\n\n                            break;\n                          }\n                        }\n                      } catch (err) {\n                        _iterator6.e(err);\n                      } finally {\n                        _iterator6.f();\n                      }\n\n                      var isDisabled = deviceStatus === 'legacy';\n\n                      if (item.noSpec) {\n                        name = '미지원 스펙';\n                        isDisabled = true;\n                      }\n\n                      var nodeTemp = {\n                        nodeid: Number(nodeId),\n                        compcode: node.compcode,\n                        devcode: node.nodecode,\n                        name: name,\n                        spec: item,\n                        coupleid: _this.getCvtgate.couple,\n                        gateid: gate.gatewayId,\n                        deviceStatus: deviceStatus,\n                        disabled: isDisabled,\n                        children: []\n                      };\n\n                      if (!item.noSpec) {\n                        if (item.Devices) {\n                          var _iterator7 = _createForOfIteratorHelper(item.Devices.entries()),\n                              _step7;\n\n                          try {\n                            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                              var _step7$value = _slicedToArray(_step7.value, 2),\n                                  i = _step7$value[0],\n                                  spec = _step7$value[1];\n\n                              _this.deviceItemCreate(_this.getCvtgate.couple, gate.gatewayId, nodeId, node, spec, i, nodeTemp.children, true);\n                            }\n                          } catch (err) {\n                            _iterator7.e(err);\n                          } finally {\n                            _iterator7.f();\n                          }\n                        } else {\n                          var _iterator8 = _createForOfIteratorHelper(node.devcodes.entries()),\n                              _step8;\n\n                          try {\n                            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                              var _step8$value = _slicedToArray(_step8.value, 2),\n                                  _i = _step8$value[0],\n                                  deviceCode = _step8$value[1];\n\n                              _this.deviceItemCreate(_this.getCvtgate.couple, gate.gatewayId, nodeId, node, _this.deviceSpec[\"\".concat(node.compcode, \"/\").concat(deviceCode)], _i, nodeTemp.children, false);\n                            }\n                          } catch (err) {\n                            _iterator8.e(err);\n                          } finally {\n                            _iterator8.f();\n                          }\n                        }\n                      }\n\n                      _this.nodeList.push(nodeTemp);\n                    }\n                  }\n                });\n                this.nodeList = this.nodeList.concat(noSpectItems);\n                _context4.next = 29;\n                break;\n\n              case 26:\n                _context4.prev = 26;\n                _context4.t0 = _context4[\"catch\"](0);\n                console.log(_context4.t0);\n\n              case 29:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 26]]);\n      }));\n\n      function nodeTreeCreate() {\n        return _nodeTreeCreate.apply(this, arguments);\n      }\n\n      return nodeTreeCreate;\n    }(),\n    getCheckNode: function getCheckNode() {\n      var device = this.$refs.tree.getHalfCheckedNodes().concat(this.$refs.tree.getCheckedNodes());\n      return this._.cloneDeep(device);\n    },\n    getDevSpec: function getDevSpec(compcode, devcode, type, ndtype) {\n      //mrchoi87 add ndtype\n      var specIP = commonSpecIp;\n      return this.axios.get(specIP, {\n        params: {\n          compcode: compcode,\n          code: devcode,\n          devtype: type,\n          ndtype: ndtype\n        }\n      });\n    },\n    selectNode: function selectNode(data, node) {\n      if (data.spec.noSpec) {\n        this.showNode = data;\n\n        if (node.level === 1) {\n          this.showNode.type = 'nd';\n        } else {\n          this.showNode.type = 'dev';\n        }\n      } else {\n        if (node.level > 1) {\n          this.showNode = node.parent.data;\n        } else {\n          this.showNode = data;\n        }\n      }\n    },\n    placeChange: function placeChange() {\n      var isNutrientSupply = false;\n      var place = [];\n\n      var _iterator9 = _createForOfIteratorHelper(this.showNode.children),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var device = _step9.value;\n\n          if (device.spec.Class === 'nutrient-supply') {\n            isNutrientSupply = true;\n            place = device.place;\n          }\n\n          if (isNutrientSupply) {\n            var _iterator10 = _createForOfIteratorHelper(this.showNode.children),\n                _step10;\n\n            try {\n              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                var _device = _step10.value;\n                _device.place = place;\n              }\n            } catch (err) {\n              _iterator10.e(err);\n            } finally {\n              _iterator10.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    },\n    jsonCheck: function jsonCheck() {\n      this.$refs.jsonEditor.editorJsonGet();\n    },\n    onChange: function () {\n      var _onChange = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(isSuccess, newJson) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!isSuccess) {\n                  _context5.next = 16;\n                  break;\n                }\n\n                _context5.prev = 1;\n                _context5.next = 4;\n                return this.axios.put(\"\".concat(commonSpecIp, \"/?compcode=\").concat(this.showNode.compcode, \"&code=\").concat(this.showNode.devcode, \"&devtype=\").concat(this.showNode.type), newJson);\n\n              case 4:\n                _context5.next = 9;\n                break;\n\n              case 6:\n                _context5.prev = 6;\n                _context5.t0 = _context5[\"catch\"](1);\n                console.log(_context5.t0);\n\n              case 9:\n                this.$message({\n                  message: '스펙을 추가 하였습니다.'\n                });\n                _context5.next = 12;\n                return this.getNodeIdDeviceList();\n\n              case 12:\n                _context5.next = 14;\n                return this.nodeTreeCreate();\n\n              case 14:\n                _context5.next = 17;\n                break;\n\n              case 16:\n                this.$message({\n                  type: 'error',\n                  message: 'Json 데이터를 확인해 주세요'\n                });\n\n              case 17:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[1, 6]]);\n      }));\n\n      function onChange(_x9, _x10) {\n        return _onChange.apply(this, arguments);\n      }\n\n      return onChange;\n    }()\n  }\n};",{"version":3,"sources":["newDeviceTree.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div>\r\n    <div>\r\n      <multipane class=\"vertical-panes\" layout=\"vertical\">\r\n        <div\r\n          :style=\"{ width: '250px',padding:'3px', minWidth: '250px', background: '#fff' }\"\r\n          class=\"pane\"\r\n        >\r\n          <el-tree\r\n            ref=\"tree\"\r\n            :data=\"nodeList\"\r\n            show-checkbox\r\n            default-expand-all\r\n            :expand-on-click-node=\"false\"\r\n            :highlight-current=\"true\"\r\n            :accordion=\"false\"\r\n            @current-change=\"selectNode\"\r\n          >\r\n            <div class=\"custom-tree-node\" slot-scope=\"{ data }\">\r\n              <span>&nbsp;{{ data.name }}</span>\r\n              <span v-if=\"data.deviceStatus === 'new'\">\r\n                <b-badge pill variant=\"info\" style=\"height:20px\">{{data.deviceStatus}}</b-badge>\r\n              </span>\r\n            </div>\r\n          </el-tree>\r\n        </div>\r\n        <multipane-resizer />\r\n        <div :style=\"{ flexGrow: 1 }\" class=\"pane\">\r\n          <template v-if=\"showNode && showNode.spec.noSpec\">\r\n            <el-button @click=\"jsonCheck\">저장</el-button>\r\n            <b-row class=\"mt-2\">\r\n              <b-col lg=\"12\">\r\n                <b-card class=\"mb-2\" no-body>\r\n                  <b-card-body>\r\n                    <b-row>\r\n                      <b-col lg=\"3\" class=\"ta-c\">\r\n                        <div class=\"d-inline-block\">\r\n                          <h5 class=\"d-inline\">{{showNode.compcode}}</h5>\r\n                          <span class=\"text-muted text-small d-block\">Compcode</span>\r\n                        </div>\r\n                      </b-col>\r\n                      <b-col lg=\"3\" class=\"ta-c\">\r\n                        <div class=\"d-inline-block\">\r\n                          <h5 class=\"d-inline\">{{showNode.devcode}}</h5>\r\n                          <span class=\"text-muted text-small d-block\">Devcode</span>\r\n                        </div>\r\n                      </b-col>\r\n                      <b-col lg=\"3\" class=\"ta-c\">\r\n                        <div class=\"d-inline-block\">\r\n                          <h5 class=\"d-inline\">{{showNode.type}}</h5>\r\n                          <span class=\"text-muted text-small d-block\">Type</span>\r\n                        </div>\r\n                      </b-col>\r\n                      <b-col lg=\"3\" class=\"ta-c\">\r\n                        <div class=\"d-inline-block\">\r\n                          <h5 class=\"d-inline\">{{showNode.devindex}}</h5>\r\n                          <span class=\"text-muted text-small d-block\">Devindex</span>\r\n                        </div>\r\n                      </b-col>\r\n                    </b-row>\r\n                  </b-card-body>\r\n                </b-card>\r\n              </b-col>\r\n            </b-row>\r\n            <jsonEditor\r\n              ref=\"jsonEditor\"\r\n              :json=\"showNode.spec.newSpec\"\r\n              :options=\"jsonEditorOptions\"\r\n              :on-change=\"onChange\"\r\n            />\r\n          </template>\r\n          <template v-else-if=\"showNode && !showNode.spec.noSpec\">\r\n            <b-row>\r\n              <b-col lg=\"12\">\r\n                <b-card class=\"mb-3\" no-body>\r\n                  <b-card-body>\r\n                    <div class=\"float-left float-none-xs mb-4\">\r\n                      <div class=\"d-inline-block\">\r\n                        <h5 class=\"d-inline\">{{showNode.spec.Type}}</h5>\r\n                        <span class=\"text-muted text-small d-block\">Type</span>\r\n                      </div>\r\n                    </div>\r\n                    <table class=\"table table-borderless\" style=\"margin-bottom: 0px;\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th\r\n                            class=\"text-muted text-extra-small\"\r\n                            style=\"padding-bottom: 0px;padding-top: 0px;\"\r\n                          >CLASS</th>\r\n                          <th\r\n                            class=\"text-center text-muted text-extra-small\"\r\n                            style=\"padding-bottom: 0px;padding-top: 0px;\"\r\n                          >MODEL</th>\r\n                          <th\r\n                            class=\"text-right text-muted text-extra-small\"\r\n                            style=\"padding-bottom: 0px;padding-top: 0px;\"\r\n                          >NAME</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr>\r\n                          <td style=\"padding-top: 6px;\">\r\n                            <h5>{{showNode.spec.Class}}</h5>\r\n                          </td>\r\n                          <td class=\"text-center\" style=\"padding-top: 6px;\">\r\n                            <h5>{{showNode.spec.Model}}</h5>\r\n                          </td>\r\n                          <td class=\"text-right\" style=\"padding-top: 6px;\">\r\n                            <h5>{{showNode.spec.Name}}</h5>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                    <div\r\n                      class=\"text-muted mt-1\"\r\n                      style=\"padding-bottom: 0px;padding-top: 0px;padding-left:12px\"\r\n                    >CommSpec</div>\r\n                    <div\r\n                      v-for=\"(commSpec,id) in showNode.spec.CommSpec\"\r\n                      :key=\"id\"\r\n                      style=\"padding-left:12px;padding-right: 0px;padding-top: 10px;padding-bottom: 0px;\"\r\n                    >\r\n                      <b-card :header=\"id\" no-body>\r\n                        <b-card-body\r\n                          style=\"padding-top: 10px;padding-right: 10px;padding-bottom: 10px;padding-left: 20px;\"\r\n                        >\r\n                          <b-list-group flush>\r\n                            <b-list-group-item\r\n                              v-for=\"(type,id) in commSpec\"\r\n                              :key=\"id\"\r\n                              style=\"padding-left: 0px;padding-right: 0px;padding-top: 5px; padding-bottom: 10px;\"\r\n                            >\r\n                              <div>\r\n                                <div class=\"mb-2\">{{id + ' : ' + type['starting-register']}}</div>\r\n                                <b-badge\r\n                                  v-for=\"item in type.items\"\r\n                                  :key=\"item\"\r\n                                  pill\r\n                                  variant=\"outline-secondary\"\r\n                                  class=\"mb-1 mr-1\"\r\n                                >{{item}}</b-badge>\r\n                              </div>\r\n                            </b-list-group-item>\r\n                          </b-list-group>\r\n                        </b-card-body>\r\n                      </b-card>\r\n                    </div>\r\n                  </b-card-body>\r\n                </b-card>\r\n              </b-col>\r\n            </b-row>\r\n            <b-row>\r\n              <b-col lg=\"3\" v-for=\"(device,index) in showNode.children\" :key=\"index\">\r\n                <b-card class=\"mb-4\" no-body>\r\n                  <div\r\n                    class=\"position-absolute card-top-buttons\"\r\n                    v-if=\"device.deviceStatus === 'new'\"\r\n                  >\r\n                    <el-popover placement=\"right\" width=\"300\" trigger=\"click\">\r\n                      <p>정보를 입력 하세요!</p>\r\n                      <el-input placeholder=\"이름을 입력 하세요\" class=\"mb-2\" v-model=\"device.name\">\r\n                        <template slot=\"prepend\">이름</template>\r\n                      </el-input>\r\n\r\n                      <template\r\n                        v-if=\"showNode.spec.Type === 'nutrient-supply-node'? device.spec.Class === 'nutrient-supply' ? true : false : true\"\r\n                      >\r\n                        <div class=\"mt-2 mb-1\">온실</div>\r\n                        <el-select\r\n                          v-model=\"device.place\"\r\n                          multiple\r\n                          placeholder=\"온실을 선택 하세요\"\r\n                          class=\"w-100\"\r\n                          @change=\"placeChange\"\r\n                        >\r\n                          <el-option\r\n                            v-for=\"item in getFields\"\r\n                            :key=\"item.id\"\r\n                            :label=\"item.name\"\r\n                            :value=\"item.id\"\r\n                          ></el-option>\r\n                        </el-select>\r\n\r\n                        <div\r\n                          style=\"color:#1e90ff\"\r\n                          class=\"mt-2 mb-3\"\r\n                          v-if=\"showNode.spec.Type === 'nutrient-supply-node'\"\r\n                        >* 양액기 설치 온실 순서로 선택</div>\r\n                        <div else class=\"mb-3\"></div>\r\n                      </template>\r\n\r\n                      <!-- <div style=\"text-align: right; margin: 0\">\r\n                        <el-button size=\"mini\" type=\"text\" @click=\"visible2 = false\">취소</el-button>\r\n                        <el-button type=\"primary\" size=\"mini\" @click=\"visible2 = false\">경</el-button>\r\n                      </div>-->\r\n                      <el-button slot=\"reference\" icon=\"el-icon-edit\" circle></el-button>\r\n                    </el-popover>\r\n                  </div>\r\n                  <img\r\n                    src=\"/assets/img/sensor.svg\"\r\n                    alt=\"Detail\"\r\n                    class=\"card-img-top pl-4 pr-4\"\r\n                    :style=\"{opacity : device.deviceStatus === 'legacy' ? '0.3' : '1'}\"\r\n                  />\r\n                  <b-badge\r\n                    variant=\"primary\"\r\n                    pill\r\n                    class=\"position-absolute badge-top-left\"\r\n                  >{{`이름 : ${ device.name ? device.name : '-' }`}}</b-badge>\r\n                  <b-badge\r\n                    variant=\"secondary\"\r\n                    pill\r\n                    class=\"position-absolute badge-top-left-2\"\r\n                    v-if=\"showNode.spec.Type === 'nutrient-supply-node'? device.spec.Class === 'nutrient-supply' ? true : false : true\"\r\n                  >\r\n                    온실 : {{device.place.length == 0 ? '-' : ''}}\r\n                    <template\r\n                      v-for=\"(place,idx) in device.place\"\r\n                    >{{idx>0 ? ', ' :'' }}{{getField(place).name}}</template>\r\n                  </b-badge>\r\n                  <b-card-body\r\n                    :style=\"{background : device.deviceStatus === 'legacy' ? 'lightgray' : ''}\"\r\n                  >\r\n                    <p class=\"text-muted text-small mb-2\">Class</p>\r\n                    <p class=\"mb-3\">{{device.spec.Class}}</p>\r\n                    <p class=\"text-muted text-small mb-2\">Type</p>\r\n                    <div class=\"mb-3\">{{device.spec.Type}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Name</p>\r\n                    <div class=\"mb-3\">{{device.spec.Name ? device.spec.Name : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Model</p>\r\n                    <div class=\"mb-3\">{{device.spec.Model ? device.spec.Model : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Unit</p>\r\n                    <div class=\"mb-3\">{{device.spec.ValueUnit ? device.spec.ValueUnit : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">SignificantDigit</p>\r\n                    <div\r\n                      class=\"mb-3\"\r\n                    >{{device.spec.SignificantDigit ? device.spec.SignificantDigit : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">ValueType</p>\r\n                    <div class=\"mb-3\">{{device.spec.ValueType ? device.spec.ValueType : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Channel</p>\r\n                    <div class=\"mb-3\">{{device.spec.Channel ? device.spec.Channel : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">CommSpec</p>\r\n                    <div\r\n                      v-for=\"(type,id) in device.spec.CommSpec\"\r\n                      :key=\"id\"\r\n                      style=\"padding-left: 0px;padding-right: 0px;padding-top: 10px;padding-bottom: 0px;\"\r\n                    >\r\n                      <b-card\r\n                        :header=\"id\"\r\n                        no-body\r\n                        :style=\"{background : device.deviceStatus === 'legacy' ? 'lightgray' : ''}\"\r\n                      >\r\n                        <b-card-body\r\n                          style=\"padding-top: 10px;padding-right: 10px;padding-bottom: 10px;padding-left: 20px;\"\r\n                        >\r\n                          <b-list-group flush>\r\n                            <b-list-group-item\r\n                              v-for=\"(item,id) in type\"\r\n                              :key=\"id\"\r\n                              style=\"padding-left: 0px;padding-right: 0px;padding-top: 10px; padding-bottom: 10px;\"\r\n                              :style=\"{background : device.deviceStatus === 'legacy' ? 'lightgray' : ''}\"\r\n                            >\r\n                              <div>\r\n                                <div class=\"mb-2\">{{id + ' : ' + item['starting-register']}}</div>\r\n                                <b-badge\r\n                                  v-for=\"item in item.items\"\r\n                                  :key=\"item\"\r\n                                  pill\r\n                                  variant=\"outline-secondary\"\r\n                                  class=\"mb-1 mr-1\"\r\n                                >{{item}}</b-badge>\r\n                              </div>\r\n                            </b-list-group-item>\r\n                          </b-list-group>\r\n                        </b-card-body>\r\n                      </b-card>\r\n                    </div>\r\n                  </b-card-body>\r\n                </b-card>\r\n              </b-col>\r\n            </b-row>\r\n          </template>\r\n        </div>\r\n      </multipane>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { commonSpecIp } from '@/constants/config'\r\nimport JsonEditor from '@/components/JsonEditor'\r\nimport { Multipane, MultipaneResizer } from 'vue-multipane'\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  components: {\r\n    Multipane,\r\n    MultipaneResizer,\r\n    JsonEditor\r\n  },\r\n  props: ['devices'],\r\n  data: function () {\r\n    return {\r\n      showNode: undefined,\r\n      deviceSpec: {},\r\n      nodeList: [],\r\n      legacyDeviceList: [],\r\n      jsonEditorOptions: {\r\n        mode: 'code'\r\n      }\r\n    }\r\n  },\r\n  async mounted () {\r\n    await this.getNodeIdDeviceList()\r\n    await this.nodeTreeCreate()\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getFields: 'field/getFields',\r\n      getCvtgate: 'cvtgate/getCvtgate'\r\n    })\r\n  },\r\n  methods: {\r\n    getField (id) {\r\n      for (const field of this.getFields) {\r\n        if (field.id === id) return field\r\n      }\r\n    },\r\n    async getNodeIdDeviceList () {\r\n      const { data } = await this.axios.get(`device`)\r\n      this.legacyDeviceList = data\r\n    },\r\n    async deviceItemCreate (\r\n      coupleId,\r\n      gatewayId,\r\n      nodeId,\r\n      node,\r\n      spec,\r\n      i,\r\n      children,\r\n      isDevices\r\n    ) {\r\n      if (!isDevices && !node.devcodes[i] && node.devcodes[i] === 0) {\r\n        return\r\n      }\r\n\r\n      let devcode = 0\r\n      if (isDevices) {\r\n        devcode = i + 1\r\n      } else {\r\n        devcode = node.devcodes[i]\r\n      }\r\n\r\n      let tempSpec = this._.cloneDeep(spec)\r\n\r\n      let deviceStatus = 'new'\r\n      let name = tempSpec.Name ? tempSpec.Name : tempSpec.Type\r\n      let place = []\r\n\r\n      for (const legacyDevice of this.legacyDeviceList) {\r\n        if (\r\n          legacyDevice.coupleid === coupleId &&\r\n          legacyDevice.gateid === gatewayId &&\r\n          legacyDevice.nodeid === Number(nodeId)\r\n        ) {\r\n          if (\r\n            legacyDevice.compcode === node.compcode &&\r\n            legacyDevice.devcode === devcode &&\r\n            legacyDevice.devindex === i\r\n          ) {\r\n            deviceStatus = 'legacy'\r\n            name = legacyDevice.name\r\n            place = legacyDevice.place\r\n            break\r\n          }\r\n        }\r\n      }\r\n\r\n      let isDisabled = deviceStatus === 'legacy'\r\n      if (spec.noSpec) {\r\n        name = '미지원 스펙'\r\n        isDisabled = true\r\n      }\r\n\r\n      children.push({\r\n        name: name,\r\n        place: place,\r\n        nodeid: nodeId,\r\n        compcode: node.compcode,\r\n        devcode: devcode,\r\n        devindex: i,\r\n        spec: tempSpec,\r\n        coupleid: coupleId,\r\n        gateid: gatewayId,\r\n        deviceStatus: deviceStatus,\r\n        disabled: isDisabled\r\n      })\r\n    },\r\n    async nodeTreeCreate () {\r\n      try {\r\n        this.nodeList = []\r\n        let noSpectItems = []\r\n        let gateList = []\r\n        for (const id in this.devices) {\r\n          if (id !== 'code' && id !== 'opid' && id !== 'time') {\r\n            const temp = {}\r\n            temp.gatewayId = id\r\n            temp.node = this._.cloneDeep(this.devices[id])\r\n            gateList.push(temp)\r\n          }\r\n        }\r\n\r\n        let specCodeList = new Set([])\r\n        gateList.forEach(gate => {\r\n          for (const nodeId in gate.node) {\r\n            specCodeList.add(\r\n              `${gate.node[nodeId].compcode}/${gate.node[nodeId].nodecode}`\r\n            )\r\n          }\r\n        })\r\n\r\n        let searchCodePrmise = []\r\n        for (let item of specCodeList) {\r\n          searchCodePrmise.push(\r\n            this.getDevSpec(item.split('/')[0], item.split('/')[1], 'nd', 1)\r\n          )\r\n        }\r\n\r\n        let results = []\r\n        await Promise.all(\r\n          searchCodePrmise.map(p =>\r\n            p\r\n              .then(p => {\r\n                results.push(p)\r\n                return p\r\n              })\r\n              .catch(p => {\r\n                results.push(p)\r\n              })\r\n          )\r\n        )\r\n\r\n        results.map(result => {\r\n          if (result.status === 200) {\r\n            this.$set(\r\n              this.deviceSpec,\r\n              `${result.config.params.compcode}/${result.config.params.code}`,\r\n              result.data\r\n            )\r\n          } else {\r\n            this.$set(\r\n              this.deviceSpec,\r\n              `${result.config.params.compcode}/${result.config.params.code}`,\r\n              { noSpec: true, newSpec: {} }\r\n            )\r\n          }\r\n        })\r\n\r\n        specCodeList = new Set([])\r\n        gateList.forEach(gate => {\r\n          for (const nodeId in gate.node) {\r\n            const node = gate.node[nodeId]\r\n            if (\r\n              this.deviceSpec[`${node.compcode}/${node.nodecode}`] &&\r\n              !this.deviceSpec[`${node.compcode}/${node.nodecode}`].noSpec &&\r\n              !this.deviceSpec[`${node.compcode}/${node.nodecode}`].Devices &&\r\n              node.devcodes\r\n            ) {\r\n              for (let devcode of node.devcodes) {\r\n                specCodeList.add(`${node.compcode}/${devcode}`)\r\n              }\r\n            }\r\n          }\r\n        })\r\n\r\n        searchCodePrmise = []\r\n        for (let item of specCodeList) {\r\n          searchCodePrmise.push(\r\n            this.getDevSpec(item.split('/')[0], item.split('/')[1], 'dev', 1)\r\n          )\r\n        }\r\n\r\n        await Promise.all(\r\n          searchCodePrmise.map(p =>\r\n            p\r\n              .then(p => {\r\n                results.push(p)\r\n                return p\r\n              })\r\n              .catch(p => {\r\n                results.push(p)\r\n              })\r\n          )\r\n        )\r\n\r\n        results.map(result => {\r\n          if (result.status === 200) {\r\n            this.$set(\r\n              this.deviceSpec,\r\n              `${result.config.params.compcode}/${result.config.params.code}`,\r\n              result.data\r\n            )\r\n          } else {\r\n            this.$set(\r\n              this.deviceSpec,\r\n              `${result.config.params.compcode}/${result.config.params.code}`,\r\n              { noSpec: true, newSpec: {} }\r\n            )\r\n          }\r\n        })\r\n\r\n        gateList.forEach(gate => {\r\n          for (const nodeId in gate.node) {\r\n            const node = gate.node[nodeId]\r\n            let item = this.deviceSpec[`${node.compcode}/${node.nodecode}`]\r\n\r\n            if (item) {\r\n              let deviceStatus = 'new'\r\n              let name = item.Name ? item.Name : item.Type\r\n\r\n              for (const legacyDevice of this.legacyDeviceList) {\r\n                if (\r\n                  legacyDevice.coupleid === this.getCvtgate.couple &&\r\n                  legacyDevice.gateid === gate.gatewayId &&\r\n                  legacyDevice.nodeid === Number(nodeId)\r\n                ) {\r\n                  if (\r\n                    legacyDevice.compcode === node.compcode &&\r\n                    legacyDevice.devcode === node.nodecode\r\n                  ) {\r\n                    deviceStatus = 'legacy'\r\n                    name = legacyDevice.name\r\n                  } else {\r\n                    deviceStatus = 'new'\r\n                  }\r\n                  break\r\n                }\r\n              }\r\n\r\n              let isDisabled = deviceStatus === 'legacy'\r\n              if (item.noSpec) {\r\n                name = '미지원 스펙'\r\n                isDisabled = true\r\n              }\r\n\r\n              let nodeTemp = {\r\n                nodeid: Number(nodeId),\r\n                compcode: node.compcode,\r\n                devcode: node.nodecode,\r\n                name: name,\r\n                spec: item,\r\n                coupleid: this.getCvtgate.couple,\r\n                gateid: gate.gatewayId,\r\n                deviceStatus: deviceStatus,\r\n                disabled: isDisabled,\r\n                children: []\r\n              }\r\n\r\n              if (!item.noSpec) {\r\n                if (item.Devices) {\r\n                  for (const [i, spec] of item.Devices.entries()) {\r\n                    this.deviceItemCreate(\r\n                      this.getCvtgate.couple,\r\n                      gate.gatewayId,\r\n                      nodeId,\r\n                      node,\r\n                      spec,\r\n                      i,\r\n                      nodeTemp.children,\r\n                      true\r\n                    )\r\n                  }\r\n                } else {\r\n                  for (const [i, deviceCode] of node.devcodes.entries()) {\r\n                    this.deviceItemCreate(\r\n                      this.getCvtgate.couple,\r\n                      gate.gatewayId,\r\n                      nodeId,\r\n                      node,\r\n                      this.deviceSpec[`${node.compcode}/${deviceCode}`],\r\n                      i,\r\n                      nodeTemp.children,\r\n                      false\r\n                    )\r\n                  }\r\n                }\r\n              }\r\n              this.nodeList.push(nodeTemp)\r\n            }\r\n          }\r\n        })\r\n\r\n        this.nodeList = this.nodeList.concat(noSpectItems)\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    },\r\n    getCheckNode () {\r\n      const device = this.$refs.tree\r\n        .getHalfCheckedNodes()\r\n        .concat(this.$refs.tree.getCheckedNodes())\r\n      return this._.cloneDeep(device)\r\n    },\r\n    getDevSpec (compcode, devcode, type, ndtype) {\r\n      //mrchoi87 add ndtype\r\n      let specIP = commonSpecIp\r\n\r\n      return this.axios.get(specIP, {\r\n        params: {\r\n          compcode: compcode,\r\n          code: devcode,\r\n          devtype: type,\r\n          ndtype: ndtype\r\n        }\r\n      })\r\n    },\r\n    selectNode (data, node) {\r\n      if (data.spec.noSpec) {\r\n        this.showNode = data\r\n        if (node.level === 1) {\r\n          this.showNode.type = 'nd'\r\n        } else {\r\n          this.showNode.type = 'dev'\r\n        }\r\n      } else {\r\n        if (node.level > 1) {\r\n          this.showNode = node.parent.data\r\n        } else {\r\n          this.showNode = data\r\n        }\r\n      }\r\n    },\r\n    placeChange () {\r\n      let isNutrientSupply = false\r\n      let place = []\r\n      for (const device of this.showNode.children) {\r\n        if (device.spec.Class === 'nutrient-supply') {\r\n          isNutrientSupply = true\r\n          place = device.place\r\n        }\r\n\r\n        if (isNutrientSupply) {\r\n          for (const device of this.showNode.children) {\r\n            device.place = place\r\n          }\r\n        }\r\n      }\r\n    },\r\n    jsonCheck () {\r\n      this.$refs.jsonEditor.editorJsonGet()\r\n    },\r\n    async onChange (isSuccess, newJson) {\r\n      if (isSuccess) {\r\n        try {\r\n          await this.axios.put(\r\n            `${commonSpecIp}/?compcode=${this.showNode.compcode}&code=${this.showNode.devcode}&devtype=${this.showNode.type}`,\r\n            newJson\r\n          )\r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n        this.$message({\r\n          message: '스펙을 추가 하였습니다.'\r\n        })\r\n        await this.getNodeIdDeviceList()\r\n        await this.nodeTreeCreate()\r\n      } else {\r\n        this.$message({\r\n          type: 'error',\r\n          message: 'Json 데이터를 확인해 주세요'\r\n        })\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style  scoped>\r\n.vertical-panes {\r\n  margin: 0px;\r\n  width: 100%;\r\n  min-height: 400px;\r\n  border: 1px solid #ccc;\r\n}\r\n.vertical-panes > .pane {\r\n  text-align: left;\r\n  padding: 15px;\r\n  overflow: auto;\r\n  background: #eee;\r\n}\r\n.vertical-panes > .pane ~ .pane {\r\n  border-left: 1px solid #ccc;\r\n}\r\n\r\n.custom-tree-node {\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  font-size: 14px;\r\n  padding-right: 20px;\r\n}\r\n\r\ndiv >>> .el-checkbox {\r\n  margin-bottom: 0px;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components"}]}