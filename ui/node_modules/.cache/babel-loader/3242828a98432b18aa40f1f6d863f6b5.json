{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js!/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js!/home/mrchoi87/farmosV2/ui/node_modules/eslint-loader/index.js??ref--13-0!/home/mrchoi87/farmosV2/ui/src/mqttUi.js","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/mqttUi.js","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport store from '@/store';\nimport mqtt from 'mqtt';\nimport Vue from 'vue';\nvar options = {\n  keepalive: 10,\n  clientId: 'WebClient-' + parseInt(Math.random() * 10000),\n  protocolId: 'MQTT',\n  protocolVersion: 4,\n  clean: true,\n  reconnectPeriod: 1000,\n  connectTimeout: 30 * 1000\n};\nvar client = null;\nvar controleTime = null;\n\nfunction setSubscribe() {\n  client.unsubscribe('#');\n  var coupleId = store.getters['cvtgate/getCvtgate'].couple; // eslint-disable-next-line no-undef\n\n  var coupleList = Vue._.cloneDeep(store.getters['cvtgate/getDeviceCouple']);\n\n  if (coupleList.indexOf(coupleId) <= 0) {\n    coupleList.push({\n      coupleid: coupleId\n    });\n  }\n\n  var _iterator = _createForOfIteratorHelper(coupleList),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var couple = _step.value;\n      // cvgate\n      client.subscribe(\"cvtgate/\".concat(couple.coupleid, \"/self/stat\"), {\n        qos: 1\n      });\n      client.subscribe(\"cvtgate/\".concat(couple.coupleid, \"/self/res\"), {\n        qos: 2\n      });\n      client.subscribe(\"cvtgate/\".concat(couple.coupleid, \"/self/noti\"), {\n        qos: 1\n      });\n      client.subscribe(\"cvtgate/\".concat(couple.coupleid, \"/+/obs/#\"), {\n        qos: 0\n      });\n      client.subscribe(\"cvtgate/\".concat(couple.coupleid, \"/+/res/#\"), {\n        qos: 2\n      });\n      client.subscribe(\"cvtgate/\".concat(couple.coupleid, \"/+/noti/#\"), {\n        qos: 1\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  console.log('couple subscribe');\n}\n\nfunction workObs(data) {\n  store.commit('observation/setObservationObs', data.content);\n}\n\nfunction workRes(data) {\n  switch (data.content.code) {\n    case 101:\n      // 노드가 탐색을 시작함\n      break;\n  }\n\n  store.commit('mqtt/setOpidRes', [data.content.opid, data.content.res]);\n}\n\nfunction workNoti(data) {\n  switch (data.content.code) {\n    case 101:\n      // 노드가 탐색을 시작함\n      if (!opidDeviceChk(data)) return;\n      store.commit('mqtt/addNotiMsg', data.content);\n      break;\n\n    case 102:\n      // 노드가 탐색 됨\n      if (!opidDeviceChk(data)) return;\n      store.commit('mqtt/addNotiMsg', data.content);\n      store.commit('mqtt/addDeviceItem', data.content);\n      break;\n\n    case 103:\n      // 노드의 프로토콜 버전이 맞지 않음\n      if (!opidDeviceChk(data)) return;\n      store.commit('mqtt/addNotiMsg', data.content);\n      break;\n\n    case 104:\n      // 노드 타입이 맞지 않음\n      if (!opidDeviceChk(data)) return;\n      store.commit('mqtt/addNotiMsg', data.content);\n      break;\n\n    case 105:\n      // 노드 정보가 잘못되어 있음\n      if (!opidDeviceChk(data)) return;\n      store.commit('mqtt/addNotiMsg', data.content);\n      break;\n\n    case 106:\n      // 노드/장비 스펙이 없음\n      if (!opidDeviceChk(data)) return;\n      store.commit('mqtt/addNotiMsg', data.content);\n      break;\n\n    case 107:\n      // 장비 탐색이 취소됨\n      store.commit('mqtt/addNotiMsg', data.content);\n      store.commit('mqtt/clearDeviceItem');\n      store.commit('mqtt/setTryReq', [false, 0]);\n      break;\n\n    case 108:\n      // 장비 탐색이 종료됨\n      if (!opidDeviceChk(data)) return;\n      store.commit('mqtt/addDeviceItemComplate', data.content);\n      store.commit('mqtt/setTryReq', [true, 2]);\n      store.commit('mqtt/addNotiMsg', data.content);\n      break;\n\n    case 201:\n      // 구동기 상태\n      store.commit('observation/setObservationNoti', data.content);\n      store.commit('mqtt/addNotiMsg', data.content);\n      break;\n\n    default:\n      break;\n  }\n}\n/* function opidChk (data) {\n  console.log(store.getters['mqtt/getOpid'](data.content.opid))\n  if (store.getters['mqtt/getOpid'](data.content.opid)) {\n    return true\n  }\n  return false\n} */\n\n\nfunction opidDeviceChk(data) {\n  var id = store.getters['mqtt/getDeviceOpid'];\n\n  if (id === data.content.opid) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction createOpid() {\n  var opid = Math.floor(Math.random() * (64000 - 1 + 1)) + 1;\n  return opid;\n}\n\nexport default (function () {\n  return {\n    isConnected: function isConnected() {\n      if (client) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    mqttSubscribe: function mqttSubscribe() {\n      setSubscribe();\n    },\n    mqttClose: function mqttClose() {\n      if (this.isConnected()) {\n        client.end();\n      }\n    },\n    mqttRefresh: function mqttRefresh(host) {\n      if (this.isConnected()) {\n        return;\n      }\n\n      client = mqtt.connect(\"ws://\".concat(host, \":9001\"), options);\n      client.on('connect', function () {\n        console.log('client connected:' + options.clientId);\n        setSubscribe();\n      });\n      client.on('error', function (err) {\n        console.log(err);\n        client.end();\n      });\n      client.on('message', function (topic, message, packet) {\n        try {\n          console.log('Received Message:= ' + message.toString() + '\\nOn topic:= ' + topic);\n\n          if (topic.lastIndexOf('self/stat') > 0) {\n            console.log('stat :' + message);\n          } else {\n            var data = JSON.parse(message.toString());\n\n            switch (data.type) {\n              case 100:\n                // OBSERVATION\n                workObs(data);\n                break;\n\n              case 300:\n                // RESPONSE\n                // if (!opidChk(data)) return\n                workRes(data);\n                break;\n\n              case 500:\n                // NOTICE\n                workNoti(data);\n                break;\n\n              default:\n                break;\n            }\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      });\n    },\n    removeSubscribe: function removeSubscribe() {},\n    deivceControl: function deivceControl(device, control, param) {\n      if (controleTime === null) {\n        controleTime = new Date().getTime();\n      } else {\n        if ((new Date().getTime() - controleTime) / 1000 < 5) {\n          return false;\n        }\n      }\n\n      controleTime = new Date().getTime();\n      var msg = '';\n\n      if (device.name && device.name.length > 0) {\n        msg = device.name;\n      } else {\n        msg = device.spec.Name;\n      }\n\n      console.log(device);\n      var params = {};\n\n      switch (control) {\n        case 0:\n          msg += ' 정지';\n          break;\n\n        case 1:\n          msg += ' 리셋';\n          break;\n\n        case 301:\n          msg += ' 열기';\n          break;\n\n        case 302:\n          msg += ' 닫기';\n          break;\n\n        case 303:\n          msg += ' 시간 열기';\n          params = {\n            time: param.opentime\n          };\n          break;\n\n        case 304:\n          msg += ' 시간 닫기';\n          params = {\n            time: param.closetime\n          };\n          break;\n\n        case 305:\n          msg += ' 위치 이동';\n          params = {\n            position: param.position\n          };\n          break;\n\n        case 306:\n          msg += ' 설정 저장';\n          params = {\n            opentime: param.opentime,\n            closetime: param.closetime\n          };\n          break;\n\n        case 201:\n          msg += ' 작동';\n          break;\n\n        case 202:\n          msg += ' 시간 작동';\n          params = {\n            'hold-time': param.holdtime\n          };\n          break;\n\n        case 203:\n          msg += ' 시간및 방향';\n          params = {\n            'hold-time': param.holdtime,\n            'ratio': param.ratio\n          };\n          break;\n\n        case 401:\n          msg += ' 1회 관수';\n          break;\n\n        case 402:\n          msg += ' 제어 관수';\n          params = {\n            'EC': Number(param.ec),\n            'pH': Number(param.ph),\n            'on-sec': Number(param.sec),\n            'start-area': Number(device.place.indexOf(param.startarea) + 1),\n            'stop-area': Number(device.place.indexOf(param.stoparea) + 1)\n          };\n          break;\n\n        case 403:\n          msg += ' 제어 변경';\n          params = {\n            'control': param.control\n          };\n          break;\n\n        default:\n          break;\n      }\n\n      var opid = createOpid();\n      var item = {\n        topic: \"cvtgate/\".concat(device.coupleid, \"/\").concat(device.gateid, \"/req/\").concat(device.nid),\n        body: {\n          'content': {\n            'id': device.id,\n            'cmd': control,\n            'param': params,\n            'opid': opid\n          },\n          'exkey': null,\n          'type': 200,\n          'nid': device.nid,\n          'extra': null\n        },\n        res: null,\n        msg: msg\n      };\n      console.log(item);\n      store.commit('mqtt/setOpid', [opid, item]);\n      client.publish(item.topic, JSON.stringify(item.body), {\n        qos: 2\n      });\n      return true;\n    },\n    deivceSearch: function deivceSearch() {\n      var coupleId = store.getters['cvtgate/getCvtgate'].couple;\n      var opid = createOpid();\n      var item = {\n        topic: \"cvtgate/\".concat(coupleId, \"/self/req\"),\n        body: {\n          'content': {\n            'id': coupleId,\n            'cmd': 1001,\n            'param': {},\n            'opid': opid\n          },\n          'exkey': null,\n          'type': 200,\n          'nid': null,\n          'extra': null\n        },\n        res: null\n      };\n      console.log(item); // body: { 'content': { 'id': coupleId, 'cmd': 1001, 'param': {}, 'opid': opid }, 'exkey': null, 'type': 200, 'nid': null, 'extra': null },\n      // body: { 'content': { 'id': coupleId, 'cmd': 1001, 'param': { 'saddr': 1, 'eaddr': 3, 'port': 'USB0' }, 'opid': opid }, 'exkey': null, 'type': 200, 'nid': null, 'extra': null },\n\n      store.commit('mqtt/setOpid', [opid, item]);\n      store.commit('mqtt/setDeviceOpid', opid);\n      store.commit('mqtt/setTryReq', [true, 1]);\n      client.publish(\"cvtgate/\".concat(coupleId, \"/self/req\"), JSON.stringify(item.body), {\n        qos: 2\n      });\n    },\n    deivceSearchCancel: function deivceSearchCancel() {\n      var coupleId = store.getters['cvtgate/getCvtgate'].couple;\n      var opid = createOpid();\n      var item = {\n        topic: \"cvtgate/\".concat(coupleId, \"/self/req\"),\n        body: {\n          'content': {\n            'id': coupleId,\n            'cmd': 1002,\n            'param': {},\n            'opid': opid\n          },\n          'exkey': null,\n          'type': 200,\n          'nid': null,\n          'extra': null\n        },\n        res: null\n      };\n      store.commit('mqtt/setOpid', [opid, item]);\n      client.publish(\"cvtgate/\".concat(coupleId, \"/self/req\"), JSON.stringify(item.body), {\n        qos: 2\n      }, function (error) {\n        if (!error) {\n          store.commit('mqtt/clearDeviceItem');\n          store.commit('mqtt/setTryReq', [false, 0]);\n        }\n      });\n    }\n  };\n})();",{"version":3,"sources":["/home/mrchoi87/farmosV2/ui/src/mqttUi.js"],"names":["store","mqtt","Vue","options","keepalive","clientId","parseInt","Math","random","protocolId","protocolVersion","clean","reconnectPeriod","connectTimeout","client","controleTime","setSubscribe","unsubscribe","coupleId","getters","couple","coupleList","_","cloneDeep","indexOf","push","coupleid","subscribe","qos","console","log","workObs","data","commit","content","workRes","code","opid","res","workNoti","opidDeviceChk","id","createOpid","floor","isConnected","mqttSubscribe","mqttClose","end","mqttRefresh","host","connect","on","err","topic","message","packet","toString","lastIndexOf","JSON","parse","type","error","removeSubscribe","deivceControl","device","control","param","Date","getTime","msg","name","length","spec","Name","params","time","opentime","closetime","position","holdtime","ratio","Number","ec","ph","sec","place","startarea","stoparea","item","gateid","nid","body","publish","stringify","deivceSearch","deivceSearchCancel"],"mappings":"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","sourcesContent":["import store from '@/store'\nimport mqtt from 'mqtt'\nimport Vue from 'vue'\n\nconst options = {\n  keepalive: 10,\n  clientId: 'WebClient-' + parseInt(Math.random() * 10000),\n  protocolId: 'MQTT',\n  protocolVersion: 4,\n  clean: true,\n  reconnectPeriod: 1000,\n  connectTimeout: 30 * 1000\n}\nlet client = null\n\nlet controleTime = null\n\nfunction setSubscribe () {\n  client.unsubscribe('#')\n\n  const coupleId = store.getters['cvtgate/getCvtgate'].couple\n  // eslint-disable-next-line no-undef\n  const coupleList = Vue._.cloneDeep(store.getters['cvtgate/getDeviceCouple'])\n\n  if (coupleList.indexOf(coupleId) <= 0) {\n    coupleList.push({ coupleid: coupleId })\n  }\n\n  for (const couple of coupleList) {\n    // cvgate\n    client.subscribe(`cvtgate/${couple.coupleid}/self/stat`, { qos: 1 })\n    client.subscribe(`cvtgate/${couple.coupleid}/self/res`, { qos: 2 })\n    client.subscribe(`cvtgate/${couple.coupleid}/self/noti`, { qos: 1 })\n\n    client.subscribe(`cvtgate/${couple.coupleid}/+/obs/#`, { qos: 0 })\n    client.subscribe(`cvtgate/${couple.coupleid}/+/res/#`, { qos: 2 })\n    client.subscribe(`cvtgate/${couple.coupleid}/+/noti/#`, { qos: 1 })\n  }\n  console.log('couple subscribe')\n}\n\nfunction workObs (data) {\n  store.commit('observation/setObservationObs', data.content)\n}\n\nfunction workRes (data) {\n  switch (data.content.code) {\n    case 101: // 노드가 탐색을 시작함\n      break\n  }\n  store.commit('mqtt/setOpidRes', [data.content.opid, data.content.res])\n}\n\nfunction workNoti (data) {\n  switch (data.content.code) {\n    case 101: // 노드가 탐색을 시작함\n      if (!opidDeviceChk(data)) return\n      store.commit('mqtt/addNotiMsg', data.content)\n      break\n    case 102: // 노드가 탐색 됨\n      if (!opidDeviceChk(data)) return\n      store.commit('mqtt/addNotiMsg', data.content)\n      store.commit('mqtt/addDeviceItem', data.content)\n      break\n    case 103: // 노드의 프로토콜 버전이 맞지 않음\n      if (!opidDeviceChk(data)) return\n      store.commit('mqtt/addNotiMsg', data.content)\n      break\n    case 104: // 노드 타입이 맞지 않음\n      if (!opidDeviceChk(data)) return\n      store.commit('mqtt/addNotiMsg', data.content)\n      break\n    case 105: // 노드 정보가 잘못되어 있음\n      if (!opidDeviceChk(data)) return\n      store.commit('mqtt/addNotiMsg', data.content)\n      break\n    case 106: // 노드/장비 스펙이 없음\n      if (!opidDeviceChk(data)) return\n      store.commit('mqtt/addNotiMsg', data.content)\n      break\n    case 107: // 장비 탐색이 취소됨\n      store.commit('mqtt/addNotiMsg', data.content)\n      store.commit('mqtt/clearDeviceItem')\n      store.commit('mqtt/setTryReq', [false, 0])\n      break\n    case 108: // 장비 탐색이 종료됨\n      if (!opidDeviceChk(data)) return\n      store.commit('mqtt/addDeviceItemComplate', data.content)\n      store.commit('mqtt/setTryReq', [true, 2])\n      store.commit('mqtt/addNotiMsg', data.content)\n      break\n    case 201: // 구동기 상태\n      store.commit('observation/setObservationNoti', data.content)\n      store.commit('mqtt/addNotiMsg', data.content)\n      break\n\n    default:\n      break\n  }\n}\n\n/* function opidChk (data) {\n  console.log(store.getters['mqtt/getOpid'](data.content.opid))\n  if (store.getters['mqtt/getOpid'](data.content.opid)) {\n    return true\n  }\n  return false\n} */\n\nfunction opidDeviceChk (data) {\n  const id = store.getters['mqtt/getDeviceOpid']\n  if (id === data.content.opid) {\n    return true\n  }\n  return false\n}\n\nfunction createOpid () {\n  const opid = Math.floor(Math.random() * (64000 - 1 + 1)) + 1\n  return opid\n}\n\nexport default (() => {\n  return {\n    isConnected () {\n      if (client) {\n        return true\n      } else {\n        return false\n      }\n    },\n    mqttSubscribe () {\n      setSubscribe()\n    },\n    mqttClose () {\n      if (this.isConnected()) {\n        client.end()\n      }\n    },\n    mqttRefresh (host) {\n      if (this.isConnected()) {\n        return\n      }\n      client = mqtt.connect(`ws://${host}:9001`, options)\n\n      client.on('connect', function () {\n        console.log('client connected:' + options.clientId)\n        setSubscribe()\n      })\n\n      client.on('error', function (err) {\n        console.log(err)\n        client.end()\n      })\n\n      client.on('message', function (topic, message, packet) {\n        try {\n          console.log('Received Message:= ' + message.toString() + '\\nOn topic:= ' + topic)\n          if (topic.lastIndexOf('self/stat') > 0) {\n            console.log('stat :' + message)\n          } else {\n            const data = JSON.parse(message.toString())\n\n            switch (data.type) {\n              case 100: // OBSERVATION\n                workObs(data)\n                break\n              case 300: // RESPONSE\n                // if (!opidChk(data)) return\n                workRes(data)\n                break\n              case 500: // NOTICE\n                workNoti(data)\n                break\n\n              default:\n                break\n            }\n          }\n        } catch (error) {\n          console.log(error)\n        }\n      })\n    },\n    removeSubscribe () {\n\n    },\n\n    deivceControl (device, control, param) {\n      if (controleTime === null) {\n        controleTime = new Date().getTime()\n      } else {\n        if ((new Date().getTime() - controleTime) / 1000 < 5) {\n          return false\n        }\n      }\n      controleTime = new Date().getTime()\n\n      let msg = ''\n      if (device.name && device.name.length > 0) {\n        msg = device.name\n      } else {\n        msg = device.spec.Name\n      }\n\n      console.log(device)\n      let params = {}\n      switch (control) {\n        case 0:\n          msg += ' 정지'\n          break\n        case 1:\n          msg += ' 리셋'\n          break\n        case 301:\n          msg += ' 열기'\n          break\n        case 302:\n          msg += ' 닫기'\n          break\n        case 303:\n          msg += ' 시간 열기'\n          params = {\n            time: param.opentime\n          }\n          break\n        case 304:\n          msg += ' 시간 닫기'\n          params = {\n            time: param.closetime\n          }\n          break\n        case 305:\n          msg += ' 위치 이동'\n          params = {\n            position: param.position\n          }\n          break\n        case 306:\n          msg += ' 설정 저장'\n          params = {\n            opentime: param.opentime,\n            closetime: param.closetime\n          }\n          break\n        case 201:\n          msg += ' 작동'\n          break\n        case 202:\n          msg += ' 시간 작동'\n          params = {\n            'hold-time': param.holdtime\n          }\n          break\n        case 203:\n          msg += ' 시간및 방향'\n          params = {\n            'hold-time': param.holdtime,\n            'ratio': param.ratio\n          }\n          break\n        case 401:\n          msg += ' 1회 관수'\n          break\n        case 402:\n          msg += ' 제어 관수'\n          params = {\n            'EC': Number(param.ec),\n            'pH': Number(param.ph),\n            'on-sec': Number(param.sec),\n            'start-area': Number(device.place.indexOf(param.startarea) + 1),\n            'stop-area': Number(device.place.indexOf(param.stoparea) + 1)\n          }\n          break\n        case 403:\n          msg += ' 제어 변경'\n          params = {\n            'control': param.control\n          }\n          break\n\n        default:\n          break\n      }\n\n      const opid = createOpid()\n      const item = {\n        topic: `cvtgate/${device.coupleid}/${device.gateid}/req/${device.nid}`,\n        body: { 'content': { 'id': device.id, 'cmd': control, 'param': params, 'opid': opid }, 'exkey': null, 'type': 200, 'nid': device.nid, 'extra': null },\n        res: null,\n        msg: msg\n      }\n\n      console.log(item)\n      store.commit('mqtt/setOpid', [opid, item])\n      client.publish(item.topic, JSON.stringify(item.body), { qos: 2 })\n\n      return true\n    },\n    deivceSearch () {\n      const coupleId = store.getters['cvtgate/getCvtgate'].couple\n      const opid = createOpid()\n      const item = {\n        topic: `cvtgate/${coupleId}/self/req`,\n        body: { 'content': { 'id': coupleId, 'cmd': 1001, 'param': {}, 'opid': opid }, 'exkey': null, 'type': 200, 'nid': null, 'extra': null },\n        res: null\n      }\n\n      console.log(item)\n      // body: { 'content': { 'id': coupleId, 'cmd': 1001, 'param': {}, 'opid': opid }, 'exkey': null, 'type': 200, 'nid': null, 'extra': null },\n      // body: { 'content': { 'id': coupleId, 'cmd': 1001, 'param': { 'saddr': 1, 'eaddr': 3, 'port': 'USB0' }, 'opid': opid }, 'exkey': null, 'type': 200, 'nid': null, 'extra': null },\n      store.commit('mqtt/setOpid', [opid, item])\n      store.commit('mqtt/setDeviceOpid', opid)\n      store.commit('mqtt/setTryReq', [true, 1])\n      client.publish(`cvtgate/${coupleId}/self/req`, JSON.stringify(item.body), { qos: 2 })\n    },\n    deivceSearchCancel () {\n      const coupleId = store.getters['cvtgate/getCvtgate'].couple\n      const opid = createOpid()\n      const item = {\n        topic: `cvtgate/${coupleId}/self/req`,\n        body: { 'content': { 'id': coupleId, 'cmd': 1002, 'param': {}, 'opid': opid }, 'exkey': null, 'type': 200, 'nid': null, 'extra': null },\n        res: null\n      }\n      store.commit('mqtt/setOpid', [opid, item])\n      client.publish(`cvtgate/${coupleId}/self/req`, JSON.stringify(item.body), { qos: 2 }, (error) => {\n        if (!error) {\n          store.commit('mqtt/clearDeviceItem')\n          store.commit('mqtt/setTryReq', [false, 0])\n        }\n      })\n    }\n  }\n})()\n"]}]}