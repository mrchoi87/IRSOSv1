{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js!/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js!/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/components/modifyDeviceTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/components/modifyDeviceTree.vue","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport _toConsumableArray from \"/home/mrchoi87/farmosV2/ui/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/mrchoi87/farmosV2/ui/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/mrchoi87/farmosV2/ui/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Multipane, MultipaneResizer } from 'vue-multipane';\nimport { mapGetters } from 'vuex';\nexport default {\n  components: {\n    Multipane: Multipane,\n    MultipaneResizer: MultipaneResizer\n  },\n  props: ['devices'],\n  data: function data() {\n    return {\n      showNode: undefined,\n      deviceSpec: {},\n      nodeList: [],\n      nodeIdDeviceList: []\n    };\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.getDevices();\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  computed: _objectSpread({}, mapGetters({\n    getFields: 'field/getFields',\n    getCvtgate: 'cvtgate/getCvtgate',\n    getDeviceList: 'device/getDevices'\n  })),\n  methods: {\n    getCheckNode: function getCheckNode() {\n      var device = this.$refs.tree.getCheckedNodes();\n      return this._.cloneDeep(device);\n    },\n    deviceSave: function () {\n      var _deviceSave = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(item, isNutrientSupply) {\n        var modifyList, place, _iterator, _step, device, _iterator2, _step2, _device;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                modifyList = [];\n\n                if (!isNutrientSupply) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                if (!(item.spec.Class === 'nutrient-supply')) {\n                  _context2.next = 26;\n                  break;\n                }\n\n                place = [];\n                _iterator = _createForOfIteratorHelper(this.showNode.children);\n                _context2.prev = 5;\n\n                _iterator.s();\n\n              case 7:\n                if ((_step = _iterator.n()).done) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                device = _step.value;\n\n                if (!(device.spec.Class === 'nutrient-supply')) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                place = device.place;\n                return _context2.abrupt(\"break\", 14);\n\n              case 12:\n                _context2.next = 7;\n                break;\n\n              case 14:\n                _context2.next = 19;\n                break;\n\n              case 16:\n                _context2.prev = 16;\n                _context2.t0 = _context2[\"catch\"](5);\n\n                _iterator.e(_context2.t0);\n\n              case 19:\n                _context2.prev = 19;\n\n                _iterator.f();\n\n                return _context2.finish(19);\n\n              case 22:\n                _iterator2 = _createForOfIteratorHelper(this.showNode.children);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    _device = _step2.value;\n                    _device.place = place;\n                    modifyList.push(_device);\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                _context2.next = 27;\n                break;\n\n              case 26:\n                modifyList.push(item);\n\n              case 27:\n                _context2.next = 30;\n                break;\n\n              case 29:\n                modifyList.push(item);\n\n              case 30:\n                _context2.prev = 30;\n                _context2.next = 33;\n                return this.axios.put('device', modifyList);\n\n              case 33:\n                this.$notify({\n                  title: '성공',\n                  message: '장비 정보를 수정 하였습니다.',\n                  type: 'success'\n                });\n                this.$store.dispatch('device/fetchDataDevice');\n                item.visible = false;\n                _context2.next = 41;\n                break;\n\n              case 38:\n                _context2.prev = 38;\n                _context2.t1 = _context2[\"catch\"](30);\n                this.$notify({\n                  title: '실패',\n                  message: '장비 정보 수정 실패 하였습니다.',\n                  type: 'error'\n                });\n\n              case 41:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[5, 16, 19, 22], [30, 38]]);\n      }));\n\n      function deviceSave(_x, _x2) {\n        return _deviceSave.apply(this, arguments);\n      }\n\n      return deviceSave;\n    }(),\n    getDevices: function () {\n      var _getDevices = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(isSelect) {\n        var _yield$this$axios$get, data, couple, temp, _iterator3, _step3, node, _iterator4, _step4, children, _iterator5, _step5, _node;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return this.axios.get('device');\n\n              case 3:\n                _yield$this$axios$get = _context3.sent;\n                data = _yield$this$axios$get.data;\n                couple = {};\n                data.map(function (device) {\n                  var hasCouple = couple.hasOwnProperty(device.coupleid);\n\n                  if (!hasCouple) {\n                    couple[device.coupleid] = {};\n                  }\n\n                  var hasGate = couple[device.coupleid].hasOwnProperty(device.gateid);\n\n                  if (!hasGate) {\n                    couple[device.coupleid][device.gateid] = {};\n                  }\n\n                  var hasNode = couple[device.coupleid][device.gateid].hasOwnProperty(device.nodeid);\n\n                  if (!hasNode) {\n                    couple[device.coupleid][device.gateid][device.nodeid] = {};\n                  }\n\n                  if (device.devindex !== null) {\n                    couple[device.coupleid][device.gateid][device.nodeid].children.push(device);\n                  } else {\n                    couple[device.coupleid][device.gateid][device.nodeid] = _objectSpread(_objectSpread({}, device), {}, {\n                      children: []\n                    });\n                  }\n                });\n                temp = Object.keys(couple).map(function (coupleKey) {\n                  var tempCouple = {\n                    id: coupleKey,\n                    children: []\n                  };\n                  Object.keys(couple[coupleKey]).map(function (gateKey) {\n                    var _tempCouple$children;\n\n                    var tempNode = Object.keys(couple[coupleKey][gateKey]).map(function (nodeKey) {\n                      return couple[coupleKey][gateKey][nodeKey];\n                    });\n\n                    (_tempCouple$children = tempCouple.children).push.apply(_tempCouple$children, _toConsumableArray(tempNode));\n                  });\n                  return tempCouple;\n                });\n                this.nodeList = temp;\n\n                if (!(this.showNode !== undefined && isSelect)) {\n                  _context3.next = 47;\n                  break;\n                }\n\n                _iterator3 = _createForOfIteratorHelper(this.nodeList);\n                _context3.prev = 11;\n\n                _iterator3.s();\n\n              case 13:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context3.next = 39;\n                  break;\n                }\n\n                node = _step3.value;\n\n                if (!(node.id === this.showNode.coupleid)) {\n                  _context3.next = 37;\n                  break;\n                }\n\n                _iterator4 = _createForOfIteratorHelper(node.children);\n                _context3.prev = 17;\n\n                _iterator4.s();\n\n              case 19:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context3.next = 28;\n                  break;\n                }\n\n                children = _step4.value;\n\n                if (!(children.nid === this.showNode.nid)) {\n                  _context3.next = 26;\n                  break;\n                }\n\n                this.showNode = children;\n                _iterator5 = _createForOfIteratorHelper(this.showNode.children);\n\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    _node = _step5.value;\n                    this.$set(_node, 'visible', false);\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n\n                return _context3.abrupt(\"break\", 28);\n\n              case 26:\n                _context3.next = 19;\n                break;\n\n              case 28:\n                _context3.next = 33;\n                break;\n\n              case 30:\n                _context3.prev = 30;\n                _context3.t0 = _context3[\"catch\"](17);\n\n                _iterator4.e(_context3.t0);\n\n              case 33:\n                _context3.prev = 33;\n\n                _iterator4.f();\n\n                return _context3.finish(33);\n\n              case 36:\n                return _context3.abrupt(\"break\", 39);\n\n              case 37:\n                _context3.next = 13;\n                break;\n\n              case 39:\n                _context3.next = 44;\n                break;\n\n              case 41:\n                _context3.prev = 41;\n                _context3.t1 = _context3[\"catch\"](11);\n\n                _iterator3.e(_context3.t1);\n\n              case 44:\n                _context3.prev = 44;\n\n                _iterator3.f();\n\n                return _context3.finish(44);\n\n              case 47:\n                _context3.next = 52;\n                break;\n\n              case 49:\n                _context3.prev = 49;\n                _context3.t2 = _context3[\"catch\"](0);\n                console.log(_context3.t2);\n\n              case 52:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 49], [11, 41, 44, 47], [17, 30, 33, 36]]);\n      }));\n\n      function getDevices(_x3) {\n        return _getDevices.apply(this, arguments);\n      }\n\n      return getDevices;\n    }(),\n    getField: function getField(id) {\n      var _iterator6 = _createForOfIteratorHelper(this.getFields),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var field = _step6.value;\n          if (field.id === id) return field;\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    },\n    selectNode: function selectNode(data, node) {\n      if (node.level > 2) {\n        this.showNode = node.parent.data;\n      } else {\n        this.showNode = data;\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(this.showNode.children),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _node2 = _step7.value;\n          this.$set(_node2, 'visible', false);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }\n};",{"version":3,"sources":["modifyDeviceTree.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div>\r\n    <div>\r\n      <multipane class=\"vertical-panes\" layout=\"vertical\">\r\n        <div\r\n          :style=\"{ width: '250px',padding:'3px', minWidth: '250px', background: '#fff' }\"\r\n          class=\"pane\"\r\n        >\r\n          <el-tree\r\n            ref=\"tree\"\r\n            :data=\"nodeList\"\r\n            show-checkbox\r\n            default-expand-all\r\n            :expand-on-click-node=\"false\"\r\n            :highlight-current=\"true\"\r\n            :accordion=\"false\"\r\n            @current-change=\"selectNode\"\r\n          >\r\n            <div class=\"custom-tree-node\" slot-scope=\"{ data,node }\">\r\n              <span\r\n                v-if=\"node.level === 1\"\r\n              >&nbsp;{{ getCvtgate.couple === data.id ? '지원 장비' :'수동 장비' }}</span>\r\n              <span v-else>&nbsp;{{ data.name }}</span>\r\n            </div>\r\n          </el-tree>\r\n        </div>\r\n        <multipane-resizer />\r\n        <div :style=\"{ flexGrow: 1 }\" class=\"pane\">\r\n          <template v-if=\"showNode && showNode.nodeid\">\r\n            <b-row>\r\n              <b-col lg=\"12\">\r\n                <b-card class=\"mb-3\" no-body>\r\n                  <b-card-body>\r\n                    <div class=\"float-left float-none-xs mb-4\">\r\n                      <div class=\"d-inline-block\">\r\n                        <h5 class=\"d-inline\">{{showNode.spec.Type}}</h5>\r\n                        <span class=\"text-muted text-small d-block\">Type</span>\r\n                      </div>\r\n                    </div>\r\n                    <table class=\"table table-borderless\" style=\"margin-bottom: 0px;\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th\r\n                            class=\"text-muted text-extra-small\"\r\n                            style=\"padding-bottom: 0px;padding-top: 0px;\"\r\n                          >CLASS</th>\r\n                          <th\r\n                            class=\"text-center text-muted text-extra-small\"\r\n                            style=\"padding-bottom: 0px;padding-top: 0px;\"\r\n                          >MODEL</th>\r\n                          <th\r\n                            class=\"text-right text-muted text-extra-small\"\r\n                            style=\"padding-bottom: 0px;padding-top: 0px;\"\r\n                          >NAME</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr>\r\n                          <td style=\"padding-top: 6px;\">\r\n                            <h5>{{showNode.spec.Class}}</h5>\r\n                          </td>\r\n                          <td class=\"text-center\" style=\"padding-top: 6px;\">\r\n                            <h5>{{showNode.spec.Model}}</h5>\r\n                          </td>\r\n                          <td class=\"text-right\" style=\"padding-top: 6px;\">\r\n                            <h5>{{showNode.spec.Name}}</h5>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                    <div\r\n                      class=\"text-muted mt-1\"\r\n                      style=\"padding-bottom: 0px;padding-top: 0px;padding-left:12px\"\r\n                    >CommSpec</div>\r\n                    <div\r\n                      v-for=\"(item,id) in showNode.spec.CommSpec\"\r\n                      :key=\"id\"\r\n                      style=\"padding-left:12px;padding-right: 0px;padding-top: 10px;padding-bottom: 0px;\"\r\n                    >\r\n                      <b-card :header=\"id\" no-body>\r\n                        <b-card-body\r\n                          style=\"padding-top: 10px;padding-right: 10px;padding-bottom: 10px;padding-left: 20px;\"\r\n                        >\r\n                          <b-list-group flush>\r\n                            <b-list-group-item\r\n                              v-for=\"(item,id) in item\"\r\n                              :key=\"id\"\r\n                              style=\"padding-left: 0px;padding-right: 0px;padding-top: 5px; padding-bottom: 10px;\"\r\n                            >\r\n                              <div>\r\n                                <div class=\"mb-2\">{{id + ' : ' + item['starting-register']}}</div>\r\n                                <b-badge\r\n                                  v-for=\"item in item.items\"\r\n                                  :key=\"item\"\r\n                                  pill\r\n                                  variant=\"outline-secondary\"\r\n                                  class=\"mb-1 mr-1\"\r\n                                >{{item}}</b-badge>\r\n                              </div>\r\n                            </b-list-group-item>\r\n                          </b-list-group>\r\n                        </b-card-body>\r\n                      </b-card>\r\n                    </div>\r\n                  </b-card-body>\r\n                </b-card>\r\n              </b-col>\r\n            </b-row>\r\n            <b-row>\r\n              <b-col lg=\"3\" v-for=\"(device,index) in showNode.children\" :key=\"index\">\r\n                <b-card no-body>\r\n                  <div class=\"position-absolute card-top-buttons\">\r\n                    <el-popover placement=\"right\" width=\"300\" v-model=\"device.visible\">\r\n                      <p>정보를 입력 하세요!</p>\r\n                      <el-input placeholder=\"이름을 입력 하세요\" class=\"mb-2\" v-model=\"device.name\">\r\n                        <template slot=\"prepend\">이름</template>\r\n                      </el-input>\r\n\r\n                      <template\r\n                        v-if=\"showNode.spec.Type === 'nutrient-supply-node'? device.spec.Class === 'nutrient-supply' ? true : false : true\"\r\n                      >\r\n                        <div class=\"mt-2 mb-1\">온실</div>\r\n                        <el-select\r\n                          v-model=\"device.place\"\r\n                          multiple\r\n                          placeholder=\"온실을 선택 하세요\"\r\n                          class=\"mb w-100\"\r\n                        >\r\n                          <el-option\r\n                            v-for=\"item in getFields\"\r\n                            :key=\"item.id\"\r\n                            :label=\"item.name\"\r\n                            :value=\"item.id\"\r\n                          ></el-option>\r\n                        </el-select>\r\n                        <div\r\n                          style=\"color:#1e90ff\"\r\n                          class=\"mt-2 mb-3\"\r\n                          v-if=\"showNode.spec.Type === 'nutrient-supply-node'\"\r\n                        >* 양액기 설치 온실 순서로 선택</div>\r\n                        <div else class=\"mb-3\"></div>\r\n                      </template>\r\n                      <el-button\r\n                        class=\"w-100\"\r\n                        @click=\"deviceSave(device,showNode.spec.Type === 'nutrient-supply-node')\"\r\n                      >저장</el-button>\r\n                      <el-button slot=\"reference\" icon=\"el-icon-edit\" circle></el-button>\r\n                    </el-popover>\r\n                  </div>\r\n                  <img\r\n                    src=\"/assets/img/sensor.svg\"\r\n                    alt=\"Detail\"\r\n                    class=\"card-img-top pl-5 pr-5\"\r\n                    :style=\"{opacity : device.deviceStatus === 'legacy' ? '0.3' : '1'}\"\r\n                  />\r\n                  <b-badge\r\n                    variant=\"primary\"\r\n                    pill\r\n                    class=\"position-absolute badge-top-left\"\r\n                  >{{`이름 : ${ device.name ? device.name : '-' }`}}</b-badge>\r\n                  <b-badge\r\n                    variant=\"secondary\"\r\n                    pill\r\n                    class=\"position-absolute badge-top-left-2\"\r\n                    v-if=\"showNode.spec.Type === 'nutrient-supply-node'? device.spec.Class === 'nutrient-supply' ? true : false : true\"\r\n                  >\r\n                    온실 : {{device.place.length == 0 ? '-' : ''}}\r\n                    <template\r\n                      v-for=\"(place,idx) in device.place\"\r\n                    >{{idx>0 ? ', ' :'' }}{{getField(place).name}}</template>\r\n                  </b-badge>\r\n                  <b-card-body\r\n                    :style=\"{background : device.deviceStatus === 'legacy' ? 'lightgray' : ''}\"\r\n                  >\r\n                    <p class=\"text-muted text-small mb-2\">Class</p>\r\n                    <p class=\"mb-3\">{{device.spec.Class}}</p>\r\n                    <p class=\"text-muted text-small mb-2\">Type</p>\r\n                    <div class=\"mb-3\">{{device.spec.Type}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Name</p>\r\n                    <div class=\"mb-3\">{{device.spec.Name ? device.spec.Name : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Model</p>\r\n                    <div class=\"mb-3\">{{device.spec.Model ? device.spec.Model : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Unit</p>\r\n                    <div class=\"mb-3\">{{device.spec.ValueUnit ? device.spec.ValueUnit : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">SignificantDigit</p>\r\n                    <div\r\n                      class=\"mb-3\"\r\n                    >{{device.spec.SignificantDigit ? device.spec.SignificantDigit : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">ValueType</p>\r\n                    <div class=\"mb-3\">{{device.spec.ValueType ? device.spec.ValueType : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Channel</p>\r\n                    <div class=\"mb-3\">{{device.spec.Channel ? device.spec.Channel : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">CommSpec</p>\r\n                    <div\r\n                      v-for=\"(item,id) in device.spec.CommSpec\"\r\n                      :key=\"id\"\r\n                      style=\"padding-left: 0px;padding-right: 0px;padding-top: 10px;padding-bottom: 0px;\"\r\n                    >\r\n                      <b-card\r\n                        :header=\"id\"\r\n                        no-body\r\n                        :style=\"{background : device.deviceStatus === 'legacy' ? 'lightgray' : ''}\"\r\n                      >\r\n                        <b-card-body\r\n                          style=\"padding-top: 10px;padding-right: 10px;padding-bottom: 10px;padding-left: 20px;\"\r\n                        >\r\n                          <b-list-group flush>\r\n                            <b-list-group-item\r\n                              v-for=\"(item,id) in item\"\r\n                              :key=\"id\"\r\n                              style=\"padding-left: 0px;padding-right: 0px;padding-top: 10px; padding-bottom: 10px;\"\r\n                              :style=\"{background : device.deviceStatus === 'legacy' ? 'lightgray' : ''}\"\r\n                            >\r\n                              <div>\r\n                                <div class=\"mb-2\">{{id + ' : ' + item['starting-register']}}</div>\r\n                                <b-badge\r\n                                  v-for=\"item in item.items\"\r\n                                  :key=\"item\"\r\n                                  pill\r\n                                  variant=\"outline-secondary\"\r\n                                  class=\"mb-1 mr-1\"\r\n                                >{{item}}</b-badge>\r\n                              </div>\r\n                            </b-list-group-item>\r\n                          </b-list-group>\r\n                        </b-card-body>\r\n                      </b-card>\r\n                    </div>\r\n                  </b-card-body>\r\n                </b-card>\r\n              </b-col>\r\n            </b-row>\r\n          </template>\r\n        </div>\r\n      </multipane>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Multipane, MultipaneResizer } from 'vue-multipane'\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  components: {\r\n    Multipane,\r\n    MultipaneResizer\r\n  },\r\n  props: ['devices'],\r\n  data: function () {\r\n    return {\r\n      showNode: undefined,\r\n      deviceSpec: {},\r\n      nodeList: [],\r\n      nodeIdDeviceList: []\r\n    }\r\n  },\r\n  async mounted () {\r\n    await this.getDevices()\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getFields: 'field/getFields',\r\n      getCvtgate: 'cvtgate/getCvtgate',\r\n      getDeviceList: 'device/getDevices'\r\n    })\r\n  },\r\n  methods: {\r\n    getCheckNode () {\r\n      const device = this.$refs.tree.getCheckedNodes()\r\n      return this._.cloneDeep(device)\r\n    },\r\n    async deviceSave (item, isNutrientSupply) {\r\n      let modifyList = []\r\n      if (isNutrientSupply) {\r\n        if (item.spec.Class === 'nutrient-supply') {\r\n          let place = []\r\n          for (const device of this.showNode.children) {\r\n            if (device.spec.Class === 'nutrient-supply') {\r\n              place = device.place\r\n              break\r\n            }\r\n          }\r\n\r\n          for (const device of this.showNode.children) {\r\n            device.place = place\r\n            modifyList.push(device)\r\n          }\r\n        } else {\r\n          modifyList.push(item)\r\n        }\r\n      } else {\r\n        modifyList.push(item)\r\n      }\r\n\r\n      try {\r\n        await this.axios.put('device', modifyList)\r\n        this.$notify({\r\n          title: '성공',\r\n          message: '장비 정보를 수정 하였습니다.',\r\n          type: 'success'\r\n        })\r\n        this.$store.dispatch('device/fetchDataDevice')\r\n        item.visible = false\r\n      } catch (error) {\r\n        this.$notify({\r\n          title: '실패',\r\n          message: '장비 정보 수정 실패 하였습니다.',\r\n          type: 'error'\r\n        })\r\n      }\r\n    },\r\n    async getDevices (isSelect) {\r\n      try {\r\n        const { data } = await this.axios.get('device')\r\n\r\n        let couple = {}\r\n\r\n        data.map(device => {\r\n          let hasCouple = couple.hasOwnProperty(device.coupleid)\r\n          if (!hasCouple) {\r\n            couple[device.coupleid] = {}\r\n          }\r\n          let hasGate = couple[device.coupleid].hasOwnProperty(device.gateid)\r\n          if (!hasGate) {\r\n            couple[device.coupleid][device.gateid] = {}\r\n          }\r\n          let hasNode = couple[device.coupleid][device.gateid].hasOwnProperty(\r\n            device.nodeid\r\n          )\r\n          if (!hasNode) {\r\n            couple[device.coupleid][device.gateid][device.nodeid] = {}\r\n          }\r\n          if (device.devindex !== null) {\r\n            couple[device.coupleid][device.gateid][device.nodeid].children.push(\r\n              device\r\n            )\r\n          } else {\r\n            couple[device.coupleid][device.gateid][device.nodeid] = {\r\n              ...device,\r\n              children: []\r\n            }\r\n          }\r\n        })\r\n\r\n        const temp = Object.keys(couple).map(coupleKey => {\r\n          let tempCouple = {\r\n            id: coupleKey,\r\n            children: []\r\n          }\r\n          Object.keys(couple[coupleKey]).map(gateKey => {\r\n            let tempNode = Object.keys(couple[coupleKey][gateKey]).map(\r\n              nodeKey => {\r\n                return couple[coupleKey][gateKey][nodeKey]\r\n              }\r\n            )\r\n            tempCouple.children.push(...tempNode)\r\n          })\r\n          return tempCouple\r\n        })\r\n\r\n        this.nodeList = temp\r\n\r\n        if (this.showNode !== undefined && isSelect) {\r\n          for (const node of this.nodeList) {\r\n            if (node.id === this.showNode.coupleid) {\r\n              for (const children of node.children) {\r\n                if (children.nid === this.showNode.nid) {\r\n                  this.showNode = children\r\n                  for (const node of this.showNode.children) {\r\n                    this.$set(node, 'visible', false)\r\n                  }\r\n                  break\r\n                }\r\n              }\r\n              break\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    },\r\n    getField (id) {\r\n      for (const field of this.getFields) {\r\n        if (field.id === id) return field\r\n      }\r\n    },\r\n    selectNode (data, node) {\r\n      if (node.level > 2) {\r\n        this.showNode = node.parent.data\r\n      } else {\r\n        this.showNode = data\r\n      }\r\n      for (const node of this.showNode.children) {\r\n        this.$set(node, 'visible', false)\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style  scoped>\r\n.vertical-panes {\r\n  margin: 0px;\r\n  width: 100%;\r\n  /* min-height: 400px; */\r\n  height: 95%;\r\n  border: 1px solid #ccc;\r\n}\r\n.vertical-panes > .pane {\r\n  text-align: left;\r\n  padding: 15px;\r\n  overflow: auto;\r\n  background: #eee;\r\n}\r\n.vertical-panes > .pane ~ .pane {\r\n  border-left: 1px solid #ccc;\r\n}\r\n\r\n.custom-tree-node {\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  font-size: 14px;\r\n  padding-right: 20px;\r\n}\r\n\r\ndiv >>> .el-checkbox {\r\n  margin-bottom: 0px;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components"}]}