{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/views/app/page/monitor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/views/app/page/monitor.vue","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport MonitorChart from '@/components/MonitorChart'\r\nimport { addDays, isBefore, differenceInSeconds } from 'date-fns'\r\nimport { mapGetters } from 'vuex'\r\nimport downloadjs from 'downloadjs'\r\nconst iconv = require('iconv-lite')\r\n\r\nexport default {\r\n  components: {\r\n    MonitorChart\r\n  },\r\n  watch: {\r\n    'searchOne.field' (newValue, oldValue) {\r\n      this.$set(this.searchOne, 'data', [])\r\n    },\r\n    'searchTwo.field' (newValue, oldValue) {\r\n      this.$set(this.searchTwo, 'data', [])\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      activeName: '1',\r\n      searchOne: {\r\n        field: '',\r\n        date: [],\r\n        data: []\r\n      },\r\n      searchTwo: {\r\n        field: '',\r\n        date: [],\r\n        data: []\r\n      },\r\n      xAxisData: {\r\n        min: '',\r\n        max: ''\r\n      },\r\n      chartData: []\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getFields: 'field/getFields',\r\n      getAllFieldDevices: 'device/getAllFieldDevices',\r\n      getDataIndexList: 'dataIndex/getDataIndexList'\r\n    }),\r\n\r\n    fieldData () {\r\n      let dataItems = {}\r\n      for (const key in this.getAllFieldDevices) {\r\n        if (this.getAllFieldDevices.hasOwnProperty(key)) {\r\n          dataItems[key] = []\r\n          const devics = this.getAllFieldDevices[key]\r\n          for (const device of devics) {\r\n            for (const data of device.datas) {\r\n              dataItems[key].push({\r\n                id: data.id,\r\n                name:\r\n                  (device.name ? device.name : device.spec.Name) +\r\n                  ' ' +\r\n                  data.name,\r\n                sigdigit: data.sigdigit\r\n              })\r\n            }\r\n          }\r\n\r\n          for (const dataIndex of this.getDataIndexList) {\r\n          // eslint-disable-next-line eqeqeq\r\n            if (dataIndex.field_id == key &&\r\n            dataIndex.id > 30000000 &&\r\n            String(dataIndex.id).lastIndexOf('0') !==\r\n              String(dataIndex.id).length - 1\r\n            ) {\r\n              dataItems[key].push({\r\n                id: dataIndex.id,\r\n                name: dataIndex.name,\r\n                sigdigit: dataIndex.sigdigit\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return dataItems\r\n    }\r\n  },\r\n  mounted () {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    init () {\r\n      var today = new Date()\r\n      let date = new Date(\r\n        today.getFullYear(),\r\n        today.getMonth(),\r\n        today.getDate(),\r\n        0,\r\n        0,\r\n        0\r\n      )\r\n\r\n      this.searchOne.date.push(this.$date().format(date))\r\n      this.searchOne.date.push(this.$date().format(date))\r\n      this.searchTwo.date.push(this.$date().format(date))\r\n      this.searchTwo.date.push(this.$date().format(date))\r\n\r\n      this.xAxisData.min = this.searchOne.date[0]\r\n      this.xAxisData.max = addDays(this.searchOne.date[1], 1)\r\n    },\r\n    async getGraph (date, searchItems) {\r\n      const { data } = await this.axios.put('farm/graph', {\r\n        device_id: searchItems.map(Number),\r\n        startdate: this.$date().format(date[0], 'YYYY-MM-DD'),\r\n        enddate: this.$date().format(addDays(date[1], 1), 'YYYY-MM-DD')\r\n      })\r\n      return data.data\r\n    },\r\n    async searchDownload (date, searchItems) {\r\n      let temp = await this.axios.put('/farm/graph/download', {\r\n        device_id: searchItems.map(Number),\r\n        startdate: this.$date().format(date[0], 'YYYY-MM-DD'),\r\n        enddate: this.$date().format(addDays(date[1], 1), 'YYYY-MM-DD')\r\n      })\r\n\r\n      if (temp) {\r\n        if (temp.status === 200) {\r\n          let disposition = temp.headers['content-disposition']\r\n          if (disposition && disposition.indexOf('attachment') !== -1) {\r\n            var filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/\r\n            var matches = filenameRegex.exec(disposition)\r\n            if (matches != null && matches[1]) {\r\n              const filename = matches[1].replace(/['\"]/g, '')\r\n              downloadjs(\r\n                iconv.encode(temp.data, 'utf8', { addBOM: true }).toString(),\r\n                filename,\r\n                'text/csv'\r\n              )\r\n              console.log(temp.data)\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n      }\r\n    },\r\n    async search (isDown) {\r\n      this.chartData = []\r\n\r\n      let chartOneData = []\r\n      let chartTwoData = []\r\n\r\n      let isOneData = false\r\n      let isTwoData = false\r\n\r\n      if (this.searchOne.field !== '' && this.searchOne.data.length > 0) {\r\n        const data = await this.getGraph(\r\n          this.searchOne.date,\r\n          this.searchOne.data\r\n        )\r\n\r\n        if (isDown) {\r\n          await this.searchDownload(this.searchOne.date, this.searchOne.data)\r\n        }\r\n\r\n        for (const element of data) {\r\n          const field = this.getFields.find(field => {\r\n            return field.id === this.searchOne.field\r\n          })\r\n\r\n          element.name = field.name + '_'\r\n          for (const item of this.fieldData[this.searchOne.field]) {\r\n            if (item.id === element.id) {\r\n              element.name += item.name\r\n              element.sigdigit = item.sigdigit\r\n              break\r\n            }\r\n          }\r\n          // chartOneData = element\r\n          chartOneData.push(element)\r\n\r\n          if (element.data.length > 0) {\r\n            isOneData = true\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.searchTwo.field !== '' && this.searchTwo.data.length > 0) {\r\n        const data = await this.getGraph(\r\n          this.searchTwo.date,\r\n          this.searchTwo.data\r\n        )\r\n\r\n        if (isDown) {\r\n          await this.searchDownload(this.searchTwo.date, this.searchTwo.data)\r\n        }\r\n\r\n        for (const element of data) {\r\n          const field = this.getFields.find(field => {\r\n            return field.id === this.searchTwo.field\r\n          })\r\n\r\n          element.name = field.name + '_'\r\n          for (const item of this.fieldData[this.searchTwo.field]) {\r\n            if (item.id === element.id) {\r\n              element.name += item.name\r\n              element.sigdigit = item.sigdigit\r\n              break\r\n            }\r\n          }\r\n          chartTwoData.push(element)\r\n\r\n          if (element.data.length > 0) {\r\n            isTwoData = true\r\n          }\r\n        }\r\n      }\r\n\r\n      if (isTwoData) {\r\n        if (isOneData && isBefore(this.searchTwo.date[0], this.searchOne.date[0])) {\r\n          const second = differenceInSeconds(\r\n            this.searchOne.date[0],\r\n            this.searchTwo.date[0]\r\n          )\r\n\r\n          chartOneData.forEach(element => {\r\n            element.data.forEach(element => {\r\n              element.time = second + Number(element.time)\r\n            })\r\n          })\r\n        }\r\n        this.chartData = this.chartData.concat(chartTwoData)\r\n      }\r\n\r\n      if (isOneData) {\r\n        if (isTwoData && isBefore(this.searchOne.date[0], this.searchTwo.date[0])) {\r\n          const second = differenceInSeconds(\r\n            this.searchTwo.date[0],\r\n            this.searchOne.date[0]\r\n          )\r\n          chartTwoData.forEach(element => {\r\n            element.data.forEach(element => {\r\n              element.time = second + Number(element.time)\r\n            })\r\n          })\r\n        }\r\n        this.chartData = this.chartData.concat(chartOneData)\r\n      }\r\n\r\n      if (isOneData && isTwoData) {\r\n        if (isBefore(this.searchOne.date[0], this.searchTwo.date[0])) {\r\n          this.xAxisData.min = this.searchOne.date[0]\r\n        } else {\r\n          this.xAxisData.min = this.searchTwo.date[0]\r\n        }\r\n        if (isBefore(this.searchOne.date[1], this.searchTwo.date[1])) {\r\n          this.xAxisData.max = addDays(this.searchTwo.date[1], 1)\r\n        } else {\r\n          this.xAxisData.max = addDays(this.searchOne.date[1], 1)\r\n        }\r\n      } else if (isOneData) {\r\n        this.xAxisData.min = this.searchOne.date[0]\r\n        this.xAxisData.max = addDays(this.searchOne.date[1], 1)\r\n      } else if (isTwoData) {\r\n        this.xAxisData.min = this.searchTwo.date[0]\r\n        this.xAxisData.max = addDays(this.searchTwo.date[1], 1)\r\n      }\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["monitor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"monitor.vue","sourceRoot":"src/views/app/page","sourcesContent":["<template>\r\n  <div class=\"col-xxs-12 mx-auto my-auto\" style=\"padding:15px\">\r\n    <h4 class=\"c-grey-900 mB-30\">데이터 조회</h4>\r\n\r\n    <b-row class=\"mb-2\">\r\n      <b-col xs=\"12\" lg=\"6\">\r\n        <b-card-body class=\"p-0\">\r\n          <el-collapse v-model=\"activeName\">\r\n            <el-collapse-item title=\"검색 조건\" name=\"1\">\r\n              <el-form label-position=\"left\" label-width=\"100px\">\r\n                <el-form-item label=\"온실\">\r\n                  <el-select v-model=\"searchOne.field\" placeholder=\"Select\">\r\n                    <el-option\r\n                      v-for=\"item in getFields\"\r\n                      :key=\"item.id\"\r\n                      :label=\"item.name\"\r\n                      :value=\"item.id\"\r\n                    ></el-option>\r\n                  </el-select>\r\n                </el-form-item>\r\n                <el-form-item label=\"기간\">\r\n                  <el-date-picker\r\n                    v-model=\"searchOne.date\"\r\n                    type=\"daterange\"\r\n                    range-separator=\"~\"\r\n                    start-placeholder=\"시작일\"\r\n                    end-placeholder=\"종료일\"\r\n                  ></el-date-picker>\r\n                </el-form-item>\r\n                <el-form-item label=\"데이터\">\r\n                  <el-select v-model=\"searchOne.data\" multiple placeholder=\"Select\">\r\n                    <el-option\r\n                      v-for=\"item in fieldData[searchOne.field]\"\r\n                      :key=\"item.id\"\r\n                      :label=\"item.name\"\r\n                      :value=\"item.id\"\r\n                    ></el-option>\r\n                  </el-select>\r\n                </el-form-item>\r\n              </el-form>\r\n            </el-collapse-item>\r\n          </el-collapse>\r\n        </b-card-body>\r\n      </b-col>\r\n      <b-col xs=\"12\" lg=\"6\">\r\n        <b-card-body class=\"p-0\">\r\n          <el-collapse v-model=\"activeName\">\r\n            <el-collapse-item title=\"비교 조건\" name=\"1\">\r\n              <el-form label-position=\"left\" label-width=\"100px\">\r\n                <el-form-item label=\"온실\">\r\n                  <el-select v-model=\"searchTwo.field\" placeholder=\"Select\">\r\n                    <el-option\r\n                      v-for=\"item in getFields\"\r\n                      :key=\"item.id\"\r\n                      :label=\"item.name\"\r\n                      :value=\"item.id\"\r\n                    ></el-option>\r\n                  </el-select>\r\n                </el-form-item>\r\n                <el-form-item label=\"기간\">\r\n                  <el-date-picker\r\n                    v-model=\"searchTwo.date\"\r\n                    type=\"daterange\"\r\n                    range-separator=\"~\"\r\n                    start-placeholder=\"시작일\"\r\n                    end-placeholder=\"종료일\"\r\n                  ></el-date-picker>\r\n                </el-form-item>\r\n                <el-form-item label=\"데이터\">\r\n                  <el-select v-model=\"searchTwo.data\" multiple placeholder=\"Select\">\r\n                    <el-option\r\n                      v-for=\"item in fieldData[searchTwo.field]\"\r\n                      :key=\"item.id\"\r\n                      :label=\"item.name\"\r\n                      :value=\"item.id\"\r\n                    ></el-option>\r\n                  </el-select>\r\n                </el-form-item>\r\n              </el-form>\r\n            </el-collapse-item>\r\n          </el-collapse>\r\n        </b-card-body>\r\n      </b-col>\r\n    </b-row>\r\n    <b-row>\r\n      <b-col lg=\"6\">\r\n        <el-button\r\n          class=\"w-100 mt-1 mb-4\"\r\n          icon=\"el-icon-search\"\r\n          @click=\"search(false)\"\r\n          type=\"primary\"\r\n          plain\r\n        >조회</el-button>\r\n      </b-col>\r\n      <b-col lg=\"6\">\r\n        <el-button\r\n          class=\"w-100 mt-1 mb-4\"\r\n          icon=\"el-icon-search\"\r\n          @click=\"search(true)\"\r\n          type=\"success\"\r\n          plain\r\n        >다운로드</el-button>\r\n      </b-col>\r\n    </b-row>\r\n    <b-row class=\"h-100\">\r\n      <b-col lg=\"12\" class=\"h-100\">\r\n        <b-card no-body class=\"h-100\" header=\"차트\">\r\n          <b-card-body ref=\"chartBody\" class=\"h-100\">\r\n            <MonitorChart id=\"load\" :graph-data=\"chartData\" :x-axis-data=\"xAxisData\" />\r\n          </b-card-body>\r\n        </b-card>\r\n      </b-col>\r\n    </b-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MonitorChart from '@/components/MonitorChart'\r\nimport { addDays, isBefore, differenceInSeconds } from 'date-fns'\r\nimport { mapGetters } from 'vuex'\r\nimport downloadjs from 'downloadjs'\r\nconst iconv = require('iconv-lite')\r\n\r\nexport default {\r\n  components: {\r\n    MonitorChart\r\n  },\r\n  watch: {\r\n    'searchOne.field' (newValue, oldValue) {\r\n      this.$set(this.searchOne, 'data', [])\r\n    },\r\n    'searchTwo.field' (newValue, oldValue) {\r\n      this.$set(this.searchTwo, 'data', [])\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      activeName: '1',\r\n      searchOne: {\r\n        field: '',\r\n        date: [],\r\n        data: []\r\n      },\r\n      searchTwo: {\r\n        field: '',\r\n        date: [],\r\n        data: []\r\n      },\r\n      xAxisData: {\r\n        min: '',\r\n        max: ''\r\n      },\r\n      chartData: []\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getFields: 'field/getFields',\r\n      getAllFieldDevices: 'device/getAllFieldDevices',\r\n      getDataIndexList: 'dataIndex/getDataIndexList'\r\n    }),\r\n\r\n    fieldData () {\r\n      let dataItems = {}\r\n      for (const key in this.getAllFieldDevices) {\r\n        if (this.getAllFieldDevices.hasOwnProperty(key)) {\r\n          dataItems[key] = []\r\n          const devics = this.getAllFieldDevices[key]\r\n          for (const device of devics) {\r\n            for (const data of device.datas) {\r\n              dataItems[key].push({\r\n                id: data.id,\r\n                name:\r\n                  (device.name ? device.name : device.spec.Name) +\r\n                  ' ' +\r\n                  data.name,\r\n                sigdigit: data.sigdigit\r\n              })\r\n            }\r\n          }\r\n\r\n          for (const dataIndex of this.getDataIndexList) {\r\n          // eslint-disable-next-line eqeqeq\r\n            if (dataIndex.field_id == key &&\r\n            dataIndex.id > 30000000 &&\r\n            String(dataIndex.id).lastIndexOf('0') !==\r\n              String(dataIndex.id).length - 1\r\n            ) {\r\n              dataItems[key].push({\r\n                id: dataIndex.id,\r\n                name: dataIndex.name,\r\n                sigdigit: dataIndex.sigdigit\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return dataItems\r\n    }\r\n  },\r\n  mounted () {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    init () {\r\n      var today = new Date()\r\n      let date = new Date(\r\n        today.getFullYear(),\r\n        today.getMonth(),\r\n        today.getDate(),\r\n        0,\r\n        0,\r\n        0\r\n      )\r\n\r\n      this.searchOne.date.push(this.$date().format(date))\r\n      this.searchOne.date.push(this.$date().format(date))\r\n      this.searchTwo.date.push(this.$date().format(date))\r\n      this.searchTwo.date.push(this.$date().format(date))\r\n\r\n      this.xAxisData.min = this.searchOne.date[0]\r\n      this.xAxisData.max = addDays(this.searchOne.date[1], 1)\r\n    },\r\n    async getGraph (date, searchItems) {\r\n      const { data } = await this.axios.put('farm/graph', {\r\n        device_id: searchItems.map(Number),\r\n        startdate: this.$date().format(date[0], 'YYYY-MM-DD'),\r\n        enddate: this.$date().format(addDays(date[1], 1), 'YYYY-MM-DD')\r\n      })\r\n      return data.data\r\n    },\r\n    async searchDownload (date, searchItems) {\r\n      let temp = await this.axios.put('/farm/graph/download', {\r\n        device_id: searchItems.map(Number),\r\n        startdate: this.$date().format(date[0], 'YYYY-MM-DD'),\r\n        enddate: this.$date().format(addDays(date[1], 1), 'YYYY-MM-DD')\r\n      })\r\n\r\n      if (temp) {\r\n        if (temp.status === 200) {\r\n          let disposition = temp.headers['content-disposition']\r\n          if (disposition && disposition.indexOf('attachment') !== -1) {\r\n            var filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/\r\n            var matches = filenameRegex.exec(disposition)\r\n            if (matches != null && matches[1]) {\r\n              const filename = matches[1].replace(/['\"]/g, '')\r\n              downloadjs(\r\n                iconv.encode(temp.data, 'utf8', { addBOM: true }).toString(),\r\n                filename,\r\n                'text/csv'\r\n              )\r\n              console.log(temp.data)\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n      }\r\n    },\r\n    async search (isDown) {\r\n      this.chartData = []\r\n\r\n      let chartOneData = []\r\n      let chartTwoData = []\r\n\r\n      let isOneData = false\r\n      let isTwoData = false\r\n\r\n      if (this.searchOne.field !== '' && this.searchOne.data.length > 0) {\r\n        const data = await this.getGraph(\r\n          this.searchOne.date,\r\n          this.searchOne.data\r\n        )\r\n\r\n        if (isDown) {\r\n          await this.searchDownload(this.searchOne.date, this.searchOne.data)\r\n        }\r\n\r\n        for (const element of data) {\r\n          const field = this.getFields.find(field => {\r\n            return field.id === this.searchOne.field\r\n          })\r\n\r\n          element.name = field.name + '_'\r\n          for (const item of this.fieldData[this.searchOne.field]) {\r\n            if (item.id === element.id) {\r\n              element.name += item.name\r\n              element.sigdigit = item.sigdigit\r\n              break\r\n            }\r\n          }\r\n          // chartOneData = element\r\n          chartOneData.push(element)\r\n\r\n          if (element.data.length > 0) {\r\n            isOneData = true\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.searchTwo.field !== '' && this.searchTwo.data.length > 0) {\r\n        const data = await this.getGraph(\r\n          this.searchTwo.date,\r\n          this.searchTwo.data\r\n        )\r\n\r\n        if (isDown) {\r\n          await this.searchDownload(this.searchTwo.date, this.searchTwo.data)\r\n        }\r\n\r\n        for (const element of data) {\r\n          const field = this.getFields.find(field => {\r\n            return field.id === this.searchTwo.field\r\n          })\r\n\r\n          element.name = field.name + '_'\r\n          for (const item of this.fieldData[this.searchTwo.field]) {\r\n            if (item.id === element.id) {\r\n              element.name += item.name\r\n              element.sigdigit = item.sigdigit\r\n              break\r\n            }\r\n          }\r\n          chartTwoData.push(element)\r\n\r\n          if (element.data.length > 0) {\r\n            isTwoData = true\r\n          }\r\n        }\r\n      }\r\n\r\n      if (isTwoData) {\r\n        if (isOneData && isBefore(this.searchTwo.date[0], this.searchOne.date[0])) {\r\n          const second = differenceInSeconds(\r\n            this.searchOne.date[0],\r\n            this.searchTwo.date[0]\r\n          )\r\n\r\n          chartOneData.forEach(element => {\r\n            element.data.forEach(element => {\r\n              element.time = second + Number(element.time)\r\n            })\r\n          })\r\n        }\r\n        this.chartData = this.chartData.concat(chartTwoData)\r\n      }\r\n\r\n      if (isOneData) {\r\n        if (isTwoData && isBefore(this.searchOne.date[0], this.searchTwo.date[0])) {\r\n          const second = differenceInSeconds(\r\n            this.searchTwo.date[0],\r\n            this.searchOne.date[0]\r\n          )\r\n          chartTwoData.forEach(element => {\r\n            element.data.forEach(element => {\r\n              element.time = second + Number(element.time)\r\n            })\r\n          })\r\n        }\r\n        this.chartData = this.chartData.concat(chartOneData)\r\n      }\r\n\r\n      if (isOneData && isTwoData) {\r\n        if (isBefore(this.searchOne.date[0], this.searchTwo.date[0])) {\r\n          this.xAxisData.min = this.searchOne.date[0]\r\n        } else {\r\n          this.xAxisData.min = this.searchTwo.date[0]\r\n        }\r\n        if (isBefore(this.searchOne.date[1], this.searchTwo.date[1])) {\r\n          this.xAxisData.max = addDays(this.searchTwo.date[1], 1)\r\n        } else {\r\n          this.xAxisData.max = addDays(this.searchOne.date[1], 1)\r\n        }\r\n      } else if (isOneData) {\r\n        this.xAxisData.min = this.searchOne.date[0]\r\n        this.xAxisData.max = addDays(this.searchOne.date[1], 1)\r\n      } else if (isTwoData) {\r\n        this.xAxisData.min = this.searchTwo.date[0]\r\n        this.xAxisData.max = addDays(this.searchTwo.date[1], 1)\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\ndiv >>> .el-collapse-item__header,\r\ndiv >>> .el-collapse-item__content {\r\n  padding: 20px;\r\n}\r\n\r\n.el-collapse {\r\n  border-left: 1px solid #ebeef5;\r\n  border-right: 1px solid #ebeef5;\r\n}\r\n\r\n.el-date-editor,\r\n.el-select {\r\n  width: 100%;\r\n}\r\n</style>\r\n"]}]}