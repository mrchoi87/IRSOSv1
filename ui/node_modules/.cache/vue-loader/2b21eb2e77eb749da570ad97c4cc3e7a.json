{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/components/JsonEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/components/JsonEditor.vue","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nimport JSONEditor from 'jsoneditor/dist/jsoneditor.js'\nimport 'jsoneditor/dist/jsoneditor.min.css'\nimport _ from 'lodash'\n\nexport default {\n  name: 'JsonEditor',\n  data () {\n    return {\n      editor: null\n    }\n  },\n  props: {\n    type: {\n      required: false,\n      type: String,\n      default: () => {\n        return ''\n      }\n    },\n    json: {\n      required: true,\n      type: [Object, Array],\n      default: () => {\n        return {}\n      }\n    },\n    options: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    },\n    onChangeState: {\n      type: Function\n    },\n    onChange: {\n      type: Function\n    }\n  },\n  watch: {\n    json: {\n      handler (newJson) {\n        if (this.editor) {\n          this.editor.set(newJson)\n        }\n      },\n      deep: true\n    }\n  },\n  methods: {\n    _onChange (e) {\n      if (this.onChangeState && this.editor) {\n        this.onChangeState(true, this.type)\n      }\n    },\n    editorJsonGet () {\n      try {\n        this.onChange(true, this.editor.get())\n      } catch (error) {\n        this.onChange(false)\n      }\n    },\n    editorJsonRetrun () {\n      return this.editor.get()\n    }\n  },\n  mounted () {\n    const container = this.$refs.jsoneditor\n    const options = _.extend({\n      onChange: this._onChange\n    }, this.options)\n    this.editor = new JSONEditor(container, options)\n    this.editor.set(this.json)\n    this.editor.aceEditor.setOptions({ maxLines: Infinity })\n  },\n  beforeDestroy () {\n    if (this.editor) {\n      this.editor.destroy()\n      this.editor = null\n    }\n  }\n}\n",{"version":3,"sources":["JsonEditor.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"JsonEditor.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div\n    id=\"jsoneditor\"\n    ref=\"jsoneditor\"\n  />\n</template>\n\n<script>\nimport JSONEditor from 'jsoneditor/dist/jsoneditor.js'\nimport 'jsoneditor/dist/jsoneditor.min.css'\nimport _ from 'lodash'\n\nexport default {\n  name: 'JsonEditor',\n  data () {\n    return {\n      editor: null\n    }\n  },\n  props: {\n    type: {\n      required: false,\n      type: String,\n      default: () => {\n        return ''\n      }\n    },\n    json: {\n      required: true,\n      type: [Object, Array],\n      default: () => {\n        return {}\n      }\n    },\n    options: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    },\n    onChangeState: {\n      type: Function\n    },\n    onChange: {\n      type: Function\n    }\n  },\n  watch: {\n    json: {\n      handler (newJson) {\n        if (this.editor) {\n          this.editor.set(newJson)\n        }\n      },\n      deep: true\n    }\n  },\n  methods: {\n    _onChange (e) {\n      if (this.onChangeState && this.editor) {\n        this.onChangeState(true, this.type)\n      }\n    },\n    editorJsonGet () {\n      try {\n        this.onChange(true, this.editor.get())\n      } catch (error) {\n        this.onChange(false)\n      }\n    },\n    editorJsonRetrun () {\n      return this.editor.get()\n    }\n  },\n  mounted () {\n    const container = this.$refs.jsoneditor\n    const options = _.extend({\n      onChange: this._onChange\n    }, this.options)\n    this.editor = new JSONEditor(container, options)\n    this.editor.set(this.json)\n    this.editor.aceEditor.setOptions({ maxLines: Infinity })\n  },\n  beforeDestroy () {\n    if (this.editor) {\n      this.editor.destroy()\n      this.editor = null\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n"]}]}