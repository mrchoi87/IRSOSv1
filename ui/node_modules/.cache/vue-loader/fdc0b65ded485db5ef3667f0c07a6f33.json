{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/node_modules/vue-daum-map/src/VueDaumMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-daum-map/src/VueDaumMap.vue","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport loadScriptOnce from 'load-script-once';\n\nconst MapTypeId = {\n  \"ROADMAP\": 1,\n  \"NORMAL\": 1,\n  \"SKYVIEW\": 2,\n  \"HYBRID\": 3,\n  \"OVERLAY\": 4,\n  \"ROADVIEW\": 5,\n  \"TRAFFIC\": 6,\n  \"TERRAIN\": 7,\n  \"BICYCLE\": 8,\n  \"BICYCLE_HYBRID\": 9,\n  \"USE_DISTRICT\": 10\n};\n\nconst EVENTS = [\n  'center_changed',\n  'zoom_start',\n  'zoom_changed',\n  'bounds_changed',\n  'click',\n  'dblclick',\n  'rightclick',\n  'mousemove',\n  'dragstart',\n  'drag',\n  'dragend',\n  'idle',\n  'tilesloaded',\n  'maptypeid_changed'\n];\n\nexport default {\n  name: \"VueDaumMap\",\n  props: {\n    appKey: {\n      type: String,\n      required: true\n    },\n    libraries: {\n      type: Array,\n      default: () => []\n    },\n    center: {\n      type: Object,\n      required: true\n    },\n    level: {\n      type: Number,\n      default: undefined\n    },\n    mapTypeId: {\n      type: Number,\n      default: undefined\n    },\n    draggable: {\n      type: Boolean,\n      default: undefined\n    },\n    scrollwheel: {\n      type: Boolean,\n      default: undefined\n    },\n    disableDoubleClick: {\n      type: Boolean,\n      default: undefined\n    },\n    disableDoubleClickZoom: {\n      type: Boolean,\n      default: undefined\n    },\n    projectionId: {\n      type: String,\n      default: undefined\n    },\n    tileAnimation: {\n      type: Boolean,\n      default: undefined\n    },\n    keyboardShortcuts: {\n      type: [Boolean, Object],\n      default: undefined\n    }\n  },\n  data: () => ({\n    map: null\n  }),\n  mounted () {\n    loadScriptOnce(`//dapi.kakao.com/v2/maps/sdk.js?autoload=false&appkey=${this.appKey}&libraries=${this.libraries.join(',')}`)\n      .then(() => {\n        daum.maps.load(() => {\n          this.render();\n          this.bindEvents();\n          this.$emit('load', this.map);\n        });\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  },\n  watch: {\n    level () {\n      if (!this.map) {\n        return;\n      }\n\n      this.map.setLevel(this.level);\n    },\n    center : {\n      handler () {\n        if (!this.map) {\n          return;\n        }\n\n        this.map.setCenter(new daum.maps.LatLng(this.center.lat, this.center.lng));\n      },\n      deep: true\n    }\n  },\n  methods: {\n    render () {\n      const options = { //지도를 생성할 때 필요한 기본 옵션\n        center: new daum.maps.LatLng(this.center.lat, this.center.lng), //지도의 중심좌표.\n        level: this.level, //지도의 레벨(확대, 축소 정도)\n        mapTypeId: this.mapTypeId, //지도 타입\n        draggable: this.draggable,\n        scrollwheel: this.scrollwheel,\n        disableDoubleClick: this.disableDoubleClick,\n        disableDoubleClickZoom: this.disableDoubleClickZoom,\n        projectionId: this.projectionId,\n        tileAnimation: this.tileAnimation,\n        keyboardShortcuts: this.keyboardShortcuts\n      };\n\n      this.map = new daum.maps.Map(this.$el, options); //지도 생성 및 객체 리턴\n    },\n    bindEvents () {\n      const handlers = {\n        bounds_changed: this.onChange,\n        idle: this.onChange\n      };\n\n      for (let event of EVENTS) {\n        this.bindEvent(event, handlers[event]);\n      }\n    },\n    bindEvent (event, handler) {\n      daum.maps.event.addListener(this.map, event, (...args) => {\n        this.$emit(event, args);\n\n        if (typeof handler === 'function') {\n          handler();\n        }\n      });\n    },\n    onChange () {\n      const level = this.map.getLevel();\n      const latlng = this.map.getCenter();\n\n      this.$emit('update:level', level);\n      this.$emit('update:center', {\n        lat: latlng.getLat(),\n        lng: latlng.getLng()\n      });\n    }\n  },\n  MapTypeId: MapTypeId\n}\n",{"version":3,"sources":["VueDaumMap.vue"],"names":[],"mappings":";;;;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VueDaumMap.vue","sourceRoot":"node_modules/vue-daum-map/src","sourcesContent":["<template>\n  <div></div>\n</template>\n\n<script>\n  import loadScriptOnce from 'load-script-once';\n\n  const MapTypeId = {\n    \"ROADMAP\": 1,\n    \"NORMAL\": 1,\n    \"SKYVIEW\": 2,\n    \"HYBRID\": 3,\n    \"OVERLAY\": 4,\n    \"ROADVIEW\": 5,\n    \"TRAFFIC\": 6,\n    \"TERRAIN\": 7,\n    \"BICYCLE\": 8,\n    \"BICYCLE_HYBRID\": 9,\n    \"USE_DISTRICT\": 10\n  };\n\n  const EVENTS = [\n    'center_changed',\n    'zoom_start',\n    'zoom_changed',\n    'bounds_changed',\n    'click',\n    'dblclick',\n    'rightclick',\n    'mousemove',\n    'dragstart',\n    'drag',\n    'dragend',\n    'idle',\n    'tilesloaded',\n    'maptypeid_changed'\n  ];\n\n  export default {\n    name: \"VueDaumMap\",\n    props: {\n      appKey: {\n        type: String,\n        required: true\n      },\n      libraries: {\n        type: Array,\n        default: () => []\n      },\n      center: {\n        type: Object,\n        required: true\n      },\n      level: {\n        type: Number,\n        default: undefined\n      },\n      mapTypeId: {\n        type: Number,\n        default: undefined\n      },\n      draggable: {\n        type: Boolean,\n        default: undefined\n      },\n      scrollwheel: {\n        type: Boolean,\n        default: undefined\n      },\n      disableDoubleClick: {\n        type: Boolean,\n        default: undefined\n      },\n      disableDoubleClickZoom: {\n        type: Boolean,\n        default: undefined\n      },\n      projectionId: {\n        type: String,\n        default: undefined\n      },\n      tileAnimation: {\n        type: Boolean,\n        default: undefined\n      },\n      keyboardShortcuts: {\n        type: [Boolean, Object],\n        default: undefined\n      }\n    },\n    data: () => ({\n      map: null\n    }),\n    mounted () {\n      loadScriptOnce(`//dapi.kakao.com/v2/maps/sdk.js?autoload=false&appkey=${this.appKey}&libraries=${this.libraries.join(',')}`)\n        .then(() => {\n          daum.maps.load(() => {\n            this.render();\n            this.bindEvents();\n            this.$emit('load', this.map);\n          });\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    },\n    watch: {\n      level () {\n        if (!this.map) {\n          return;\n        }\n\n        this.map.setLevel(this.level);\n      },\n      center : {\n        handler () {\n          if (!this.map) {\n            return;\n          }\n\n          this.map.setCenter(new daum.maps.LatLng(this.center.lat, this.center.lng));\n        },\n        deep: true\n      }\n    },\n    methods: {\n      render () {\n        const options = { //지도를 생성할 때 필요한 기본 옵션\n          center: new daum.maps.LatLng(this.center.lat, this.center.lng), //지도의 중심좌표.\n          level: this.level, //지도의 레벨(확대, 축소 정도)\n          mapTypeId: this.mapTypeId, //지도 타입\n          draggable: this.draggable,\n          scrollwheel: this.scrollwheel,\n          disableDoubleClick: this.disableDoubleClick,\n          disableDoubleClickZoom: this.disableDoubleClickZoom,\n          projectionId: this.projectionId,\n          tileAnimation: this.tileAnimation,\n          keyboardShortcuts: this.keyboardShortcuts\n        };\n\n        this.map = new daum.maps.Map(this.$el, options); //지도 생성 및 객체 리턴\n      },\n      bindEvents () {\n        const handlers = {\n          bounds_changed: this.onChange,\n          idle: this.onChange\n        };\n\n        for (let event of EVENTS) {\n          this.bindEvent(event, handlers[event]);\n        }\n      },\n      bindEvent (event, handler) {\n        daum.maps.event.addListener(this.map, event, (...args) => {\n          this.$emit(event, args);\n\n          if (typeof handler === 'function') {\n            handler();\n          }\n        });\n      },\n      onChange () {\n        const level = this.map.getLevel();\n        const latlng = this.map.getCenter();\n\n        this.$emit('update:level', level);\n        this.$emit('update:center', {\n          lat: latlng.getLat(),\n          lng: latlng.getLng()\n        });\n      }\n    },\n    MapTypeId: MapTypeId\n  }\n</script>\n\n<style scoped>\n</style>"]}]}