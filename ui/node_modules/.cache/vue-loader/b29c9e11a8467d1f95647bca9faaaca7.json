{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/components/Gauge.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/components/Gauge.vue","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\r\nimport * as am4core from '@amcharts/amcharts4/core'\r\nimport * as am4charts from '@amcharts/amcharts4/charts'\r\nimport am4themesAnimated from '@amcharts/amcharts4/themes/animated'\r\n\r\nam4core.useTheme(am4themesAnimated)\r\n\r\nexport default {\r\n  props: ['value'],\r\n  data () {\r\n    return {\r\n      hand: Function\r\n    }\r\n  },\r\n  watch: {\r\n    value (newValue, oldValue) {\r\n      this.hand.showValue(this.value, 1000, am4core.ease.cubicOut)\r\n    }\r\n  },\r\n  mounted () {\r\n    let chart = am4core.create(this.$refs.chartdiv, am4charts.GaugeChart)\r\n    chart.innerRadius = am4core.percent(90)\r\n\r\n    chart.hiddenState.properties.opacity = 0\r\n\r\n    let axis = chart.xAxes.push(new am4charts.ValueAxis())\r\n    axis.min = 0\r\n    axis.max = 100\r\n    axis.strictMinMax = true\r\n    axis.renderer.inside = false\r\n    axis.renderer.radius = am4core.percent(97)\r\n    axis.renderer.line.strokeOpacity = 1\r\n    axis.renderer.line.strokeWidth = 1\r\n    axis.renderer.line.stroke = chart.colors.getIndex(0)\r\n    axis.renderer.ticks.template.disabled = false\r\n    axis.renderer.ticks.template.stroke = chart.colors.getIndex(0)\r\n    axis.renderer.ticks.template.strokeOpacity = 1\r\n    axis.renderer.grid.template.disabled = true\r\n    axis.renderer.ticks.template.length = 10\r\n    axis.hiddenState.properties.opacity = 1\r\n    axis.hiddenState.properties.visible = true\r\n    axis.setStateOnChildren = true\r\n    axis.renderer.hiddenState.properties.endAngle = 180\r\n\r\n    /**\r\n     * Axis for ranges\r\n     */\r\n\r\n    let colorSet = new am4core.ColorSet()\r\n\r\n    let axis2 = chart.xAxes.push(new am4charts.ValueAxis())\r\n    axis2.min = 0\r\n    axis2.max = 100\r\n    axis2.renderer.innerRadius = 10\r\n    axis2.strictMinMax = true\r\n    axis2.renderer.labels.template.disabled = true\r\n    axis2.renderer.ticks.template.disabled = true\r\n    axis2.renderer.grid.template.disabled = true\r\n\r\n    let range0 = axis2.axisRanges.create()\r\n    range0.value = 0\r\n    range0.endValue = 50\r\n    range0.axisFill.fillOpacity = 1\r\n    range0.axisFill.fill = colorSet.getIndex(0)\r\n\r\n    let range1 = axis2.axisRanges.create()\r\n    range1.value = 50\r\n    range1.endValue = 100\r\n    range1.axisFill.fillOpacity = 1\r\n    range1.axisFill.fill = colorSet.getIndex(8)\r\n\r\n    /**\r\n     * Label\r\n     */\r\n\r\n    var label = chart.radarContainer.createChild(am4core.Label)\r\n    label.fontSize = 20\r\n    label.horizontalCenter = 'middle'\r\n    label.verticalCenter = 'bottom'\r\n    label.padding(10, 10, 30, 10)\r\n    label.text = '%'\r\n\r\n    /**\r\n     * Hand\r\n     */\r\n    this.hand = chart.hands.push(new am4charts.ClockHand())\r\n    this.hand.fill = axis.renderer.line.stroke\r\n    this.hand.stroke = axis.renderer.line.stroke\r\n    this.hand.axis = axis2\r\n    this.hand.pin.radius = 5\r\n    this.hand.startWidth = 5\r\n\r\n    this.hand.events.on('propertychanged', function (ev) {\r\n      range0.endValue = ev.target.value\r\n      range1.value = ev.target.value\r\n      label.text = Math.floor(ev.target.value) + ' %'\r\n      axis2.invalidate()\r\n    })\r\n\r\n    this.hand.showValue(this.value, 1000, am4core.ease.cubicOut)\r\n  },\r\n\r\n  beforeDestroy () {\r\n    if (this.chart) {\r\n      this.chart.dispose()\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["Gauge.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Gauge.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div ref=\"chartdiv\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as am4core from '@amcharts/amcharts4/core'\r\nimport * as am4charts from '@amcharts/amcharts4/charts'\r\nimport am4themesAnimated from '@amcharts/amcharts4/themes/animated'\r\n\r\nam4core.useTheme(am4themesAnimated)\r\n\r\nexport default {\r\n  props: ['value'],\r\n  data () {\r\n    return {\r\n      hand: Function\r\n    }\r\n  },\r\n  watch: {\r\n    value (newValue, oldValue) {\r\n      this.hand.showValue(this.value, 1000, am4core.ease.cubicOut)\r\n    }\r\n  },\r\n  mounted () {\r\n    let chart = am4core.create(this.$refs.chartdiv, am4charts.GaugeChart)\r\n    chart.innerRadius = am4core.percent(90)\r\n\r\n    chart.hiddenState.properties.opacity = 0\r\n\r\n    let axis = chart.xAxes.push(new am4charts.ValueAxis())\r\n    axis.min = 0\r\n    axis.max = 100\r\n    axis.strictMinMax = true\r\n    axis.renderer.inside = false\r\n    axis.renderer.radius = am4core.percent(97)\r\n    axis.renderer.line.strokeOpacity = 1\r\n    axis.renderer.line.strokeWidth = 1\r\n    axis.renderer.line.stroke = chart.colors.getIndex(0)\r\n    axis.renderer.ticks.template.disabled = false\r\n    axis.renderer.ticks.template.stroke = chart.colors.getIndex(0)\r\n    axis.renderer.ticks.template.strokeOpacity = 1\r\n    axis.renderer.grid.template.disabled = true\r\n    axis.renderer.ticks.template.length = 10\r\n    axis.hiddenState.properties.opacity = 1\r\n    axis.hiddenState.properties.visible = true\r\n    axis.setStateOnChildren = true\r\n    axis.renderer.hiddenState.properties.endAngle = 180\r\n\r\n    /**\r\n     * Axis for ranges\r\n     */\r\n\r\n    let colorSet = new am4core.ColorSet()\r\n\r\n    let axis2 = chart.xAxes.push(new am4charts.ValueAxis())\r\n    axis2.min = 0\r\n    axis2.max = 100\r\n    axis2.renderer.innerRadius = 10\r\n    axis2.strictMinMax = true\r\n    axis2.renderer.labels.template.disabled = true\r\n    axis2.renderer.ticks.template.disabled = true\r\n    axis2.renderer.grid.template.disabled = true\r\n\r\n    let range0 = axis2.axisRanges.create()\r\n    range0.value = 0\r\n    range0.endValue = 50\r\n    range0.axisFill.fillOpacity = 1\r\n    range0.axisFill.fill = colorSet.getIndex(0)\r\n\r\n    let range1 = axis2.axisRanges.create()\r\n    range1.value = 50\r\n    range1.endValue = 100\r\n    range1.axisFill.fillOpacity = 1\r\n    range1.axisFill.fill = colorSet.getIndex(8)\r\n\r\n    /**\r\n     * Label\r\n     */\r\n\r\n    var label = chart.radarContainer.createChild(am4core.Label)\r\n    label.fontSize = 20\r\n    label.horizontalCenter = 'middle'\r\n    label.verticalCenter = 'bottom'\r\n    label.padding(10, 10, 30, 10)\r\n    label.text = '%'\r\n\r\n    /**\r\n     * Hand\r\n     */\r\n    this.hand = chart.hands.push(new am4charts.ClockHand())\r\n    this.hand.fill = axis.renderer.line.stroke\r\n    this.hand.stroke = axis.renderer.line.stroke\r\n    this.hand.axis = axis2\r\n    this.hand.pin.radius = 5\r\n    this.hand.startWidth = 5\r\n\r\n    this.hand.events.on('propertychanged', function (ev) {\r\n      range0.endValue = ev.target.value\r\n      range1.value = ev.target.value\r\n      label.text = Math.floor(ev.target.value) + ' %'\r\n      axis2.invalidate()\r\n    })\r\n\r\n    this.hand.showValue(this.value, 1000, am4core.ease.cubicOut)\r\n  },\r\n\r\n  beforeDestroy () {\r\n    if (this.chart) {\r\n      this.chart.dispose()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n"]}]}