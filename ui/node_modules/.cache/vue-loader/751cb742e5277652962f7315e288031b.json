{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/components/modifyDeviceTree.vue?vue&type=style&index=0&id=28c3eb67&scoped=true&lang=css&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/components/modifyDeviceTree.vue","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.vertical-panes {\r\n  margin: 0px;\r\n  width: 100%;\r\n  /* min-height: 400px; */\r\n  height: 95%;\r\n  border: 1px solid #ccc;\r\n}\r\n.vertical-panes > .pane {\r\n  text-align: left;\r\n  padding: 15px;\r\n  overflow: auto;\r\n  background: #eee;\r\n}\r\n.vertical-panes > .pane ~ .pane {\r\n  border-left: 1px solid #ccc;\r\n}\r\n\r\n.custom-tree-node {\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  font-size: 14px;\r\n  padding-right: 20px;\r\n}\r\n\r\ndiv >>> .el-checkbox {\r\n  margin-bottom: 0px;\r\n}\r\n",{"version":3,"sources":["modifyDeviceTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"modifyDeviceTree.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <div>\r\n      <multipane class=\"vertical-panes\" layout=\"vertical\">\r\n        <div\r\n          :style=\"{ width: '250px',padding:'3px', minWidth: '250px', background: '#fff' }\"\r\n          class=\"pane\"\r\n        >\r\n          <el-tree\r\n            ref=\"tree\"\r\n            :data=\"nodeList\"\r\n            show-checkbox\r\n            default-expand-all\r\n            :expand-on-click-node=\"false\"\r\n            :highlight-current=\"true\"\r\n            :accordion=\"false\"\r\n            @current-change=\"selectNode\"\r\n          >\r\n            <div class=\"custom-tree-node\" slot-scope=\"{ data,node }\">\r\n              <span\r\n                v-if=\"node.level === 1\"\r\n              >&nbsp;{{ getCvtgate.couple === data.id ? '지원 장비' :'수동 장비' }}</span>\r\n              <span v-else>&nbsp;{{ data.name }}</span>\r\n            </div>\r\n          </el-tree>\r\n        </div>\r\n        <multipane-resizer />\r\n        <div :style=\"{ flexGrow: 1 }\" class=\"pane\">\r\n          <template v-if=\"showNode && showNode.nodeid\">\r\n            <b-row>\r\n              <b-col lg=\"12\">\r\n                <b-card class=\"mb-3\" no-body>\r\n                  <b-card-body>\r\n                    <div class=\"float-left float-none-xs mb-4\">\r\n                      <div class=\"d-inline-block\">\r\n                        <h5 class=\"d-inline\">{{showNode.spec.Type}}</h5>\r\n                        <span class=\"text-muted text-small d-block\">Type</span>\r\n                      </div>\r\n                    </div>\r\n                    <table class=\"table table-borderless\" style=\"margin-bottom: 0px;\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th\r\n                            class=\"text-muted text-extra-small\"\r\n                            style=\"padding-bottom: 0px;padding-top: 0px;\"\r\n                          >CLASS</th>\r\n                          <th\r\n                            class=\"text-center text-muted text-extra-small\"\r\n                            style=\"padding-bottom: 0px;padding-top: 0px;\"\r\n                          >MODEL</th>\r\n                          <th\r\n                            class=\"text-right text-muted text-extra-small\"\r\n                            style=\"padding-bottom: 0px;padding-top: 0px;\"\r\n                          >NAME</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr>\r\n                          <td style=\"padding-top: 6px;\">\r\n                            <h5>{{showNode.spec.Class}}</h5>\r\n                          </td>\r\n                          <td class=\"text-center\" style=\"padding-top: 6px;\">\r\n                            <h5>{{showNode.spec.Model}}</h5>\r\n                          </td>\r\n                          <td class=\"text-right\" style=\"padding-top: 6px;\">\r\n                            <h5>{{showNode.spec.Name}}</h5>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                    <div\r\n                      class=\"text-muted mt-1\"\r\n                      style=\"padding-bottom: 0px;padding-top: 0px;padding-left:12px\"\r\n                    >CommSpec</div>\r\n                    <div\r\n                      v-for=\"(item,id) in showNode.spec.CommSpec\"\r\n                      :key=\"id\"\r\n                      style=\"padding-left:12px;padding-right: 0px;padding-top: 10px;padding-bottom: 0px;\"\r\n                    >\r\n                      <b-card :header=\"id\" no-body>\r\n                        <b-card-body\r\n                          style=\"padding-top: 10px;padding-right: 10px;padding-bottom: 10px;padding-left: 20px;\"\r\n                        >\r\n                          <b-list-group flush>\r\n                            <b-list-group-item\r\n                              v-for=\"(item,id) in item\"\r\n                              :key=\"id\"\r\n                              style=\"padding-left: 0px;padding-right: 0px;padding-top: 5px; padding-bottom: 10px;\"\r\n                            >\r\n                              <div>\r\n                                <div class=\"mb-2\">{{id + ' : ' + item['starting-register']}}</div>\r\n                                <b-badge\r\n                                  v-for=\"item in item.items\"\r\n                                  :key=\"item\"\r\n                                  pill\r\n                                  variant=\"outline-secondary\"\r\n                                  class=\"mb-1 mr-1\"\r\n                                >{{item}}</b-badge>\r\n                              </div>\r\n                            </b-list-group-item>\r\n                          </b-list-group>\r\n                        </b-card-body>\r\n                      </b-card>\r\n                    </div>\r\n                  </b-card-body>\r\n                </b-card>\r\n              </b-col>\r\n            </b-row>\r\n            <b-row>\r\n              <b-col lg=\"3\" v-for=\"(device,index) in showNode.children\" :key=\"index\">\r\n                <b-card no-body>\r\n                  <div class=\"position-absolute card-top-buttons\">\r\n                    <el-popover placement=\"right\" width=\"300\" v-model=\"device.visible\">\r\n                      <p>정보를 입력 하세요!</p>\r\n                      <el-input placeholder=\"이름을 입력 하세요\" class=\"mb-2\" v-model=\"device.name\">\r\n                        <template slot=\"prepend\">이름</template>\r\n                      </el-input>\r\n\r\n                      <template\r\n                        v-if=\"showNode.spec.Type === 'nutrient-supply-node'? device.spec.Class === 'nutrient-supply' ? true : false : true\"\r\n                      >\r\n                        <div class=\"mt-2 mb-1\">온실</div>\r\n                        <el-select\r\n                          v-model=\"device.place\"\r\n                          multiple\r\n                          placeholder=\"온실을 선택 하세요\"\r\n                          class=\"mb w-100\"\r\n                        >\r\n                          <el-option\r\n                            v-for=\"item in getFields\"\r\n                            :key=\"item.id\"\r\n                            :label=\"item.name\"\r\n                            :value=\"item.id\"\r\n                          ></el-option>\r\n                        </el-select>\r\n                        <div\r\n                          style=\"color:#1e90ff\"\r\n                          class=\"mt-2 mb-3\"\r\n                          v-if=\"showNode.spec.Type === 'nutrient-supply-node'\"\r\n                        >* 양액기 설치 온실 순서로 선택</div>\r\n                        <div else class=\"mb-3\"></div>\r\n                      </template>\r\n                      <el-button\r\n                        class=\"w-100\"\r\n                        @click=\"deviceSave(device,showNode.spec.Type === 'nutrient-supply-node')\"\r\n                      >저장</el-button>\r\n                      <el-button slot=\"reference\" icon=\"el-icon-edit\" circle></el-button>\r\n                    </el-popover>\r\n                  </div>\r\n                  <img\r\n                    src=\"/assets/img/sensor.svg\"\r\n                    alt=\"Detail\"\r\n                    class=\"card-img-top pl-5 pr-5\"\r\n                    :style=\"{opacity : device.deviceStatus === 'legacy' ? '0.3' : '1'}\"\r\n                  />\r\n                  <b-badge\r\n                    variant=\"primary\"\r\n                    pill\r\n                    class=\"position-absolute badge-top-left\"\r\n                  >{{`이름 : ${ device.name ? device.name : '-' }`}}</b-badge>\r\n                  <b-badge\r\n                    variant=\"secondary\"\r\n                    pill\r\n                    class=\"position-absolute badge-top-left-2\"\r\n                    v-if=\"showNode.spec.Type === 'nutrient-supply-node'? device.spec.Class === 'nutrient-supply' ? true : false : true\"\r\n                  >\r\n                    온실 : {{device.place.length == 0 ? '-' : ''}}\r\n                    <template\r\n                      v-for=\"(place,idx) in device.place\"\r\n                    >{{idx>0 ? ', ' :'' }}{{getField(place).name}}</template>\r\n                  </b-badge>\r\n                  <b-card-body\r\n                    :style=\"{background : device.deviceStatus === 'legacy' ? 'lightgray' : ''}\"\r\n                  >\r\n                    <p class=\"text-muted text-small mb-2\">Class</p>\r\n                    <p class=\"mb-3\">{{device.spec.Class}}</p>\r\n                    <p class=\"text-muted text-small mb-2\">Type</p>\r\n                    <div class=\"mb-3\">{{device.spec.Type}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Name</p>\r\n                    <div class=\"mb-3\">{{device.spec.Name ? device.spec.Name : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Model</p>\r\n                    <div class=\"mb-3\">{{device.spec.Model ? device.spec.Model : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Unit</p>\r\n                    <div class=\"mb-3\">{{device.spec.ValueUnit ? device.spec.ValueUnit : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">SignificantDigit</p>\r\n                    <div\r\n                      class=\"mb-3\"\r\n                    >{{device.spec.SignificantDigit ? device.spec.SignificantDigit : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">ValueType</p>\r\n                    <div class=\"mb-3\">{{device.spec.ValueType ? device.spec.ValueType : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Channel</p>\r\n                    <div class=\"mb-3\">{{device.spec.Channel ? device.spec.Channel : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">CommSpec</p>\r\n                    <div\r\n                      v-for=\"(item,id) in device.spec.CommSpec\"\r\n                      :key=\"id\"\r\n                      style=\"padding-left: 0px;padding-right: 0px;padding-top: 10px;padding-bottom: 0px;\"\r\n                    >\r\n                      <b-card\r\n                        :header=\"id\"\r\n                        no-body\r\n                        :style=\"{background : device.deviceStatus === 'legacy' ? 'lightgray' : ''}\"\r\n                      >\r\n                        <b-card-body\r\n                          style=\"padding-top: 10px;padding-right: 10px;padding-bottom: 10px;padding-left: 20px;\"\r\n                        >\r\n                          <b-list-group flush>\r\n                            <b-list-group-item\r\n                              v-for=\"(item,id) in item\"\r\n                              :key=\"id\"\r\n                              style=\"padding-left: 0px;padding-right: 0px;padding-top: 10px; padding-bottom: 10px;\"\r\n                              :style=\"{background : device.deviceStatus === 'legacy' ? 'lightgray' : ''}\"\r\n                            >\r\n                              <div>\r\n                                <div class=\"mb-2\">{{id + ' : ' + item['starting-register']}}</div>\r\n                                <b-badge\r\n                                  v-for=\"item in item.items\"\r\n                                  :key=\"item\"\r\n                                  pill\r\n                                  variant=\"outline-secondary\"\r\n                                  class=\"mb-1 mr-1\"\r\n                                >{{item}}</b-badge>\r\n                              </div>\r\n                            </b-list-group-item>\r\n                          </b-list-group>\r\n                        </b-card-body>\r\n                      </b-card>\r\n                    </div>\r\n                  </b-card-body>\r\n                </b-card>\r\n              </b-col>\r\n            </b-row>\r\n          </template>\r\n        </div>\r\n      </multipane>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Multipane, MultipaneResizer } from 'vue-multipane'\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  components: {\r\n    Multipane,\r\n    MultipaneResizer\r\n  },\r\n  props: ['devices'],\r\n  data: function () {\r\n    return {\r\n      showNode: undefined,\r\n      deviceSpec: {},\r\n      nodeList: [],\r\n      nodeIdDeviceList: []\r\n    }\r\n  },\r\n  async mounted () {\r\n    await this.getDevices()\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getFields: 'field/getFields',\r\n      getCvtgate: 'cvtgate/getCvtgate',\r\n      getDeviceList: 'device/getDevices'\r\n    })\r\n  },\r\n  methods: {\r\n    getCheckNode () {\r\n      const device = this.$refs.tree.getCheckedNodes()\r\n      return this._.cloneDeep(device)\r\n    },\r\n    async deviceSave (item, isNutrientSupply) {\r\n      let modifyList = []\r\n      if (isNutrientSupply) {\r\n        if (item.spec.Class === 'nutrient-supply') {\r\n          let place = []\r\n          for (const device of this.showNode.children) {\r\n            if (device.spec.Class === 'nutrient-supply') {\r\n              place = device.place\r\n              break\r\n            }\r\n          }\r\n\r\n          for (const device of this.showNode.children) {\r\n            device.place = place\r\n            modifyList.push(device)\r\n          }\r\n        } else {\r\n          modifyList.push(item)\r\n        }\r\n      } else {\r\n        modifyList.push(item)\r\n      }\r\n\r\n      try {\r\n        await this.axios.put('device', modifyList)\r\n        this.$notify({\r\n          title: '성공',\r\n          message: '장비 정보를 수정 하였습니다.',\r\n          type: 'success'\r\n        })\r\n        this.$store.dispatch('device/fetchDataDevice')\r\n        item.visible = false\r\n      } catch (error) {\r\n        this.$notify({\r\n          title: '실패',\r\n          message: '장비 정보 수정 실패 하였습니다.',\r\n          type: 'error'\r\n        })\r\n      }\r\n    },\r\n    async getDevices (isSelect) {\r\n      try {\r\n        const { data } = await this.axios.get('device')\r\n\r\n        let couple = {}\r\n\r\n        data.map(device => {\r\n          let hasCouple = couple.hasOwnProperty(device.coupleid)\r\n          if (!hasCouple) {\r\n            couple[device.coupleid] = {}\r\n          }\r\n          let hasGate = couple[device.coupleid].hasOwnProperty(device.gateid)\r\n          if (!hasGate) {\r\n            couple[device.coupleid][device.gateid] = {}\r\n          }\r\n          let hasNode = couple[device.coupleid][device.gateid].hasOwnProperty(\r\n            device.nodeid\r\n          )\r\n          if (!hasNode) {\r\n            couple[device.coupleid][device.gateid][device.nodeid] = {}\r\n          }\r\n          if (device.devindex !== null) {\r\n            couple[device.coupleid][device.gateid][device.nodeid].children.push(\r\n              device\r\n            )\r\n          } else {\r\n            couple[device.coupleid][device.gateid][device.nodeid] = {\r\n              ...device,\r\n              children: []\r\n            }\r\n          }\r\n        })\r\n\r\n        const temp = Object.keys(couple).map(coupleKey => {\r\n          let tempCouple = {\r\n            id: coupleKey,\r\n            children: []\r\n          }\r\n          Object.keys(couple[coupleKey]).map(gateKey => {\r\n            let tempNode = Object.keys(couple[coupleKey][gateKey]).map(\r\n              nodeKey => {\r\n                return couple[coupleKey][gateKey][nodeKey]\r\n              }\r\n            )\r\n            tempCouple.children.push(...tempNode)\r\n          })\r\n          return tempCouple\r\n        })\r\n\r\n        this.nodeList = temp\r\n\r\n        if (this.showNode !== undefined && isSelect) {\r\n          for (const node of this.nodeList) {\r\n            if (node.id === this.showNode.coupleid) {\r\n              for (const children of node.children) {\r\n                if (children.nid === this.showNode.nid) {\r\n                  this.showNode = children\r\n                  for (const node of this.showNode.children) {\r\n                    this.$set(node, 'visible', false)\r\n                  }\r\n                  break\r\n                }\r\n              }\r\n              break\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    },\r\n    getField (id) {\r\n      for (const field of this.getFields) {\r\n        if (field.id === id) return field\r\n      }\r\n    },\r\n    selectNode (data, node) {\r\n      if (node.level > 2) {\r\n        this.showNode = node.parent.data\r\n      } else {\r\n        this.showNode = data\r\n      }\r\n      for (const node of this.showNode.children) {\r\n        this.$set(node, 'visible', false)\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style  scoped>\r\n.vertical-panes {\r\n  margin: 0px;\r\n  width: 100%;\r\n  /* min-height: 400px; */\r\n  height: 95%;\r\n  border: 1px solid #ccc;\r\n}\r\n.vertical-panes > .pane {\r\n  text-align: left;\r\n  padding: 15px;\r\n  overflow: auto;\r\n  background: #eee;\r\n}\r\n.vertical-panes > .pane ~ .pane {\r\n  border-left: 1px solid #ccc;\r\n}\r\n\r\n.custom-tree-node {\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  font-size: 14px;\r\n  padding-right: 20px;\r\n}\r\n\r\ndiv >>> .el-checkbox {\r\n  margin-bottom: 0px;\r\n}\r\n</style>\r\n"]}]}