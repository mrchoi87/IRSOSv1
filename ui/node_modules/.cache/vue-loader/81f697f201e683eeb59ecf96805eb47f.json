{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/components/Transfer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/components/Transfer.vue","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapActions } from 'vuex'\nexport default {\n  props: [\n    'fieldId',\n    'path',\n    'uiInfo',\n    'devices',\n    'dataIndexs',\n    'showDialog',\n    'closeDialog',\n    'refresh'\n  ],\n  data () {\n    return {\n      showDialogCopy: false\n    }\n  },\n  watch: {\n    showDialog (newValue, oldValue) {\n      this.showDialogCopy = this.showDialog\n    }\n  },\n  computed: {\n    isMax () {\n      if (isNaN(this.uiInfo.max)) {\n        return false\n      } else {\n        let deviceCount = Object.keys(this.uiInfo.device).length\n        let dataCount = this.uiInfo.data.length\n        if (deviceCount + dataCount >= this.uiInfo.max) {\n          return true\n        } else {\n          return false\n        }\n      }\n    }\n  },\n  methods: {\n    ...mapActions({ fetchSetUiDevice: 'field/fetchSetUiDevice' }),\n    checkIdfmt (idfmt, item) {\n      var re = new RegExp(idfmt)\n      return re.test(item.id)\n    },\n    async typeSelect (type) {\n      let tempPath = this.path\n      tempPath.push('type')\n\n      await this.fetchSetUiDevice([\n        this.fieldId,\n        tempPath,\n        null,\n        null,\n        this.uiInfo.type.select\n      ])\n\n      try {\n        this.refresh()\n      } catch (error) {}\n    },\n    async dataSelect (dataId) {\n      let tempData = null\n      let tempPath = this.path\n\n      if (this.uiInfo.type) {\n        tempData = this.uiInfo[this.uiInfo.type.select]\n        tempPath.push(this.uiInfo.type.select)\n      } else {\n        tempData = this.uiInfo\n      }\n      if (tempData.data.includes(Number(dataId))) {\n        tempData.data.splice(tempData.data.indexOf(Number(dataId)), 1)\n      } else {\n        tempData.data.push(Number(dataId))\n      }\n\n      tempData.isFull = false\n\n      await this.fetchSetUiDevice([\n        this.fieldId,\n        tempPath,\n        null,\n        tempData.data\n      ])\n\n      try {\n        this.refresh()\n      } catch (error) {}\n    },\n    async deviceSelect (deviceId, dataId) {\n      let tempData = null\n      let tempPath = this.path\n\n      if (this.uiInfo.type) {\n        tempData = this.uiInfo[this.uiInfo.type.select]\n        tempPath.push(this.uiInfo.type.select)\n      } else {\n        tempData = this.uiInfo\n      }\n\n      if (!tempData.device[deviceId]) {\n        tempData.device[deviceId] = []\n      }\n\n      if (tempData.device[deviceId].includes(Number(dataId))) {\n        tempData.device[deviceId].splice(\n          tempData.device[deviceId].indexOf(Number(dataId)),\n          1\n        )\n      } else {\n        tempData.device[deviceId].push(Number(dataId))\n      }\n\n      if (tempData.device[deviceId].length === 0) {\n        delete tempData.device[deviceId]\n      }\n\n      tempData.isFull = false\n\n      await this.fetchSetUiDevice([\n        this.fieldId,\n        tempPath,\n        tempData.device,\n        null\n      ])\n      try {\n        this.refresh()\n      } catch (error) {}\n    }\n  }\n}\n",{"version":3,"sources":["Transfer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Transfer.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <el-dialog\n    :modal-append-to-body=\"false\"\n    :show-close=\"false\"\n    :visible.sync=\"showDialogCopy\"\n    @closed=\"()=>closeDialog()\"\n    center\n  >\n    <div slot=\"title\">\n      <h6>UI 표시 데이터</h6>\n    </div>\n\n    <div v-if=\"uiInfo\">\n      <div v-if=\"uiInfo.type\" class=\"mB-20\">\n        <h3>타입</h3>\n        <el-select v-model=\"uiInfo.type.select\" placeholder=\"타입을 선택 하세요\" class=\"mb w-100\" @change=\"typeSelect\">\n          <el-option v-for=\"item in uiInfo.type.list\" :key=\"item\" :label=\"item\" :value=\"item\"></el-option>\n        </el-select>\n      </div>\n      <div v-if=\"!uiInfo.type || uiInfo.type.select !== null\">\n        <h3>장비</h3>\n        <b-row>\n          <b-col lg=\"6\" v-for=\"device in devices\" :key=\"device.id\">\n            <h5 style=\"font-weight: 600\">{{device.name ? device.name : device.spec.Name}}</h5>\n            <template v-for=\"data in device.datas\">\n\n              <template v-if=\"!uiInfo.type\">\n                <el-checkbox\n                  v-if=\"checkIdfmt(uiInfo.idfmt.device ,data)\"\n                  :key=\"data.id\"\n                  :checked=\"uiInfo.device[device.id] && uiInfo.device[device.id].includes(Number(data.id))\"\n                  :label=\"data.name\"\n                  :disabled=\"isMax && !(uiInfo.device[device.id] && uiInfo.device[device.id].includes(Number(data.id)))\"\n                  @change=\"deviceSelect(device.id,data.id)\"\n                ></el-checkbox>\n              </template>\n              <template v-else>\n                <el-checkbox\n                  v-if=\"checkIdfmt(uiInfo[uiInfo.type.select].idfmt.device,data)\"\n                  :key=\"data.id\"\n                  :checked=\"uiInfo[uiInfo.type.select].device[device.id] && uiInfo[uiInfo.type.select].device[device.id].includes(Number(data.id))\"\n                  :label=\"data.name\"\n                  :disabled=\"isMax && !(uiInfo[uiInfo.type.select].device[device.id] && uiInfo[uiInfo.type.select].device[device.id].includes(Number(data.id)))\"\n                  @change=\"deviceSelect(device.id,data.id)\"\n                ></el-checkbox>\n              </template>\n            </template>\n            <el-divider />\n          </b-col>\n        </b-row>\n\n        <br />\n        <h3>데이터</h3>\n        <b-row>\n          <b-col lg=\"6\" v-for=\"dataIndex in dataIndexs\" :key=\"dataIndex.id\">\n            <el-checkbox\n              v-if=\"uiInfo.idfmt && checkIdfmt(uiInfo.idfmt.data,dataIndex)\"\n              :key=\"dataIndex.id\"\n              :checked=\"uiInfo.data.includes(Number(dataIndex.id))\"\n              :label=\"dataIndex.name\"\n              :disabled=\"isMax && !uiInfo.data.includes(Number(dataIndex.id))\"\n              @change=\"dataSelect(dataIndex.id)\"\n            ></el-checkbox>\n          </b-col>\n        </b-row>\n      </div>\n    </div>\n  </el-dialog>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\nexport default {\n  props: [\n    'fieldId',\n    'path',\n    'uiInfo',\n    'devices',\n    'dataIndexs',\n    'showDialog',\n    'closeDialog',\n    'refresh'\n  ],\n  data () {\n    return {\n      showDialogCopy: false\n    }\n  },\n  watch: {\n    showDialog (newValue, oldValue) {\n      this.showDialogCopy = this.showDialog\n    }\n  },\n  computed: {\n    isMax () {\n      if (isNaN(this.uiInfo.max)) {\n        return false\n      } else {\n        let deviceCount = Object.keys(this.uiInfo.device).length\n        let dataCount = this.uiInfo.data.length\n        if (deviceCount + dataCount >= this.uiInfo.max) {\n          return true\n        } else {\n          return false\n        }\n      }\n    }\n  },\n  methods: {\n    ...mapActions({ fetchSetUiDevice: 'field/fetchSetUiDevice' }),\n    checkIdfmt (idfmt, item) {\n      var re = new RegExp(idfmt)\n      return re.test(item.id)\n    },\n    async typeSelect (type) {\n      let tempPath = this.path\n      tempPath.push('type')\n\n      await this.fetchSetUiDevice([\n        this.fieldId,\n        tempPath,\n        null,\n        null,\n        this.uiInfo.type.select\n      ])\n\n      try {\n        this.refresh()\n      } catch (error) {}\n    },\n    async dataSelect (dataId) {\n      let tempData = null\n      let tempPath = this.path\n\n      if (this.uiInfo.type) {\n        tempData = this.uiInfo[this.uiInfo.type.select]\n        tempPath.push(this.uiInfo.type.select)\n      } else {\n        tempData = this.uiInfo\n      }\n      if (tempData.data.includes(Number(dataId))) {\n        tempData.data.splice(tempData.data.indexOf(Number(dataId)), 1)\n      } else {\n        tempData.data.push(Number(dataId))\n      }\n\n      tempData.isFull = false\n\n      await this.fetchSetUiDevice([\n        this.fieldId,\n        tempPath,\n        null,\n        tempData.data\n      ])\n\n      try {\n        this.refresh()\n      } catch (error) {}\n    },\n    async deviceSelect (deviceId, dataId) {\n      let tempData = null\n      let tempPath = this.path\n\n      if (this.uiInfo.type) {\n        tempData = this.uiInfo[this.uiInfo.type.select]\n        tempPath.push(this.uiInfo.type.select)\n      } else {\n        tempData = this.uiInfo\n      }\n\n      if (!tempData.device[deviceId]) {\n        tempData.device[deviceId] = []\n      }\n\n      if (tempData.device[deviceId].includes(Number(dataId))) {\n        tempData.device[deviceId].splice(\n          tempData.device[deviceId].indexOf(Number(dataId)),\n          1\n        )\n      } else {\n        tempData.device[deviceId].push(Number(dataId))\n      }\n\n      if (tempData.device[deviceId].length === 0) {\n        delete tempData.device[deviceId]\n      }\n\n      tempData.isFull = false\n\n      await this.fetchSetUiDevice([\n        this.fieldId,\n        tempPath,\n        tempData.device,\n        null\n      ])\n      try {\n        this.refresh()\n      } catch (error) {}\n    }\n  }\n}\n</script>\n\n<style>\n</style>\n"]}]}