{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/views/app/page/control/auto/detail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/views/app/page/control/auto/detail.vue","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport LineChart from '@/components/LineChart'\nimport { mapGetters } from 'vuex'\nexport default {\n  props: ['fieldId', 'ruleId'],\n  components: {\n    LineChart\n  },\n  data () {\n    var today = new Date()\n    return {\n      isBasicUsedComplate: false,\n      isSetLoading: true,\n      configTimeViewer: false,\n      configAdViewer: false,\n      section: 0,\n      rule: {},\n      outputDataIndex: {},\n      dataindexList: [],\n      timeSpan: {},\n      xAxisData: {\n        min: new Date(\n          today.getFullYear(),\n          today.getMonth(),\n          today.getDate(),\n          0,\n          0,\n          0\n        ),\n        max: new Date(\n          today.getFullYear(),\n          today.getMonth(),\n          today.getDate(),\n          24,\n          0,\n          0\n        )\n      }\n    }\n  },\n  computed: {\n    ...mapGetters({\n      getAllFieldDevices: 'device/getAllFieldDevices',\n      getObservations: 'observation/getObservations'\n    }),\n    useTimespan () {\n      if (this.rule.configurations) {\n        return this.rule.configurations.timespan.id > 0\n      }\n      return true\n    },\n    getFieldDevice () {\n      let devices = []\n      if (Number(this.fieldId) !== 0 && this.getAllFieldDevices[0]) {\n        devices = this.getAllFieldDevices[0].concat(\n          this.getAllFieldDevices[this.fieldId]\n        )\n      } else {\n        devices = this.getAllFieldDevices[this.fieldId]\n      }\n      return devices\n    },\n    getField () {\n      return this.$store.getters['field/getField'](this.fieldId)\n    },\n    getLatLng () {\n      if (this.getField) {\n        return {\n          lat: this.getField.data.lat.value,\n          lng: this.getField.data.lng.value\n        }\n      }\n      return {}\n    },\n    getChartData () {\n      let chartData = {\n        thresholds: [],\n        sections: [],\n        useds: []\n      }\n\n      if (!this.timeSpan.timespan) {\n        return chartData\n      }\n\n      chartData.sections = this.timeSpan.timespan.parts\n      chartData.thresholds = this.timeSpan.timespan.threshold\n      this.timeSpan.timespan.parts.forEach(element => {\n        chartData.useds.push(true)\n      })\n      return chartData\n    }\n  },\n  methods: {\n    async saveDataIndex () {\n      try {\n        await this.axios.put('dataindex', Object.values(this.outputDataIndex))\n        this.$notify({\n          title: '성공',\n          message: '데이터 이름을 변경 하였습니다',\n          type: 'success'\n        })\n      } catch (error) {\n        this.$notify({\n          title: '실패',\n          message: '에러가 발생 하였습니다',\n          type: 'error'\n        })\n      }\n    },\n    async ruleDelete () {\n      this.$confirm('해당 룰을 삭제 하시겠습니까?', '확인', {\n        type: 'warning'\n      })\n        .then(async _ => {\n          try {\n            await this.axios.delete(`rule/applied/${this.ruleId}`)\n            this.$notify({\n              title: '성공',\n              message: '룰을 제거 하였습니다',\n              type: 'success'\n            })\n            this.$router.push(`/control/auto/${this.fieldId}`)\n          } catch (error) {\n            this.$notify({\n              title: '실패',\n              message: '에러가 발생 하였습니다',\n              type: 'error'\n            })\n          }\n        })\n        .catch(_ => {})\n    },\n    async useChange (val) {\n      try {\n        await this.axios.put(`rule/applied/${this.ruleId}`, {\n          used: val\n        })\n\n        if (val === 1) {\n          this.$notify({\n            title: '성공',\n            message: '작동규칙 사용함으로 변경 하였습니다',\n            type: 'success'\n          })\n        } else {\n          this.$notify({\n            title: '성공',\n            message: '작동규칙 중지로 변경 하였습니다',\n            type: 'success'\n          })\n        }\n      } catch (error) {\n        this.$notify({\n          title: '실패',\n          message: '에러가 발생 하였습니다',\n          type: 'error'\n        })\n        this.rule.used = !this.rule.used\n      }\n    },\n    checkConstraint () {\n      let isCheck = true\n\n      if (this.rule.constraints.devices) {\n        for (const device of this.rule.constraints.devices) {\n          if (!device.optional || device.optional === 'false') {\n            if (device.deviceid === '') {\n              isCheck = false\n              break\n            }\n          }\n        }\n      }\n\n      if (this.rule.constraints.data) {\n        for (const data of this.rule.constraints.data) {\n          if (!data.optional || data.optional === 'false') {\n            if (data.dataid === '') {\n              isCheck = false\n              break\n            }\n          }\n        }\n      }\n\n      if (isCheck) {\n        this.isSetLoading = false\n        return true\n      } else {\n        this.isSetLoading = true\n        return false\n      }\n    },\n    async saveTimeSpan () {\n      try {\n        this.timeSpan.timespan.parts.forEach(element => {\n          element.to = element.type + element.value\n        })\n\n        await this.axios.put(`rule/applied/${this.ruleId}`, {\n          timespan: this.timeSpan,\n          configurations: this.rule.configurations\n        })\n\n        this.$notify({\n          title: '성공',\n          message: '동작설정을 변경 하였습니다',\n          type: 'success'\n        })\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    async saveConfiguration () {\n      try {\n        const configurations = this._.cloneDeep(this.rule.configurations)\n\n        configurations.basic.forEach(element => {\n          if (element.use) {\n            if (element.type) {\n              if (element.type === 'time') {\n                if (element.value !== null) {\n                  const time = element.value.split(':')\n                  const second = +time[0] * 60 * 60 + +time[1] * 60 + +time[2]\n                  element.value = second\n                }\n              } else if (element.type === 'ts_time') {\n                if (element.value !== null) {\n                  element.value.forEach(element => {\n                    const time = element.value.split(':')\n                    const second = +time[0] * 60 * 60 + +time[1] * 60 + +time[2]\n                    element.value = second\n                  })\n                }\n              }\n            }\n          } else {\n            element.value = null\n          }\n          delete element.use\n        })\n\n        await this.axios.put(`rule/applied/${this.ruleId}`, {\n          configurations: configurations\n        })\n        this.$notify({\n          title: '성공',\n          message: '동작설정을 변경 하였습니다',\n          type: 'success'\n        })\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    async saveConstraint () {\n      try {\n        if (!this.checkConstraint()) {\n          this.$notify({\n            title: '실패',\n            message: '환경설정 센서를 선택 해 주세요',\n            type: 'error'\n          })\n          return\n        }\n        let inputList = []\n\n        if (this.rule.constraints.devices) {\n          for (const device of this.rule.constraints.devices) {\n            for (const fieldDevice of this.getFieldDevice) {\n              if (device.deviceid === fieldDevice.id) {\n                console.log(fieldDevice)\n                device.name = fieldDevice.name\n                break\n              }\n            }\n\n            if (device.hasOwnProperty('inputs')) {\n              for (const code of device.inputs.codes) {\n                inputList.push({\n                  key: device.inputs.key + code,\n                  dataid: 1 * 10000000 + device.deviceid * 100 + code\n                })\n              }\n            }\n          }\n\n          if (this.rule.outputs.req) {\n            let removeDevice = []\n            let targets = []\n            for (const device of this.rule.constraints.devices) {\n              if (\n                device.class !== 'sensor' &&\n                (device.optional && device.optional === true)\n              ) {\n                if (device.deviceid.toString().length > 0) {\n                  targets.push(device.outputs)\n                }\n                removeDevice.push(device.outputs)\n              }\n            }\n\n            for (const req of this.rule.outputs.req) {\n              this._.remove(req.targets, function (el) {\n                return removeDevice.indexOf(el) !== -1\n              })\n              req.targets = req.targets.concat(targets)\n            }\n          }\n        }\n\n        if (this.rule.constraints.data) {\n          for (const data of this.rule.constraints.data) {\n            inputList.push({\n              key: data.key,\n              dataid: Number(data.dataid)\n            })\n          }\n        }\n\n        await this.axios.put(`rule/applied/${this.ruleId}`, {\n          constraints: this.rule.constraints,\n          inputs: inputList,\n          outputs: this.rule.outputs\n        })\n\n        this.$notify({\n          title: '성공',\n          message: '환경설정을 완료 하였습니다',\n          type: 'success'\n        })\n        this.checkConstraint()\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    async getRule () {\n      try {\n        const { data } = await this.axios.get(`/rule/applied/${this.ruleId}`)\n        this.rule = data\n\n        this.checkConstraint()\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    makeOutputDataIndex () {\n      if (this.rule.outputs.data) {\n        for (const data of this.rule.outputs.data) {\n          const code = 30000000 + this.rule.id * 10000 + data.outcode\n          for (const dataIndex of this.dataindexList) {\n            if (dataIndex.id === code) {\n              this.$set(this.outputDataIndex, code, dataIndex)\n              break\n            }\n          }\n        }\n      }\n    },\n    checkIdfmt (idfmt, item) {\n      var re = new RegExp(idfmt)\n      let regResult = re.test(item.id)\n\n      if (regResult) {\n        if (\n          item.id.toString().startsWith('0') ||\n          item.id.toString().startsWith('2')\n        ) {\n          const id = item.id.substring(1, 3)\n          if (Number(id) === Number(this.fieldId)) {\n            regResult = true\n          } else {\n            regResult = false\n          }\n        }\n      }\n\n      return regResult\n    },\n    async getDataIndex () {\n      try {\n        const { data } = await this.axios.get('dataindex')\n        this.dataindexList = data\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    async getTimeSpan () {\n      try {\n        const { data } = await this.axios.get(\n          `/rule/timespan/${this.rule.configurations.timespan.id}/field/${this.fieldId}`\n        )\n        this.timeSpan = data\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    async setBasicUsed () {\n      for (const item of this.rule.configurations.basic) {\n        if (item.value === null) {\n          this.$set(item, 'use', false)\n\n          if (item.type) {\n            if (item.type === 'time') {\n              item.value = `0:0:0`\n            } else if (item.type === 'ts_time') {\n              item.value = []\n              this.timeSpan.timespan.parts.forEach(element => {\n                item.value.push(`0:0:0`)\n              })\n            } else if (item.type === 'ts_float') {\n              item.value = []\n              this.timeSpan.timespan.parts.forEach(element => {\n                item.value.push(0)\n              })\n            }\n          } else {\n            item.value = 0\n          }\n        } else {\n          this.$set(item, 'use', true)\n\n          if (item.type) {\n            if (item.type === 'time') {\n              var hour = parseInt(item.value / 3600)\n              var min = parseInt((item.value % 3600) / 60)\n              var sec = item.value % 60\n              item.value = `${hour}:${min}:${sec}`\n            } else if (item.type === 'ts_time') {\n              item.value.forEach(element => {\n                var hour = parseInt(element / 3600)\n                var min = parseInt((element % 3600) / 60)\n                var sec = element % 60\n                element = `${hour}:${min}:${sec}`\n              })\n            }\n          }\n        }\n      }\n      this.isBasicUsedComplate = true\n    }\n  },\n  async mounted () {\n    await this.getRule()\n    await this.getTimeSpan()\n    await this.setBasicUsed()\n    await this.getDataIndex()\n    this.makeOutputDataIndex()\n    // this.chartDataMake()\n  }\n}\n",{"version":3,"sources":["detail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"detail.vue","sourceRoot":"src/views/app/page/control/auto","sourcesContent":["<template>\n  <div class=\"col-xxs-12 mx-auto my-auto\">\n    <el-card\n      class=\"header\"\n      shadow=\"never\"\n      style=\"border-radius:0px;z-index: 10;border-left-width: 0px;\"\n    >\n      <div class=\"clearfix\">\n        <div style=\"display: flex;align-items: center;\">\n          {{rule.name}}\n          <div class=\"ml-auto\" style=\"display: flex;align-items: center;\">\n            <div>\n              <el-switch\n                :disabled=\"this.isSetLoading\"\n                v-model=\"rule.used\"\n                active-text=\"사용\"\n                inactive-text=\"자동 중지\"\n                :active-value=\"1\"\n                :inactive-value=\"0\"\n                @change=\"useChange\"\n              ></el-switch>\n            </div>\n            <div class=\"ml-3\">\n              <div>\n                <el-checkbox\n                  style=\"margin-bottom: 0px;\"\n                  v-model=\"configTimeViewer\"\n                  v-if=\"useTimespan\"\n                >공통설정 보기</el-checkbox>\n              </div>\n              <el-checkbox style=\"margin-bottom: 0px;\" v-model=\"configAdViewer\">고급설정 보기</el-checkbox>\n            </div>\n            <el-button class=\"ml-4\" @click=\"ruleDelete\">작동규칙 삭제</el-button>\n          </div>\n        </div>\n      </div>\n    </el-card>\n\n    <div style=\"display: flex;padding-right: 15px;padding-left: 15px;\">\n      <div\n        style=\"margin-top: 100px;\"\n        ref=\"scroll\"\n        v-if=\"rule.constraints\"\n        class=\"main\"\n        v-scroll-spy=\"{data: 'section',offset: 146}\"\n      >\n        <div v-if=\"useTimespan\">\n          <el-card\n            v-loading=\"isSetLoading\"\n            element-loading-text=\"환경 설정을 완료해 주세요\"\n            class=\"box-card mb-5\"\n            shadow=\"al\"\n            style=\"cursor: pointer;\"\n          >\n            <div slot=\"header\" class=\"clearfix\">\n              <div style=\"display: flex;align-items: center;\">\n                공통 설정\n                <el-button class=\"ml-auto\" @click=\"saveTimeSpan\">저장</el-button>\n              </div>\n            </div>\n\n            <lineChart\n              class=\"mb-4\"\n              :id=\"'line'\"\n              :latlng=\"getLatLng\"\n              :sections=\"getChartData.sections\"\n              :thresholds=\"getChartData.thresholds\"\n              :useds=\"getChartData.useds\"\n              :xAxisData=\"xAxisData\"\n            ></lineChart>\n            <div style=\"overflow-x:auto\">\n              <table class=\"table text-nowrap\" v-if=\"timeSpan.timespan && timeSpan.timespan\">\n                <thead>\n                  <tr style=\"background-color: #f8f8f8;\">\n                    <th style=\"text-align:center;border-bottom: 1px solid #bbb;\">시간대 사용유무</th>\n                    <th\n                      v-for=\"(part,idx) in timeSpan.timespan.parts\"\n                      style=\"text-align:center;border-bottom: 1px solid #bbb;\"\n                      :key=\"idx\"\n                    >\n                      <el-checkbox\n                        border\n                        size=\"small\"\n                        v-model=\"rule.configurations.timespan.used[idx]\"\n                        :label=\"part.name\"\n                        style=\"margin-bottom: 0px\"\n                      ></el-checkbox>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody v-if=\"configTimeViewer\">\n                  <tr>\n                    <td>시간</td>\n                    <td :key=\"index\" v-for=\"(part,index) in timeSpan.timespan.parts\">\n                      <el-input\n                        placeholder=\"초\"\n                        :max=\"86400\"\n                        :min=\"0\"\n                        v-model=\"part.value\"\n                        :disabled=\"part.type === 'rise' || part.type === 'set'\"\n                        type=\"number\"\n                        class=\"input-with-select\"\n                      >\n                        <el-select\n                          v-model=\"part.type\"\n                          slot=\"prepend\"\n                          placeholder=\"선택\"\n                          style=\"width: 70px;\"\n                        >\n                          <el-option value label=\"초\"></el-option>\n                          <el-option value=\"rise-\" label=\"일출전\"></el-option>\n                          <el-option value=\"rise\" label=\"일출\"></el-option>\n                          <el-option value=\"rise+\" label=\"일출후\"></el-option>\n                          <el-option value=\"set-\" label=\"일몰전\"></el-option>\n                          <el-option value=\"set\" label=\"일몰\"></el-option>\n                          <el-option value=\"set+\" label=\"일몰후\"></el-option>\n                        </el-select>\n                      </el-input>\n                    </td>\n                  </tr>\n                  <tr :key=\"index\" v-for=\"(threshold,index) in timeSpan.timespan.threshold\">\n                    <td>{{threshold.name}}</td>\n                    <td :key=\"index\" v-for=\"(timeoption,index) in threshold.timeoption\">\n                      <el-input-number v-model=\"timeoption.to\" class=\"w-100\"></el-input-number>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </el-card>\n        </div>\n\n        <div>\n          <el-card\n            v-loading=\"isSetLoading\"\n            element-loading-text=\"환경 설정을 완료해 주세요\"\n            class=\"box-card mb-5\"\n            shadow=\"al\"\n            style=\"cursor: pointer;\"\n          >\n            <div slot=\"header\" class=\"clearfix\">\n              <div style=\"display: flex;align-items: center;\">\n                동작 설정\n                <el-button class=\"ml-auto\" @click=\"saveConfiguration\">저장</el-button>\n              </div>\n            </div>\n            <transition name=\"slide-fade\">\n              <div>\n                <div :style=\"{opacity : configAdViewer ? 1 : 0.3}\">\n                  <el-divider content-position=\"left\">고급 설정</el-divider>\n                </div>\n                <div v-if=\"configAdViewer\">\n                  <div>Use TimeSpan ID : {{rule.configurations.timespan}}</div>\n                  <div class=\"mb-4\">TimeSpan 변경은 관리자의 수동 변경만 가능 합니다</div>\n                  <el-row :gutter=\"20\">\n                    <el-col\n                      class=\"mb-4\"\n                      :span=\"8\"\n                      v-for=\"(item,index) in rule.configurations.advanced\"\n                      :key=\"index\"\n                    >\n                      <el-card style shadow=\"hover\">\n                        <div slot=\"header\" class=\"clearfix\">\n                          <div>{{item.name}}</div>\n                          <div>{{item.key}}</div>\n                        </div>\n\n                        <el-input-number\n                          v-if=\"item.minmax\"\n                          class=\"w-100\"\n                          v-model=\"item.value\"\n                          :min=\"item.minmax[0]\"\n                          :max=\"item.minmax[1]\"\n                        ></el-input-number>\n                        <el-input-number v-else class=\"w-100\" v-model=\"item.value\"></el-input-number>\n                        <div class=\"mt-2\" style=\"white-space: nowrap;\">{{item.description}}</div>\n                      </el-card>\n                    </el-col>\n                  </el-row>\n                </div>\n              </div>\n            </transition>\n            <div class=\"mb-5\"></div>\n            <el-divider content-position=\"left\">일반 설정</el-divider>\n            <div style=\"overflow-x:auto\">\n              <table class=\"table text-nowrap\" v-if=\"rule.configurations\">\n                <thead>\n                  <tr style=\"background-color: #f8f8f8;\">\n                    <th style=\"text-align:center;border-bottom: 1px solid #bbb;\">이름</th>\n                    <template v-if=\"timeSpan.timespan && timeSpan.timespan\">\n                      <th\n                        v-for=\"(part,idx) in timeSpan.timespan.parts\"\n                        style=\"text-align:center;border-bottom: 1px solid #bbb;\"\n                        :key=\"idx\"\n                      >{{part.name}}</th>\n                    </template>\n                    <template v-else>\n                      <th style=\"text-align:center;border-bottom: 1px solid #bbb;\">전체 시간</th>\n                    </template>\n                  </tr>\n                </thead>\n                <tbody v-if=\"isBasicUsedComplate\">\n                  <tr v-for=\"(item,index) in rule.configurations.basic\" :key=\"index\">\n                    <td>\n                      <el-checkbox v-model=\"item.use\">설정 사용</el-checkbox>\n                      <br />\n                      {{item.name}}\n                    </td>\n                    <template v-if=\"item.type\">\n                      <template v-if=\"item.type === 'ts_float'\">\n                        <td v-for=\"(value,index) in item.value\" :key=\"index\">\n                          <el-input-number\n                            v-model=\"item.value[index]\"\n                            class=\"w-100\"\n                            :disabled=\"!item.use || !rule.configurations.timespan.used[index]\">\n                          </el-input-number>\n                        </td>\n                      </template>\n                      <template v-if=\"item.type === 'ts_time'\">\n                        <td v-for=\"(value,index) in item.value\" :key=\"index\">\n                          <el-time-picker\n                            class=\"w-100\"\n                            value-format=\"HH:mm:ss\"\n                            v-model=\"item.value[index]\"\n                            :disabled=\"!item.use || !rule.configurations.timespan.used[index]\">\n                          </el-time-picker>\n                        </td>\n                      </template>\n                      <td v-else colspan=\"100%\">\n                        <el-time-picker\n                          class=\"w-100\"\n                          value-format=\"HH:mm:ss\"\n                          v-model=\"item.value\"\n                          :disabled=\"!item.use\"\n                        ></el-time-picker>\n                      </td>\n                    </template>\n                    <template v-else>\n                      <td colspan=\"100%\">\n                        <el-input-number\n                          v-model=\"item.value\"\n                          class=\"w-100\"\n                          :disabled=\"!item.use\"\n                        ></el-input-number>\n                      </td>\n                    </template>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </el-card>\n        </div>\n        <div>\n          <el-card class=\"box-card mb-5\" shadow=\"al\" style=\"cursor: pointer;\">\n            <div slot=\"header\" class=\"clearfix\">\n              <div style=\"display: flex;align-items: center;\">\n                출력 설정\n                <el-button class=\"ml-auto\" @click=\"saveDataIndex\">저장</el-button>\n              </div>\n            </div>\n\n            <el-row :gutter=\"20\">\n              <template v-for=\"(data,index) in rule.outputs.data\">\n                <el-col\n                  class=\"mb-4\"\n                  :span=\"8\"\n                  :key=\"index\"\n                  v-if=\"data.name && outputDataIndex[30000000 + (rule.id * 10000) + data.outcode]\"\n                >\n                  <el-card style shadow=\"hover\">\n                    <div slot=\"header\" class=\"clearfix\">{{data.outputs}} : {{data.name}}</div>\n                    <font class=\"text-muted ml-1\">이름 변경</font>\n                    <el-input\n                      class=\"mt-1\"\n                      placeholder=\"데이터 이름\"\n                      v-model=\"outputDataIndex[30000000 + (rule.id * 10000) + data.outcode].name\"\n                    ></el-input>\n                  </el-card>\n                </el-col>\n              </template>\n            </el-row>\n          </el-card>\n        </div>\n        <div>\n          <el-card class=\"box-card mb-5\" shadow=\"al\" style=\"cursor: pointer;\">\n            <div slot=\"header\" class=\"clearfix\">\n              <div style=\"display: flex;align-items: center;\">\n                환경 설정\n                <el-button class=\"ml-auto\" @click=\"saveConstraint\">저장</el-button>\n              </div>\n            </div>\n\n            <el-row :gutter=\"20\">\n              <el-col\n                class=\"mb-4\"\n                :sm=\"16\"\n                :lg=\"8\"\n                v-for=\"(device,index) in rule.constraints.devices\"\n                :key=\"`device${index}`\"\n              >\n                <el-card style shadow=\"hover\">\n                  <div slot=\"header\" class=\"clearfix\">{{device.desc}}</div>\n                  장비 {{!device.optional || device.optional === 'false' ? ' 필수 선택' : '옵션 선택' }}\n                  <el-select v-model=\"device.deviceid\" placeholder=\"미설정\" class=\"w-100 mt-2\">\n                    <template v-for=\"item in getFieldDevice\">\n                      <el-option\n                        v-if=\"item.spec.Type === device.type\"\n                        :key=\"`${index}_${item.id}`\"\n                        :label=\"item.name ? item.name : item.spec.Name ? item.spec.Name : item.spec.Type \"\n                        :value=\"item.id\"\n                      ></el-option>\n                    </template>\n                  </el-select>\n                </el-card>\n              </el-col>\n              <el-col\n                class=\"mb-4\"\n                :span=\"8\"\n                v-for=\"(device,index) in rule.constraints.data\"\n                :key=\"`data${index}`\"\n              >\n                <el-card style shadow=\"hover\">\n                  <div slot=\"header\" class=\"clearfix\">{{device.desc}}</div>\n                  데이터 {{!device.optional || device.optional === 'false' ? ' 필수 선택' : '옵션 선택' }}\n                  <el-select v-model=\"device.dataid\" placeholder=\"미설정\" class=\"w-100 mt-2\">\n                    <template v-for=\"item in dataindexList\">\n                      <el-option\n                        v-if=\"checkIdfmt(device.idfmt,item)\"\n                        :key=\"`${index}_${item.id}`\"\n                        :label=\"item.name\"\n                        :value=\"item.id\"\n                      ></el-option>\n                    </template>\n                  </el-select>\n                </el-card>\n              </el-col>\n            </el-row>\n          </el-card>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport LineChart from '@/components/LineChart'\nimport { mapGetters } from 'vuex'\nexport default {\n  props: ['fieldId', 'ruleId'],\n  components: {\n    LineChart\n  },\n  data () {\n    var today = new Date()\n    return {\n      isBasicUsedComplate: false,\n      isSetLoading: true,\n      configTimeViewer: false,\n      configAdViewer: false,\n      section: 0,\n      rule: {},\n      outputDataIndex: {},\n      dataindexList: [],\n      timeSpan: {},\n      xAxisData: {\n        min: new Date(\n          today.getFullYear(),\n          today.getMonth(),\n          today.getDate(),\n          0,\n          0,\n          0\n        ),\n        max: new Date(\n          today.getFullYear(),\n          today.getMonth(),\n          today.getDate(),\n          24,\n          0,\n          0\n        )\n      }\n    }\n  },\n  computed: {\n    ...mapGetters({\n      getAllFieldDevices: 'device/getAllFieldDevices',\n      getObservations: 'observation/getObservations'\n    }),\n    useTimespan () {\n      if (this.rule.configurations) {\n        return this.rule.configurations.timespan.id > 0\n      }\n      return true\n    },\n    getFieldDevice () {\n      let devices = []\n      if (Number(this.fieldId) !== 0 && this.getAllFieldDevices[0]) {\n        devices = this.getAllFieldDevices[0].concat(\n          this.getAllFieldDevices[this.fieldId]\n        )\n      } else {\n        devices = this.getAllFieldDevices[this.fieldId]\n      }\n      return devices\n    },\n    getField () {\n      return this.$store.getters['field/getField'](this.fieldId)\n    },\n    getLatLng () {\n      if (this.getField) {\n        return {\n          lat: this.getField.data.lat.value,\n          lng: this.getField.data.lng.value\n        }\n      }\n      return {}\n    },\n    getChartData () {\n      let chartData = {\n        thresholds: [],\n        sections: [],\n        useds: []\n      }\n\n      if (!this.timeSpan.timespan) {\n        return chartData\n      }\n\n      chartData.sections = this.timeSpan.timespan.parts\n      chartData.thresholds = this.timeSpan.timespan.threshold\n      this.timeSpan.timespan.parts.forEach(element => {\n        chartData.useds.push(true)\n      })\n      return chartData\n    }\n  },\n  methods: {\n    async saveDataIndex () {\n      try {\n        await this.axios.put('dataindex', Object.values(this.outputDataIndex))\n        this.$notify({\n          title: '성공',\n          message: '데이터 이름을 변경 하였습니다',\n          type: 'success'\n        })\n      } catch (error) {\n        this.$notify({\n          title: '실패',\n          message: '에러가 발생 하였습니다',\n          type: 'error'\n        })\n      }\n    },\n    async ruleDelete () {\n      this.$confirm('해당 룰을 삭제 하시겠습니까?', '확인', {\n        type: 'warning'\n      })\n        .then(async _ => {\n          try {\n            await this.axios.delete(`rule/applied/${this.ruleId}`)\n            this.$notify({\n              title: '성공',\n              message: '룰을 제거 하였습니다',\n              type: 'success'\n            })\n            this.$router.push(`/control/auto/${this.fieldId}`)\n          } catch (error) {\n            this.$notify({\n              title: '실패',\n              message: '에러가 발생 하였습니다',\n              type: 'error'\n            })\n          }\n        })\n        .catch(_ => {})\n    },\n    async useChange (val) {\n      try {\n        await this.axios.put(`rule/applied/${this.ruleId}`, {\n          used: val\n        })\n\n        if (val === 1) {\n          this.$notify({\n            title: '성공',\n            message: '작동규칙 사용함으로 변경 하였습니다',\n            type: 'success'\n          })\n        } else {\n          this.$notify({\n            title: '성공',\n            message: '작동규칙 중지로 변경 하였습니다',\n            type: 'success'\n          })\n        }\n      } catch (error) {\n        this.$notify({\n          title: '실패',\n          message: '에러가 발생 하였습니다',\n          type: 'error'\n        })\n        this.rule.used = !this.rule.used\n      }\n    },\n    checkConstraint () {\n      let isCheck = true\n\n      if (this.rule.constraints.devices) {\n        for (const device of this.rule.constraints.devices) {\n          if (!device.optional || device.optional === 'false') {\n            if (device.deviceid === '') {\n              isCheck = false\n              break\n            }\n          }\n        }\n      }\n\n      if (this.rule.constraints.data) {\n        for (const data of this.rule.constraints.data) {\n          if (!data.optional || data.optional === 'false') {\n            if (data.dataid === '') {\n              isCheck = false\n              break\n            }\n          }\n        }\n      }\n\n      if (isCheck) {\n        this.isSetLoading = false\n        return true\n      } else {\n        this.isSetLoading = true\n        return false\n      }\n    },\n    async saveTimeSpan () {\n      try {\n        this.timeSpan.timespan.parts.forEach(element => {\n          element.to = element.type + element.value\n        })\n\n        await this.axios.put(`rule/applied/${this.ruleId}`, {\n          timespan: this.timeSpan,\n          configurations: this.rule.configurations\n        })\n\n        this.$notify({\n          title: '성공',\n          message: '동작설정을 변경 하였습니다',\n          type: 'success'\n        })\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    async saveConfiguration () {\n      try {\n        const configurations = this._.cloneDeep(this.rule.configurations)\n\n        configurations.basic.forEach(element => {\n          if (element.use) {\n            if (element.type) {\n              if (element.type === 'time') {\n                if (element.value !== null) {\n                  const time = element.value.split(':')\n                  const second = +time[0] * 60 * 60 + +time[1] * 60 + +time[2]\n                  element.value = second\n                }\n              } else if (element.type === 'ts_time') {\n                if (element.value !== null) {\n                  element.value.forEach(element => {\n                    const time = element.value.split(':')\n                    const second = +time[0] * 60 * 60 + +time[1] * 60 + +time[2]\n                    element.value = second\n                  })\n                }\n              }\n            }\n          } else {\n            element.value = null\n          }\n          delete element.use\n        })\n\n        await this.axios.put(`rule/applied/${this.ruleId}`, {\n          configurations: configurations\n        })\n        this.$notify({\n          title: '성공',\n          message: '동작설정을 변경 하였습니다',\n          type: 'success'\n        })\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    async saveConstraint () {\n      try {\n        if (!this.checkConstraint()) {\n          this.$notify({\n            title: '실패',\n            message: '환경설정 센서를 선택 해 주세요',\n            type: 'error'\n          })\n          return\n        }\n        let inputList = []\n\n        if (this.rule.constraints.devices) {\n          for (const device of this.rule.constraints.devices) {\n            for (const fieldDevice of this.getFieldDevice) {\n              if (device.deviceid === fieldDevice.id) {\n                console.log(fieldDevice)\n                device.name = fieldDevice.name\n                break\n              }\n            }\n\n            if (device.hasOwnProperty('inputs')) {\n              for (const code of device.inputs.codes) {\n                inputList.push({\n                  key: device.inputs.key + code,\n                  dataid: 1 * 10000000 + device.deviceid * 100 + code\n                })\n              }\n            }\n          }\n\n          if (this.rule.outputs.req) {\n            let removeDevice = []\n            let targets = []\n            for (const device of this.rule.constraints.devices) {\n              if (\n                device.class !== 'sensor' &&\n                (device.optional && device.optional === true)\n              ) {\n                if (device.deviceid.toString().length > 0) {\n                  targets.push(device.outputs)\n                }\n                removeDevice.push(device.outputs)\n              }\n            }\n\n            for (const req of this.rule.outputs.req) {\n              this._.remove(req.targets, function (el) {\n                return removeDevice.indexOf(el) !== -1\n              })\n              req.targets = req.targets.concat(targets)\n            }\n          }\n        }\n\n        if (this.rule.constraints.data) {\n          for (const data of this.rule.constraints.data) {\n            inputList.push({\n              key: data.key,\n              dataid: Number(data.dataid)\n            })\n          }\n        }\n\n        await this.axios.put(`rule/applied/${this.ruleId}`, {\n          constraints: this.rule.constraints,\n          inputs: inputList,\n          outputs: this.rule.outputs\n        })\n\n        this.$notify({\n          title: '성공',\n          message: '환경설정을 완료 하였습니다',\n          type: 'success'\n        })\n        this.checkConstraint()\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    async getRule () {\n      try {\n        const { data } = await this.axios.get(`/rule/applied/${this.ruleId}`)\n        this.rule = data\n\n        this.checkConstraint()\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    makeOutputDataIndex () {\n      if (this.rule.outputs.data) {\n        for (const data of this.rule.outputs.data) {\n          const code = 30000000 + this.rule.id * 10000 + data.outcode\n          for (const dataIndex of this.dataindexList) {\n            if (dataIndex.id === code) {\n              this.$set(this.outputDataIndex, code, dataIndex)\n              break\n            }\n          }\n        }\n      }\n    },\n    checkIdfmt (idfmt, item) {\n      var re = new RegExp(idfmt)\n      let regResult = re.test(item.id)\n\n      if (regResult) {\n        if (\n          item.id.toString().startsWith('0') ||\n          item.id.toString().startsWith('2')\n        ) {\n          const id = item.id.substring(1, 3)\n          if (Number(id) === Number(this.fieldId)) {\n            regResult = true\n          } else {\n            regResult = false\n          }\n        }\n      }\n\n      return regResult\n    },\n    async getDataIndex () {\n      try {\n        const { data } = await this.axios.get('dataindex')\n        this.dataindexList = data\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    async getTimeSpan () {\n      try {\n        const { data } = await this.axios.get(\n          `/rule/timespan/${this.rule.configurations.timespan.id}/field/${this.fieldId}`\n        )\n        this.timeSpan = data\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    async setBasicUsed () {\n      for (const item of this.rule.configurations.basic) {\n        if (item.value === null) {\n          this.$set(item, 'use', false)\n\n          if (item.type) {\n            if (item.type === 'time') {\n              item.value = `0:0:0`\n            } else if (item.type === 'ts_time') {\n              item.value = []\n              this.timeSpan.timespan.parts.forEach(element => {\n                item.value.push(`0:0:0`)\n              })\n            } else if (item.type === 'ts_float') {\n              item.value = []\n              this.timeSpan.timespan.parts.forEach(element => {\n                item.value.push(0)\n              })\n            }\n          } else {\n            item.value = 0\n          }\n        } else {\n          this.$set(item, 'use', true)\n\n          if (item.type) {\n            if (item.type === 'time') {\n              var hour = parseInt(item.value / 3600)\n              var min = parseInt((item.value % 3600) / 60)\n              var sec = item.value % 60\n              item.value = `${hour}:${min}:${sec}`\n            } else if (item.type === 'ts_time') {\n              item.value.forEach(element => {\n                var hour = parseInt(element / 3600)\n                var min = parseInt((element % 3600) / 60)\n                var sec = element % 60\n                element = `${hour}:${min}:${sec}`\n              })\n            }\n          }\n        }\n      }\n      this.isBasicUsedComplate = true\n    }\n  },\n  async mounted () {\n    await this.getRule()\n    await this.getTimeSpan()\n    await this.setBasicUsed()\n    await this.getDataIndex()\n    this.makeOutputDataIndex()\n    // this.chartDataMake()\n  }\n}\n</script>\n\n<style scoped>\n.table th {\n  vertical-align: middle;\n  border-bottom: 2px solid rgba(0, 0, 0, 0.0625);\n}\n\n.table td {\n  vertical-align: middle;\n}\n\n.table >>> .el-loading-mask {\n  top: 60px;\n}\n\ndiv >>> .el-card__header {\n  padding-top: 10px;\n  padding-bottom: 10px;\n  background-color: #f8f8f8;\n}\n\ndiv >>> .el-input-group__prepend {\n  background-color: white;\n}\n\ndiv >>> .el-input__inner {\n  /* padding-left: 8px; */\n  /* padding-right: 0px; */\n  /* text-align: center; */\n}\n\ndiv >>> .el-input__suffix {\n  right: -2px;\n}\n\n.scollSideBar {\n  /* top: 30px;\n  left: 10px; */\n  max-width: 180px;\n  font-size: 18px;\n}\n.menu {\n  padding: 0;\n  list-style: none;\n}\n.current-section {\n  padding-top: 50px;\n}\n.current-section input {\n  max-width: 3em;\n}\n.menu-item {\n  margin-bottom: 20px;\n}\n.menu-item a {\n  cursor: pointer;\n}\n.main {\n  /* margin-left: 180px; */\n  width: 100%;\n}\n.customActive {\n  color: #178ce6;\n  border-left: 1px solid #178ce6;\n  padding-left: 5px;\n  transition: all 0.5s;\n}\n</style>\n"]}]}