{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/components/HouseTempChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/components/HouseTempChart.vue","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { addDays } from 'date-fns'\nimport LineChart from '@/components/LineChart'\nimport Transfer from '@/components/Transfer'\nexport default {\n  props: ['field', 'uiInfo', 'uiType', 'sensor', 'name', 'obs'],\n  components: {\n    Transfer,\n    LineChart\n  },\n  data () {\n    return {\n      showDialog: false,\n      timeSpan: {},\n      chartData: [],\n      today: new Date()\n    }\n  },\n  computed: {\n    getChartData () {\n      let chartData = {\n        thresholds: [],\n        sections: [],\n        useds: [],\n        graphData: [],\n        xAxisData: {\n          min: this.$date().format(this.today, 'YYYY-MM-DD'),\n          max: this.$date().format(addDays(this.today, 1), 'YYYY-MM-DD')\n        }\n      }\n\n      if (this.timeSpan.timespan) {\n        chartData.sections = this.timeSpan.timespan.parts\n        chartData.thresholds = this.timeSpan.timespan.threshold\n        this.timeSpan.timespan.parts.forEach(element => {\n          chartData.useds.push(true)\n        })\n      }\n      return chartData\n    }\n  },\n  mounted () {\n    this.getTimeSpan()\n    this.getGraphDat()\n  },\n  methods: {\n    async getTimeSpan () {\n      try {\n        const { data } = await this.axios.get(\n          `/rule/timespan/1/field/${this.field.id}`\n        )\n        this.$set(this, 'timeSpan', data)\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    getGraphDat () {\n      let ids = []\n      for (const key in this.uiInfo[this.uiType].device) {\n        for (const id of this.uiInfo[this.uiType].device[key]) {\n          ids.push(id)\n        }\n      }\n      this.getGraph(\n        [this.today, addDays(this.today, 1)],\n        ids\n      )\n    },\n    async getGraph (date, searchItems) {\n      const { data } = await this.axios.put('farm/graph', {\n        device_id: searchItems.map(Number),\n        startdate: this.$date().format(date[0], 'YYYY-MM-DD'),\n        enddate: this.$date().format(date[1], 'YYYY-MM-DD')\n      })\n\n      for (const element of data.data) {\n        if (element.id.toString().startsWith('1')) {\n          for (const device of this.sensor) {\n            for (const data of device.datas) {\n              if (data.id === element.id) {\n                element.name = device.name + ' ' + element.name\n                break\n              }\n            }\n          }\n        }\n        element.sigdigit = this.obs[element.id].sigdigit\n      }\n      this.$set(this, 'chartData', data.data)\n    }\n  }\n}\n",{"version":3,"sources":["HouseTempChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"HouseTempChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div style=\"display: flex;\">\n      <div>{{name}}</div>\n      <div class=\"ml-auto el-icon-setting\" style=\"z-index: 1;\" @click=\"showDialog = true\"></div>\n    </div>\n    <lineChart\n      :id=\"'line'\"\n      :defineHeight=\"100\"\n      :latlng=\"{lat: field.data.lat.value,lng: field.data.lng.value}\"\n      :sections=\"getChartData.sections\"\n      :thresholds=\"getChartData.thresholds\"\n      :useds=\"getChartData.useds\"\n      :xAxisData=\"getChartData.xAxisData\"\n      :graphData=\"chartData\"\n    ></lineChart>\n    <!-- :graphData=\"chart.graphDatas['left'][house.id] && chart.graphDatas['left'][house.id].data ? chart.graphDatas['left'][house.id].data : []\" -->\n    <Transfer\n      :fieldId=\"field.id\"\n      :path=\"['dashboard',uiType]\"\n      :uiInfo=\"uiInfo[uiType]\"\n      :devices=\"sensor\"\n      :showDialog=\"showDialog\"\n      :closeDialog=\"()=>showDialog = false\"\n      :refresh=\"getGraphDat\"\n    />\n  </div>\n</template>\n\n<script>\nimport { addDays } from 'date-fns'\nimport LineChart from '@/components/LineChart'\nimport Transfer from '@/components/Transfer'\nexport default {\n  props: ['field', 'uiInfo', 'uiType', 'sensor', 'name', 'obs'],\n  components: {\n    Transfer,\n    LineChart\n  },\n  data () {\n    return {\n      showDialog: false,\n      timeSpan: {},\n      chartData: [],\n      today: new Date()\n    }\n  },\n  computed: {\n    getChartData () {\n      let chartData = {\n        thresholds: [],\n        sections: [],\n        useds: [],\n        graphData: [],\n        xAxisData: {\n          min: this.$date().format(this.today, 'YYYY-MM-DD'),\n          max: this.$date().format(addDays(this.today, 1), 'YYYY-MM-DD')\n        }\n      }\n\n      if (this.timeSpan.timespan) {\n        chartData.sections = this.timeSpan.timespan.parts\n        chartData.thresholds = this.timeSpan.timespan.threshold\n        this.timeSpan.timespan.parts.forEach(element => {\n          chartData.useds.push(true)\n        })\n      }\n      return chartData\n    }\n  },\n  mounted () {\n    this.getTimeSpan()\n    this.getGraphDat()\n  },\n  methods: {\n    async getTimeSpan () {\n      try {\n        const { data } = await this.axios.get(\n          `/rule/timespan/1/field/${this.field.id}`\n        )\n        this.$set(this, 'timeSpan', data)\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    getGraphDat () {\n      let ids = []\n      for (const key in this.uiInfo[this.uiType].device) {\n        for (const id of this.uiInfo[this.uiType].device[key]) {\n          ids.push(id)\n        }\n      }\n      this.getGraph(\n        [this.today, addDays(this.today, 1)],\n        ids\n      )\n    },\n    async getGraph (date, searchItems) {\n      const { data } = await this.axios.put('farm/graph', {\n        device_id: searchItems.map(Number),\n        startdate: this.$date().format(date[0], 'YYYY-MM-DD'),\n        enddate: this.$date().format(date[1], 'YYYY-MM-DD')\n      })\n\n      for (const element of data.data) {\n        if (element.id.toString().startsWith('1')) {\n          for (const device of this.sensor) {\n            for (const data of device.datas) {\n              if (data.id === element.id) {\n                element.name = device.name + ' ' + element.name\n                break\n              }\n            }\n          }\n        }\n        element.sigdigit = this.obs[element.id].sigdigit\n      }\n      this.$set(this, 'chartData', data.data)\n    }\n  }\n}\n</script>\n\n<style>\n</style>\n"]}]}