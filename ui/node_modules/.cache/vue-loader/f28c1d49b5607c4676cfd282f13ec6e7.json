{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/components/newDeviceTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/components/newDeviceTree.vue","mtime":1607502276916},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { commonSpecIp } from '@/constants/config'\r\nimport JsonEditor from '@/components/JsonEditor'\r\nimport { Multipane, MultipaneResizer } from 'vue-multipane'\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  components: {\r\n    Multipane,\r\n    MultipaneResizer,\r\n    JsonEditor\r\n  },\r\n  props: ['devices'],\r\n  data: function () {\r\n    return {\r\n      showNode: undefined,\r\n      deviceSpec: {},\r\n      nodeList: [],\r\n      legacyDeviceList: [],\r\n      jsonEditorOptions: {\r\n        mode: 'code'\r\n      }\r\n    }\r\n  },\r\n  async mounted () {\r\n    await this.getNodeIdDeviceList()\r\n    await this.nodeTreeCreate()\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getFields: 'field/getFields',\r\n      getCvtgate: 'cvtgate/getCvtgate'\r\n    })\r\n  },\r\n  methods: {\r\n    getField (id) {\r\n      for (const field of this.getFields) {\r\n        if (field.id === id) return field\r\n      }\r\n    },\r\n    async getNodeIdDeviceList () {\r\n      const { data } = await this.axios.get(`device`)\r\n      this.legacyDeviceList = data\r\n    },\r\n    async deviceItemCreate (\r\n      coupleId,\r\n      gatewayId,\r\n      nodeId,\r\n      node,\r\n      spec,\r\n      i,\r\n      children,\r\n      isDevices\r\n    ) {\r\n      if (!isDevices && !node.devcodes[i] && node.devcodes[i] === 0) {\r\n        return\r\n      }\r\n\r\n      let devcode = 0\r\n      if (isDevices) {\r\n        devcode = i + 1\r\n      } else {\r\n        devcode = node.devcodes[i]\r\n      }\r\n\r\n      let tempSpec = this._.cloneDeep(spec)\r\n\r\n      let deviceStatus = 'new'\r\n      let name = tempSpec.Name ? tempSpec.Name : tempSpec.Type\r\n      let place = []\r\n\r\n      for (const legacyDevice of this.legacyDeviceList) {\r\n        if (\r\n          legacyDevice.coupleid === coupleId &&\r\n          legacyDevice.gateid === gatewayId &&\r\n          legacyDevice.nodeid === Number(nodeId)\r\n        ) {\r\n          if (\r\n            legacyDevice.compcode === node.compcode &&\r\n            legacyDevice.devcode === devcode &&\r\n            legacyDevice.devindex === i\r\n          ) {\r\n            deviceStatus = 'legacy'\r\n            name = legacyDevice.name\r\n            place = legacyDevice.place\r\n            break\r\n          }\r\n        }\r\n      }\r\n\r\n      let isDisabled = deviceStatus === 'legacy'\r\n      if (spec.noSpec) {\r\n        name = '미지원 스펙'\r\n        isDisabled = true\r\n      }\r\n\r\n      children.push({\r\n        name: name,\r\n        place: place,\r\n        nodeid: nodeId,\r\n        compcode: node.compcode,\r\n        devcode: devcode,\r\n        devindex: i,\r\n        spec: tempSpec,\r\n        coupleid: coupleId,\r\n        gateid: gatewayId,\r\n        deviceStatus: deviceStatus,\r\n        disabled: isDisabled\r\n      })\r\n    },\r\n    async nodeTreeCreate () {\r\n      try {\r\n        this.nodeList = []\r\n        let noSpectItems = []\r\n        let gateList = []\r\n        for (const id in this.devices) {\r\n          if (id !== 'code' && id !== 'opid' && id !== 'time') {\r\n            const temp = {}\r\n            temp.gatewayId = id\r\n            temp.node = this._.cloneDeep(this.devices[id])\r\n            gateList.push(temp)\r\n          }\r\n        }\r\n\r\n        let specCodeList = new Set([])\r\n        gateList.forEach(gate => {\r\n          for (const nodeId in gate.node) {\r\n            specCodeList.add(\r\n              `${gate.node[nodeId].compcode}/${gate.node[nodeId].nodecode}`\r\n            )\r\n          }\r\n        })\r\n\r\n        let searchCodePrmise = []\r\n        for (let item of specCodeList) {\r\n          searchCodePrmise.push(\r\n            this.getDevSpec(item.split('/')[0], item.split('/')[1], 'nd', 1)\r\n          )\r\n        }\r\n\r\n        let results = []\r\n        await Promise.all(\r\n          searchCodePrmise.map(p =>\r\n            p\r\n              .then(p => {\r\n                results.push(p)\r\n                return p\r\n              })\r\n              .catch(p => {\r\n                results.push(p)\r\n              })\r\n          )\r\n        )\r\n\r\n        results.map(result => {\r\n          if (result.status === 200) {\r\n            this.$set(\r\n              this.deviceSpec,\r\n              `${result.config.params.compcode}/${result.config.params.code}`,\r\n              result.data\r\n            )\r\n          } else {\r\n            this.$set(\r\n              this.deviceSpec,\r\n              `${result.config.params.compcode}/${result.config.params.code}`,\r\n              { noSpec: true, newSpec: {} }\r\n            )\r\n          }\r\n        })\r\n\r\n        specCodeList = new Set([])\r\n        gateList.forEach(gate => {\r\n          for (const nodeId in gate.node) {\r\n            const node = gate.node[nodeId]\r\n            if (\r\n              this.deviceSpec[`${node.compcode}/${node.nodecode}`] &&\r\n              !this.deviceSpec[`${node.compcode}/${node.nodecode}`].noSpec &&\r\n              !this.deviceSpec[`${node.compcode}/${node.nodecode}`].Devices &&\r\n              node.devcodes\r\n            ) {\r\n              for (let devcode of node.devcodes) {\r\n                specCodeList.add(`${node.compcode}/${devcode}`)\r\n              }\r\n            }\r\n          }\r\n        })\r\n\r\n        searchCodePrmise = []\r\n        for (let item of specCodeList) {\r\n          searchCodePrmise.push(\r\n            this.getDevSpec(item.split('/')[0], item.split('/')[1], 'dev', 1)\r\n          )\r\n        }\r\n\r\n        await Promise.all(\r\n          searchCodePrmise.map(p =>\r\n            p\r\n              .then(p => {\r\n                results.push(p)\r\n                return p\r\n              })\r\n              .catch(p => {\r\n                results.push(p)\r\n              })\r\n          )\r\n        )\r\n\r\n        results.map(result => {\r\n          if (result.status === 200) {\r\n            this.$set(\r\n              this.deviceSpec,\r\n              `${result.config.params.compcode}/${result.config.params.code}`,\r\n              result.data\r\n            )\r\n          } else {\r\n            this.$set(\r\n              this.deviceSpec,\r\n              `${result.config.params.compcode}/${result.config.params.code}`,\r\n              { noSpec: true, newSpec: {} }\r\n            )\r\n          }\r\n        })\r\n\r\n        gateList.forEach(gate => {\r\n          for (const nodeId in gate.node) {\r\n            const node = gate.node[nodeId]\r\n            let item = this.deviceSpec[`${node.compcode}/${node.nodecode}`]\r\n\r\n            if (item) {\r\n              let deviceStatus = 'new'\r\n              let name = item.Name ? item.Name : item.Type\r\n\r\n              for (const legacyDevice of this.legacyDeviceList) {\r\n                if (\r\n                  legacyDevice.coupleid === this.getCvtgate.couple &&\r\n                  legacyDevice.gateid === gate.gatewayId &&\r\n                  legacyDevice.nodeid === Number(nodeId)\r\n                ) {\r\n                  if (\r\n                    legacyDevice.compcode === node.compcode &&\r\n                    legacyDevice.devcode === node.nodecode\r\n                  ) {\r\n                    deviceStatus = 'legacy'\r\n                    name = legacyDevice.name\r\n                  } else {\r\n                    deviceStatus = 'new'\r\n                  }\r\n                  break\r\n                }\r\n              }\r\n\r\n              let isDisabled = deviceStatus === 'legacy'\r\n              if (item.noSpec) {\r\n                name = '미지원 스펙'\r\n                isDisabled = true\r\n              }\r\n\r\n              let nodeTemp = {\r\n                nodeid: Number(nodeId),\r\n                compcode: node.compcode,\r\n                devcode: node.nodecode,\r\n                name: name,\r\n                spec: item,\r\n                coupleid: this.getCvtgate.couple,\r\n                gateid: gate.gatewayId,\r\n                deviceStatus: deviceStatus,\r\n                disabled: isDisabled,\r\n                children: []\r\n              }\r\n\r\n              if (!item.noSpec) {\r\n                if (item.Devices) {\r\n                  for (const [i, spec] of item.Devices.entries()) {\r\n                    this.deviceItemCreate(\r\n                      this.getCvtgate.couple,\r\n                      gate.gatewayId,\r\n                      nodeId,\r\n                      node,\r\n                      spec,\r\n                      i,\r\n                      nodeTemp.children,\r\n                      true\r\n                    )\r\n                  }\r\n                } else {\r\n                  for (const [i, deviceCode] of node.devcodes.entries()) {\r\n                    this.deviceItemCreate(\r\n                      this.getCvtgate.couple,\r\n                      gate.gatewayId,\r\n                      nodeId,\r\n                      node,\r\n                      this.deviceSpec[`${node.compcode}/${deviceCode}`],\r\n                      i,\r\n                      nodeTemp.children,\r\n                      false\r\n                    )\r\n                  }\r\n                }\r\n              }\r\n              this.nodeList.push(nodeTemp)\r\n            }\r\n          }\r\n        })\r\n\r\n        this.nodeList = this.nodeList.concat(noSpectItems)\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    },\r\n    getCheckNode () {\r\n      const device = this.$refs.tree\r\n        .getHalfCheckedNodes()\r\n        .concat(this.$refs.tree.getCheckedNodes())\r\n      return this._.cloneDeep(device)\r\n    },\r\n    getDevSpec (compcode, devcode, type, ndtype) {\r\n      //mrchoi87 add ndtype\r\n      let specIP = commonSpecIp\r\n\r\n      return this.axios.get(specIP, {\r\n        params: {\r\n          compcode: compcode,\r\n          code: devcode,\r\n          devtype: type,\r\n          ndtype: ndtype\r\n        }\r\n      })\r\n    },\r\n    selectNode (data, node) {\r\n      if (data.spec.noSpec) {\r\n        this.showNode = data\r\n        if (node.level === 1) {\r\n          this.showNode.type = 'nd'\r\n        } else {\r\n          this.showNode.type = 'dev'\r\n        }\r\n      } else {\r\n        if (node.level > 1) {\r\n          this.showNode = node.parent.data\r\n        } else {\r\n          this.showNode = data\r\n        }\r\n      }\r\n    },\r\n    placeChange () {\r\n      let isNutrientSupply = false\r\n      let place = []\r\n      for (const device of this.showNode.children) {\r\n        if (device.spec.Class === 'nutrient-supply') {\r\n          isNutrientSupply = true\r\n          place = device.place\r\n        }\r\n\r\n        if (isNutrientSupply) {\r\n          for (const device of this.showNode.children) {\r\n            device.place = place\r\n          }\r\n        }\r\n      }\r\n    },\r\n    jsonCheck () {\r\n      this.$refs.jsonEditor.editorJsonGet()\r\n    },\r\n    async onChange (isSuccess, newJson) {\r\n      if (isSuccess) {\r\n        try {\r\n          await this.axios.put(\r\n            `${commonSpecIp}/?compcode=${this.showNode.compcode}&code=${this.showNode.devcode}&devtype=${this.showNode.type}`,\r\n            newJson\r\n          )\r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n        this.$message({\r\n          message: '스펙을 추가 하였습니다.'\r\n        })\r\n        await this.getNodeIdDeviceList()\r\n        await this.nodeTreeCreate()\r\n      } else {\r\n        this.$message({\r\n          type: 'error',\r\n          message: 'Json 데이터를 확인해 주세요'\r\n        })\r\n      }\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["newDeviceTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"newDeviceTree.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <div>\r\n      <multipane class=\"vertical-panes\" layout=\"vertical\">\r\n        <div\r\n          :style=\"{ width: '250px',padding:'3px', minWidth: '250px', background: '#fff' }\"\r\n          class=\"pane\"\r\n        >\r\n          <el-tree\r\n            ref=\"tree\"\r\n            :data=\"nodeList\"\r\n            show-checkbox\r\n            default-expand-all\r\n            :expand-on-click-node=\"false\"\r\n            :highlight-current=\"true\"\r\n            :accordion=\"false\"\r\n            @current-change=\"selectNode\"\r\n          >\r\n            <div class=\"custom-tree-node\" slot-scope=\"{ data }\">\r\n              <span>&nbsp;{{ data.name }}</span>\r\n              <span v-if=\"data.deviceStatus === 'new'\">\r\n                <b-badge pill variant=\"info\" style=\"height:20px\">{{data.deviceStatus}}</b-badge>\r\n              </span>\r\n            </div>\r\n          </el-tree>\r\n        </div>\r\n        <multipane-resizer />\r\n        <div :style=\"{ flexGrow: 1 }\" class=\"pane\">\r\n          <template v-if=\"showNode && showNode.spec.noSpec\">\r\n            <el-button @click=\"jsonCheck\">저장</el-button>\r\n            <b-row class=\"mt-2\">\r\n              <b-col lg=\"12\">\r\n                <b-card class=\"mb-2\" no-body>\r\n                  <b-card-body>\r\n                    <b-row>\r\n                      <b-col lg=\"3\" class=\"ta-c\">\r\n                        <div class=\"d-inline-block\">\r\n                          <h5 class=\"d-inline\">{{showNode.compcode}}</h5>\r\n                          <span class=\"text-muted text-small d-block\">Compcode</span>\r\n                        </div>\r\n                      </b-col>\r\n                      <b-col lg=\"3\" class=\"ta-c\">\r\n                        <div class=\"d-inline-block\">\r\n                          <h5 class=\"d-inline\">{{showNode.devcode}}</h5>\r\n                          <span class=\"text-muted text-small d-block\">Devcode</span>\r\n                        </div>\r\n                      </b-col>\r\n                      <b-col lg=\"3\" class=\"ta-c\">\r\n                        <div class=\"d-inline-block\">\r\n                          <h5 class=\"d-inline\">{{showNode.type}}</h5>\r\n                          <span class=\"text-muted text-small d-block\">Type</span>\r\n                        </div>\r\n                      </b-col>\r\n                      <b-col lg=\"3\" class=\"ta-c\">\r\n                        <div class=\"d-inline-block\">\r\n                          <h5 class=\"d-inline\">{{showNode.devindex}}</h5>\r\n                          <span class=\"text-muted text-small d-block\">Devindex</span>\r\n                        </div>\r\n                      </b-col>\r\n                    </b-row>\r\n                  </b-card-body>\r\n                </b-card>\r\n              </b-col>\r\n            </b-row>\r\n            <jsonEditor\r\n              ref=\"jsonEditor\"\r\n              :json=\"showNode.spec.newSpec\"\r\n              :options=\"jsonEditorOptions\"\r\n              :on-change=\"onChange\"\r\n            />\r\n          </template>\r\n          <template v-else-if=\"showNode && !showNode.spec.noSpec\">\r\n            <b-row>\r\n              <b-col lg=\"12\">\r\n                <b-card class=\"mb-3\" no-body>\r\n                  <b-card-body>\r\n                    <div class=\"float-left float-none-xs mb-4\">\r\n                      <div class=\"d-inline-block\">\r\n                        <h5 class=\"d-inline\">{{showNode.spec.Type}}</h5>\r\n                        <span class=\"text-muted text-small d-block\">Type</span>\r\n                      </div>\r\n                    </div>\r\n                    <table class=\"table table-borderless\" style=\"margin-bottom: 0px;\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th\r\n                            class=\"text-muted text-extra-small\"\r\n                            style=\"padding-bottom: 0px;padding-top: 0px;\"\r\n                          >CLASS</th>\r\n                          <th\r\n                            class=\"text-center text-muted text-extra-small\"\r\n                            style=\"padding-bottom: 0px;padding-top: 0px;\"\r\n                          >MODEL</th>\r\n                          <th\r\n                            class=\"text-right text-muted text-extra-small\"\r\n                            style=\"padding-bottom: 0px;padding-top: 0px;\"\r\n                          >NAME</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr>\r\n                          <td style=\"padding-top: 6px;\">\r\n                            <h5>{{showNode.spec.Class}}</h5>\r\n                          </td>\r\n                          <td class=\"text-center\" style=\"padding-top: 6px;\">\r\n                            <h5>{{showNode.spec.Model}}</h5>\r\n                          </td>\r\n                          <td class=\"text-right\" style=\"padding-top: 6px;\">\r\n                            <h5>{{showNode.spec.Name}}</h5>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                    <div\r\n                      class=\"text-muted mt-1\"\r\n                      style=\"padding-bottom: 0px;padding-top: 0px;padding-left:12px\"\r\n                    >CommSpec</div>\r\n                    <div\r\n                      v-for=\"(commSpec,id) in showNode.spec.CommSpec\"\r\n                      :key=\"id\"\r\n                      style=\"padding-left:12px;padding-right: 0px;padding-top: 10px;padding-bottom: 0px;\"\r\n                    >\r\n                      <b-card :header=\"id\" no-body>\r\n                        <b-card-body\r\n                          style=\"padding-top: 10px;padding-right: 10px;padding-bottom: 10px;padding-left: 20px;\"\r\n                        >\r\n                          <b-list-group flush>\r\n                            <b-list-group-item\r\n                              v-for=\"(type,id) in commSpec\"\r\n                              :key=\"id\"\r\n                              style=\"padding-left: 0px;padding-right: 0px;padding-top: 5px; padding-bottom: 10px;\"\r\n                            >\r\n                              <div>\r\n                                <div class=\"mb-2\">{{id + ' : ' + type['starting-register']}}</div>\r\n                                <b-badge\r\n                                  v-for=\"item in type.items\"\r\n                                  :key=\"item\"\r\n                                  pill\r\n                                  variant=\"outline-secondary\"\r\n                                  class=\"mb-1 mr-1\"\r\n                                >{{item}}</b-badge>\r\n                              </div>\r\n                            </b-list-group-item>\r\n                          </b-list-group>\r\n                        </b-card-body>\r\n                      </b-card>\r\n                    </div>\r\n                  </b-card-body>\r\n                </b-card>\r\n              </b-col>\r\n            </b-row>\r\n            <b-row>\r\n              <b-col lg=\"3\" v-for=\"(device,index) in showNode.children\" :key=\"index\">\r\n                <b-card class=\"mb-4\" no-body>\r\n                  <div\r\n                    class=\"position-absolute card-top-buttons\"\r\n                    v-if=\"device.deviceStatus === 'new'\"\r\n                  >\r\n                    <el-popover placement=\"right\" width=\"300\" trigger=\"click\">\r\n                      <p>정보를 입력 하세요!</p>\r\n                      <el-input placeholder=\"이름을 입력 하세요\" class=\"mb-2\" v-model=\"device.name\">\r\n                        <template slot=\"prepend\">이름</template>\r\n                      </el-input>\r\n\r\n                      <template\r\n                        v-if=\"showNode.spec.Type === 'nutrient-supply-node'? device.spec.Class === 'nutrient-supply' ? true : false : true\"\r\n                      >\r\n                        <div class=\"mt-2 mb-1\">온실</div>\r\n                        <el-select\r\n                          v-model=\"device.place\"\r\n                          multiple\r\n                          placeholder=\"온실을 선택 하세요\"\r\n                          class=\"w-100\"\r\n                          @change=\"placeChange\"\r\n                        >\r\n                          <el-option\r\n                            v-for=\"item in getFields\"\r\n                            :key=\"item.id\"\r\n                            :label=\"item.name\"\r\n                            :value=\"item.id\"\r\n                          ></el-option>\r\n                        </el-select>\r\n\r\n                        <div\r\n                          style=\"color:#1e90ff\"\r\n                          class=\"mt-2 mb-3\"\r\n                          v-if=\"showNode.spec.Type === 'nutrient-supply-node'\"\r\n                        >* 양액기 설치 온실 순서로 선택</div>\r\n                        <div else class=\"mb-3\"></div>\r\n                      </template>\r\n\r\n                      <!-- <div style=\"text-align: right; margin: 0\">\r\n                        <el-button size=\"mini\" type=\"text\" @click=\"visible2 = false\">취소</el-button>\r\n                        <el-button type=\"primary\" size=\"mini\" @click=\"visible2 = false\">경</el-button>\r\n                      </div>-->\r\n                      <el-button slot=\"reference\" icon=\"el-icon-edit\" circle></el-button>\r\n                    </el-popover>\r\n                  </div>\r\n                  <img\r\n                    src=\"/assets/img/sensor.svg\"\r\n                    alt=\"Detail\"\r\n                    class=\"card-img-top pl-4 pr-4\"\r\n                    :style=\"{opacity : device.deviceStatus === 'legacy' ? '0.3' : '1'}\"\r\n                  />\r\n                  <b-badge\r\n                    variant=\"primary\"\r\n                    pill\r\n                    class=\"position-absolute badge-top-left\"\r\n                  >{{`이름 : ${ device.name ? device.name : '-' }`}}</b-badge>\r\n                  <b-badge\r\n                    variant=\"secondary\"\r\n                    pill\r\n                    class=\"position-absolute badge-top-left-2\"\r\n                    v-if=\"showNode.spec.Type === 'nutrient-supply-node'? device.spec.Class === 'nutrient-supply' ? true : false : true\"\r\n                  >\r\n                    온실 : {{device.place.length == 0 ? '-' : ''}}\r\n                    <template\r\n                      v-for=\"(place,idx) in device.place\"\r\n                    >{{idx>0 ? ', ' :'' }}{{getField(place).name}}</template>\r\n                  </b-badge>\r\n                  <b-card-body\r\n                    :style=\"{background : device.deviceStatus === 'legacy' ? 'lightgray' : ''}\"\r\n                  >\r\n                    <p class=\"text-muted text-small mb-2\">Class</p>\r\n                    <p class=\"mb-3\">{{device.spec.Class}}</p>\r\n                    <p class=\"text-muted text-small mb-2\">Type</p>\r\n                    <div class=\"mb-3\">{{device.spec.Type}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Name</p>\r\n                    <div class=\"mb-3\">{{device.spec.Name ? device.spec.Name : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Model</p>\r\n                    <div class=\"mb-3\">{{device.spec.Model ? device.spec.Model : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Unit</p>\r\n                    <div class=\"mb-3\">{{device.spec.ValueUnit ? device.spec.ValueUnit : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">SignificantDigit</p>\r\n                    <div\r\n                      class=\"mb-3\"\r\n                    >{{device.spec.SignificantDigit ? device.spec.SignificantDigit : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">ValueType</p>\r\n                    <div class=\"mb-3\">{{device.spec.ValueType ? device.spec.ValueType : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">Channel</p>\r\n                    <div class=\"mb-3\">{{device.spec.Channel ? device.spec.Channel : '-'}}</div>\r\n                    <p class=\"text-muted text-small mb-2\">CommSpec</p>\r\n                    <div\r\n                      v-for=\"(type,id) in device.spec.CommSpec\"\r\n                      :key=\"id\"\r\n                      style=\"padding-left: 0px;padding-right: 0px;padding-top: 10px;padding-bottom: 0px;\"\r\n                    >\r\n                      <b-card\r\n                        :header=\"id\"\r\n                        no-body\r\n                        :style=\"{background : device.deviceStatus === 'legacy' ? 'lightgray' : ''}\"\r\n                      >\r\n                        <b-card-body\r\n                          style=\"padding-top: 10px;padding-right: 10px;padding-bottom: 10px;padding-left: 20px;\"\r\n                        >\r\n                          <b-list-group flush>\r\n                            <b-list-group-item\r\n                              v-for=\"(item,id) in type\"\r\n                              :key=\"id\"\r\n                              style=\"padding-left: 0px;padding-right: 0px;padding-top: 10px; padding-bottom: 10px;\"\r\n                              :style=\"{background : device.deviceStatus === 'legacy' ? 'lightgray' : ''}\"\r\n                            >\r\n                              <div>\r\n                                <div class=\"mb-2\">{{id + ' : ' + item['starting-register']}}</div>\r\n                                <b-badge\r\n                                  v-for=\"item in item.items\"\r\n                                  :key=\"item\"\r\n                                  pill\r\n                                  variant=\"outline-secondary\"\r\n                                  class=\"mb-1 mr-1\"\r\n                                >{{item}}</b-badge>\r\n                              </div>\r\n                            </b-list-group-item>\r\n                          </b-list-group>\r\n                        </b-card-body>\r\n                      </b-card>\r\n                    </div>\r\n                  </b-card-body>\r\n                </b-card>\r\n              </b-col>\r\n            </b-row>\r\n          </template>\r\n        </div>\r\n      </multipane>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { commonSpecIp } from '@/constants/config'\r\nimport JsonEditor from '@/components/JsonEditor'\r\nimport { Multipane, MultipaneResizer } from 'vue-multipane'\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  components: {\r\n    Multipane,\r\n    MultipaneResizer,\r\n    JsonEditor\r\n  },\r\n  props: ['devices'],\r\n  data: function () {\r\n    return {\r\n      showNode: undefined,\r\n      deviceSpec: {},\r\n      nodeList: [],\r\n      legacyDeviceList: [],\r\n      jsonEditorOptions: {\r\n        mode: 'code'\r\n      }\r\n    }\r\n  },\r\n  async mounted () {\r\n    await this.getNodeIdDeviceList()\r\n    await this.nodeTreeCreate()\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getFields: 'field/getFields',\r\n      getCvtgate: 'cvtgate/getCvtgate'\r\n    })\r\n  },\r\n  methods: {\r\n    getField (id) {\r\n      for (const field of this.getFields) {\r\n        if (field.id === id) return field\r\n      }\r\n    },\r\n    async getNodeIdDeviceList () {\r\n      const { data } = await this.axios.get(`device`)\r\n      this.legacyDeviceList = data\r\n    },\r\n    async deviceItemCreate (\r\n      coupleId,\r\n      gatewayId,\r\n      nodeId,\r\n      node,\r\n      spec,\r\n      i,\r\n      children,\r\n      isDevices\r\n    ) {\r\n      if (!isDevices && !node.devcodes[i] && node.devcodes[i] === 0) {\r\n        return\r\n      }\r\n\r\n      let devcode = 0\r\n      if (isDevices) {\r\n        devcode = i + 1\r\n      } else {\r\n        devcode = node.devcodes[i]\r\n      }\r\n\r\n      let tempSpec = this._.cloneDeep(spec)\r\n\r\n      let deviceStatus = 'new'\r\n      let name = tempSpec.Name ? tempSpec.Name : tempSpec.Type\r\n      let place = []\r\n\r\n      for (const legacyDevice of this.legacyDeviceList) {\r\n        if (\r\n          legacyDevice.coupleid === coupleId &&\r\n          legacyDevice.gateid === gatewayId &&\r\n          legacyDevice.nodeid === Number(nodeId)\r\n        ) {\r\n          if (\r\n            legacyDevice.compcode === node.compcode &&\r\n            legacyDevice.devcode === devcode &&\r\n            legacyDevice.devindex === i\r\n          ) {\r\n            deviceStatus = 'legacy'\r\n            name = legacyDevice.name\r\n            place = legacyDevice.place\r\n            break\r\n          }\r\n        }\r\n      }\r\n\r\n      let isDisabled = deviceStatus === 'legacy'\r\n      if (spec.noSpec) {\r\n        name = '미지원 스펙'\r\n        isDisabled = true\r\n      }\r\n\r\n      children.push({\r\n        name: name,\r\n        place: place,\r\n        nodeid: nodeId,\r\n        compcode: node.compcode,\r\n        devcode: devcode,\r\n        devindex: i,\r\n        spec: tempSpec,\r\n        coupleid: coupleId,\r\n        gateid: gatewayId,\r\n        deviceStatus: deviceStatus,\r\n        disabled: isDisabled\r\n      })\r\n    },\r\n    async nodeTreeCreate () {\r\n      try {\r\n        this.nodeList = []\r\n        let noSpectItems = []\r\n        let gateList = []\r\n        for (const id in this.devices) {\r\n          if (id !== 'code' && id !== 'opid' && id !== 'time') {\r\n            const temp = {}\r\n            temp.gatewayId = id\r\n            temp.node = this._.cloneDeep(this.devices[id])\r\n            gateList.push(temp)\r\n          }\r\n        }\r\n\r\n        let specCodeList = new Set([])\r\n        gateList.forEach(gate => {\r\n          for (const nodeId in gate.node) {\r\n            specCodeList.add(\r\n              `${gate.node[nodeId].compcode}/${gate.node[nodeId].nodecode}`\r\n            )\r\n          }\r\n        })\r\n\r\n        let searchCodePrmise = []\r\n        for (let item of specCodeList) {\r\n          searchCodePrmise.push(\r\n            this.getDevSpec(item.split('/')[0], item.split('/')[1], 'nd', 1)\r\n          )\r\n        }\r\n\r\n        let results = []\r\n        await Promise.all(\r\n          searchCodePrmise.map(p =>\r\n            p\r\n              .then(p => {\r\n                results.push(p)\r\n                return p\r\n              })\r\n              .catch(p => {\r\n                results.push(p)\r\n              })\r\n          )\r\n        )\r\n\r\n        results.map(result => {\r\n          if (result.status === 200) {\r\n            this.$set(\r\n              this.deviceSpec,\r\n              `${result.config.params.compcode}/${result.config.params.code}`,\r\n              result.data\r\n            )\r\n          } else {\r\n            this.$set(\r\n              this.deviceSpec,\r\n              `${result.config.params.compcode}/${result.config.params.code}`,\r\n              { noSpec: true, newSpec: {} }\r\n            )\r\n          }\r\n        })\r\n\r\n        specCodeList = new Set([])\r\n        gateList.forEach(gate => {\r\n          for (const nodeId in gate.node) {\r\n            const node = gate.node[nodeId]\r\n            if (\r\n              this.deviceSpec[`${node.compcode}/${node.nodecode}`] &&\r\n              !this.deviceSpec[`${node.compcode}/${node.nodecode}`].noSpec &&\r\n              !this.deviceSpec[`${node.compcode}/${node.nodecode}`].Devices &&\r\n              node.devcodes\r\n            ) {\r\n              for (let devcode of node.devcodes) {\r\n                specCodeList.add(`${node.compcode}/${devcode}`)\r\n              }\r\n            }\r\n          }\r\n        })\r\n\r\n        searchCodePrmise = []\r\n        for (let item of specCodeList) {\r\n          searchCodePrmise.push(\r\n            this.getDevSpec(item.split('/')[0], item.split('/')[1], 'dev', 1)\r\n          )\r\n        }\r\n\r\n        await Promise.all(\r\n          searchCodePrmise.map(p =>\r\n            p\r\n              .then(p => {\r\n                results.push(p)\r\n                return p\r\n              })\r\n              .catch(p => {\r\n                results.push(p)\r\n              })\r\n          )\r\n        )\r\n\r\n        results.map(result => {\r\n          if (result.status === 200) {\r\n            this.$set(\r\n              this.deviceSpec,\r\n              `${result.config.params.compcode}/${result.config.params.code}`,\r\n              result.data\r\n            )\r\n          } else {\r\n            this.$set(\r\n              this.deviceSpec,\r\n              `${result.config.params.compcode}/${result.config.params.code}`,\r\n              { noSpec: true, newSpec: {} }\r\n            )\r\n          }\r\n        })\r\n\r\n        gateList.forEach(gate => {\r\n          for (const nodeId in gate.node) {\r\n            const node = gate.node[nodeId]\r\n            let item = this.deviceSpec[`${node.compcode}/${node.nodecode}`]\r\n\r\n            if (item) {\r\n              let deviceStatus = 'new'\r\n              let name = item.Name ? item.Name : item.Type\r\n\r\n              for (const legacyDevice of this.legacyDeviceList) {\r\n                if (\r\n                  legacyDevice.coupleid === this.getCvtgate.couple &&\r\n                  legacyDevice.gateid === gate.gatewayId &&\r\n                  legacyDevice.nodeid === Number(nodeId)\r\n                ) {\r\n                  if (\r\n                    legacyDevice.compcode === node.compcode &&\r\n                    legacyDevice.devcode === node.nodecode\r\n                  ) {\r\n                    deviceStatus = 'legacy'\r\n                    name = legacyDevice.name\r\n                  } else {\r\n                    deviceStatus = 'new'\r\n                  }\r\n                  break\r\n                }\r\n              }\r\n\r\n              let isDisabled = deviceStatus === 'legacy'\r\n              if (item.noSpec) {\r\n                name = '미지원 스펙'\r\n                isDisabled = true\r\n              }\r\n\r\n              let nodeTemp = {\r\n                nodeid: Number(nodeId),\r\n                compcode: node.compcode,\r\n                devcode: node.nodecode,\r\n                name: name,\r\n                spec: item,\r\n                coupleid: this.getCvtgate.couple,\r\n                gateid: gate.gatewayId,\r\n                deviceStatus: deviceStatus,\r\n                disabled: isDisabled,\r\n                children: []\r\n              }\r\n\r\n              if (!item.noSpec) {\r\n                if (item.Devices) {\r\n                  for (const [i, spec] of item.Devices.entries()) {\r\n                    this.deviceItemCreate(\r\n                      this.getCvtgate.couple,\r\n                      gate.gatewayId,\r\n                      nodeId,\r\n                      node,\r\n                      spec,\r\n                      i,\r\n                      nodeTemp.children,\r\n                      true\r\n                    )\r\n                  }\r\n                } else {\r\n                  for (const [i, deviceCode] of node.devcodes.entries()) {\r\n                    this.deviceItemCreate(\r\n                      this.getCvtgate.couple,\r\n                      gate.gatewayId,\r\n                      nodeId,\r\n                      node,\r\n                      this.deviceSpec[`${node.compcode}/${deviceCode}`],\r\n                      i,\r\n                      nodeTemp.children,\r\n                      false\r\n                    )\r\n                  }\r\n                }\r\n              }\r\n              this.nodeList.push(nodeTemp)\r\n            }\r\n          }\r\n        })\r\n\r\n        this.nodeList = this.nodeList.concat(noSpectItems)\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    },\r\n    getCheckNode () {\r\n      const device = this.$refs.tree\r\n        .getHalfCheckedNodes()\r\n        .concat(this.$refs.tree.getCheckedNodes())\r\n      return this._.cloneDeep(device)\r\n    },\r\n    getDevSpec (compcode, devcode, type, ndtype) {\r\n      //mrchoi87 add ndtype\r\n      let specIP = commonSpecIp\r\n\r\n      return this.axios.get(specIP, {\r\n        params: {\r\n          compcode: compcode,\r\n          code: devcode,\r\n          devtype: type,\r\n          ndtype: ndtype\r\n        }\r\n      })\r\n    },\r\n    selectNode (data, node) {\r\n      if (data.spec.noSpec) {\r\n        this.showNode = data\r\n        if (node.level === 1) {\r\n          this.showNode.type = 'nd'\r\n        } else {\r\n          this.showNode.type = 'dev'\r\n        }\r\n      } else {\r\n        if (node.level > 1) {\r\n          this.showNode = node.parent.data\r\n        } else {\r\n          this.showNode = data\r\n        }\r\n      }\r\n    },\r\n    placeChange () {\r\n      let isNutrientSupply = false\r\n      let place = []\r\n      for (const device of this.showNode.children) {\r\n        if (device.spec.Class === 'nutrient-supply') {\r\n          isNutrientSupply = true\r\n          place = device.place\r\n        }\r\n\r\n        if (isNutrientSupply) {\r\n          for (const device of this.showNode.children) {\r\n            device.place = place\r\n          }\r\n        }\r\n      }\r\n    },\r\n    jsonCheck () {\r\n      this.$refs.jsonEditor.editorJsonGet()\r\n    },\r\n    async onChange (isSuccess, newJson) {\r\n      if (isSuccess) {\r\n        try {\r\n          await this.axios.put(\r\n            `${commonSpecIp}/?compcode=${this.showNode.compcode}&code=${this.showNode.devcode}&devtype=${this.showNode.type}`,\r\n            newJson\r\n          )\r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n        this.$message({\r\n          message: '스펙을 추가 하였습니다.'\r\n        })\r\n        await this.getNodeIdDeviceList()\r\n        await this.nodeTreeCreate()\r\n      } else {\r\n        this.$message({\r\n          type: 'error',\r\n          message: 'Json 데이터를 확인해 주세요'\r\n        })\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style  scoped>\r\n.vertical-panes {\r\n  margin: 0px;\r\n  width: 100%;\r\n  min-height: 400px;\r\n  border: 1px solid #ccc;\r\n}\r\n.vertical-panes > .pane {\r\n  text-align: left;\r\n  padding: 15px;\r\n  overflow: auto;\r\n  background: #eee;\r\n}\r\n.vertical-panes > .pane ~ .pane {\r\n  border-left: 1px solid #ccc;\r\n}\r\n\r\n.custom-tree-node {\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  font-size: 14px;\r\n  padding-right: 20px;\r\n}\r\n\r\ndiv >>> .el-checkbox {\r\n  margin-bottom: 0px;\r\n}\r\n</style>\r\n"]}]}