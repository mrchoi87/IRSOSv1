{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/components/MonitorChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/components/MonitorChart.vue","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { addSeconds } from 'date-fns'\nimport vgridVue from '@/components/chart/vgridVue'\nimport hgridVue from '@/components/chart/hgridVue'\nimport lineVue from '@/components/chart/lineVue'\nimport circleTextVue from '@/components/chart/circleTextVue'\nimport legendVue from '@/components/chart/legendVue'\nimport defsVue from '@/components/chart/defsVue'\nimport { statusCode } from '@/constants/config'\n\nimport * as d3 from 'd3'\n\nexport default {\n  layout: 'dashboard',\n  components: {\n    vgridVue,\n    hgridVue,\n    lineVue,\n    circleTextVue,\n    legendVue,\n    defsVue\n  },\n  props: {\n    defineHeight: {\n      required: false,\n      type: Number,\n      default: 366\n    },\n    id: {\n      required: true,\n      type: String\n    },\n    xAxisData: {\n      type: Object,\n      required: true\n    },\n    graphData: {\n      required: true,\n      type: Array\n    }\n  },\n  data: function () {\n    return {\n      difineMax: 30,\n      marginAxis: 40,\n      width: 0,\n      height: 0,\n      thresholds: []\n    }\n  },\n  computed: {\n    Root: function () {\n      const Root = d3.select(this.$el)\n      Root.append('div')\n        .attr('class', 'tooltip')\n        .style('opacity', 0)\n      return Root\n    },\n    Svg: function () {\n      return this.Root.select('svg')\n    },\n    Ggrid: function () {\n      return this.Svg.select('.grid')\n    },\n    svgWidth: function () {\n      return this.width + this.margin.left + this.margin.right\n    },\n    svgHeight: function () {\n      return this.height + this.margin.top + this.margin.bottom\n    },\n    xScale: function () {\n      return d3\n        .scaleTime()\n        .domain([\n          this.$date().parse(this.xAxisData.min),\n          this.$date().parse(this.xAxisData.max)\n        ])\n        .range([0, this.width])\n    },\n    yScales: function () {\n      let yScales = this.yAxisData\n      for (var index in this.yAxisData) {\n        yScales[index]['yScale'] = d3\n          .scaleLinear()\n          .domain([this.yAxisData[index]['min'], this.yAxisData[index]['max']])\n          .range([this.height, 0])\n      }\n      return yScales\n    },\n    yAxisData: function () {\n      let yAxisData = {}\n      this.thresholds.forEach(function (element) {\n        if (yAxisData[element.unit] === undefined) {\n          yAxisData[element.unit] = {\n            max: this.difineMax,\n            min: 0\n          }\n        }\n        let max = d3.max(element.data, function (d) {\n          return d.value\n        })\n        if (yAxisData[element.unit]['max'] <= max) {\n          yAxisData[element.unit]['max'] = Math.ceil(max / 10) * 10\n        }\n\n        let min = d3.min(element.data, function (d) {\n          return d.value\n        })\n        if (yAxisData[element.unit]['min'] >= min) {\n          if (min >= 0) {\n            yAxisData[element.unit]['min'] = 0\n          } else {\n            yAxisData[element.unit]['min'] = -Math.ceil(min / -10) * 10\n          }\n        }\n        element.lineStyle = 'dash'\n        element.linetype = 'monotone'\n        element.dotEnable = false\n      }, this)\n      this.handleWindowResize()\n      return yAxisData\n    },\n    margin () {\n      let margin = {\n        top: 30,\n        right: 40,\n        bottom: 20,\n        left:\n          Object.keys(this.yAxisData).length <= 0\n            ? this.marginAxis\n            : Object.keys(this.yAxisData).length * this.marginAxis\n      }\n      return margin\n    }\n  },\n  watch: {\n    graphData () {\n      let thresholds = []\n      let index = 0\n      this.graphData.forEach(function (element, ii) {\n        element.data.forEach(function (element, i) {\n          element.x = element.time\n          element.y = element.value\n        }, this)\n\n        let threshold = {\n          device_id: element.device_id,\n          name: element.name,\n          linetype: element.id.toString().endsWith('00') ? 'step' : 'monotone',\n          lineStyle: 'line',\n          unit: element.unit,\n          data: element.data,\n          xValue: 0,\n          yValue: 0,\n          opacity: 0,\n          id: index,\n          sigdigit: element.sigdigit,\n          deviceId: element.id\n        }\n        index++\n        thresholds.push(threshold)\n      }, this)\n      this.thresholds = thresholds\n    }\n  },\n  mounted () {\n    window.addEventListener('resize', this.handleWindowResize)\n    this.handleWindowResize()\n\n    this.eventGrid()\n  },\n  beforeDestroy: function () {\n    window.removeEventListener('resize', this.handleWindowResize)\n  },\n  methods: {\n    eventGrid () {\n      var lines = d3\n        .select(this.$el)\n        .select('svg')\n        .selectAll('#thresholdLine')\n        .node().childNodes\n      var tooltip = this.Root.selectAll('.tooltip')\n      var self = this\n\n      this.$nextTick(function () {\n        d3.select(this.$el)\n          .select('svg')\n          .selectAll('.dot')\n          .on('click', function (d) {\n            d3.selectAll('.active').classed('active', false)\n            d3.select(this).classed('active', true)\n\n            d3.select(this)\n              .transition()\n              .duration(400)\n              .attr('r', 50)\n              .transition()\n              .duration(400)\n              .attr('r', 7)\n\n            var time = self\n              .$date()\n              .format(\n                self.secondToHour(d3.select(this).attr('x')).toFixed(2),\n                'MM-DD HH:mm'\n              )\n\n            var ss =\n              time +\n              '<br>' +\n              d3.select(this).attr('name') +\n              ' : ' +\n              d3.select(this).attr('y') +\n              '<br>'\n            tooltip.html(ss)\n          })\n      })\n      d3.select(this.$el)\n        .select('svg')\n        .on('mouseover', function () {\n          d3.select(self.$el)\n            .select('svg')\n            .select('#circle')\n            .selectAll('circle')\n            .style('opacity', '1')\n          tooltip.transition().style('opacity', 1)\n        })\n      d3.select(this.$el).on(\n        'mouseleave',\n        function () {\n          d3.select(self.$el)\n            .select('svg')\n            .select('#circle')\n            .selectAll('circle')\n            .style('opacity', '0')\n          tooltip.transition().style('opacity', 0)\n          lines.forEach(function (element, i) {\n            self.thresholds[i].opacity = 0\n          })\n        },\n        this\n      )\n\n      d3.select(this.$el).on('mousemove', function () {\n        var mouse = d3.mouse(this)\n        mouse[0] -= self.margin.left\n        if (mouse[0] < 0) {\n          mouse[0] = 0\n        } else if (mouse[0] >= self.width) {\n          mouse[0] = self.width\n        }\n\n        var time = `<div style=\"margin-top:10px;margin-bottom:10px;text-align: center;font-weight: bold;\">\n          ${self\n    .$date()\n    .format(self.xScale.invert(mouse[0]), 'M/D HH:mm')}</div>`\n\n        lines.forEach((element, i) => {\n          var pos = element.getPointAtLength(mouse[0])\n          var beginning = 0\n          var end = element.getTotalLength()\n          var target = null\n\n          while (true) {\n            target = Math.floor((beginning + end) / 2)\n            pos = element.getPointAtLength(target)\n\n            if (\n              (target === end || target === beginning) &&\n              pos.x !== mouse[0]\n            ) {\n              break\n            }\n            if (pos.x > mouse[0]) end = target\n            else if (pos.x < mouse[0]) beginning = target\n            else {\n              // self.thresholds[i].opacity = 1\n              break // position found\n            }\n          }\n          self.$set(self.thresholds[i], 'xValue', pos.x)\n          self.$set(self.thresholds[i], 'yValue', pos.y)\n\n          const color = `color:${d3.schemeCategory10[i % 10]}`\n          let value = self.yScale(self.thresholds[i].unit).invert(pos.y)\n          const sigdigit = Math.pow(10, self.thresholds[i].sigdigit)\n          time += `<div style=\"margin-left:5px;margin-right:5px;margin-bottom:5px;${color}\">`\n          if (self.thresholds[i].deviceId.toString().endsWith('00')) {\n            time += `${self.thresholds[i].name} : ${\n              statusCode[value.toFixed(0)]\n            }</div>`\n          } else {\n            time += `${self.thresholds[i].name} : ${Math.floor(\n              value * sigdigit\n            ) / sigdigit} ${self.thresholds[i].unit}</div>`\n          }\n        })\n\n        if (tooltip.node()) {\n          let tooltipX = 0\n          if (mouse[0] < tooltip.node().getBoundingClientRect().width) {\n            tooltipX = mouse[0] + self.margin.left + 60 + 'px'\n          } else {\n            tooltipX =\n              mouse[0] +\n              self.margin.left -\n              tooltip.node().getBoundingClientRect().width -\n              20 +\n              'px'\n          }\n\n          tooltip\n            .html(time)\n            .style('left', tooltipX)\n            .style(\n              'top',\n              mouse[1] -\n                tooltip.node().getBoundingClientRect().height / 2 +\n                'px'\n            )\n            .style('padding', 2 + 'px')\n        }\n      })\n    },\n    handleWindowResize () {\n      this.getSize()\n    },\n    getSize () {\n      setTimeout(() => {\n        this.width =\n          this.$el.clientWidth - this.margin.left - this.margin.right\n        this.height =\n          this.$el.clientHeight - this.margin.top - this.margin.bottom\n      }, 1)\n    },\n    yScale (unit) {\n      if (unit !== undefined && this.yAxisData[unit]) {\n        return d3\n          .scaleLinear()\n          .domain([this.yAxisData[unit]['min'], this.yAxisData[unit]['max']])\n          .range([this.height, 0])\n      } else {\n        for (var index in this.yAxisData) {\n          return d3\n            .scaleLinear()\n            .domain([\n              this.yAxisData[index]['min'],\n              this.yAxisData[index]['max']\n            ])\n            .range([this.height, 0])\n        }\n      }\n    },\n    secondToHour (seconds) {\n      return addSeconds(this.xAxisData.min, seconds)\n    }\n  }\n}\n",{"version":3,"sources":["MonitorChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"MonitorChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"h-100\">\n    <svg :height=\"defineHeight\" class=\"h-100 w-100\">\n      <defsVue :id=\"id\" />\n      <g id=\"main\" :transform=\"'translate('+margin.left+ ','+margin.top+')'\">\n        <g id=\"grid\">\n          <vgridVue\n            ref=\"vgridVue\"\n            :x-scale=\"xScale\"\n            :isGrid=\"true\"\n            :width=\"width\"\n            :height=\"height\"\n          />\n          <hgridVue\n            ref=\"hgridVue\"\n            :yScales=\"yScales\"\n            :isGrid=\"true\"\n            :yAxisData=\"yAxisData\"\n            :width=\"width\"\n          />\n        </g>\n        <g id=\"line\">\n          <g id=\"thresholdLine\">\n            <lineVue\n              v-for=\"(item,index) in thresholds\"\n              :lineStyle=\"item.lineStyle\"\n              :lineType=\"item.linetype\"\n              :key=\"item.id\"\n              :x-scale=\"xScale\"\n              :y-scale=\"yScale(item.unit)\"\n              :parameters=\"item.data\"\n              :index=\"index\"\n              :xScaleFunction=\"secondToHour\"\n            />\n          </g>\n        </g>\n        <g id=\"circle\">\n          <circleTextVue\n            v-for=\"(item,index) in thresholds\"\n            :key=\"item.id\"\n            :x-scale=\"xScale\"\n            :y-scale=\"yScale(item.unit)\"\n            :xValue=\"item.xValue\"\n            :opacity=\"item.opacity\"\n            :yValue=\"item.yValue\"\n            :index=\"index\"\n            :unit=\"item.unit\"\n            :deviceId=\"item.deviceId\"\n          />\n        </g>\n        <g id=\"legend\">\n          <legendVue\n            v-for=\"(item,index) in thresholds\"\n            :key=\"index\"\n            :index=\"index\"\n            :name=\"item.name\"\n            :posX=\"width\"\n          />\n        </g>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { addSeconds } from 'date-fns'\nimport vgridVue from '@/components/chart/vgridVue'\nimport hgridVue from '@/components/chart/hgridVue'\nimport lineVue from '@/components/chart/lineVue'\nimport circleTextVue from '@/components/chart/circleTextVue'\nimport legendVue from '@/components/chart/legendVue'\nimport defsVue from '@/components/chart/defsVue'\nimport { statusCode } from '@/constants/config'\n\nimport * as d3 from 'd3'\n\nexport default {\n  layout: 'dashboard',\n  components: {\n    vgridVue,\n    hgridVue,\n    lineVue,\n    circleTextVue,\n    legendVue,\n    defsVue\n  },\n  props: {\n    defineHeight: {\n      required: false,\n      type: Number,\n      default: 366\n    },\n    id: {\n      required: true,\n      type: String\n    },\n    xAxisData: {\n      type: Object,\n      required: true\n    },\n    graphData: {\n      required: true,\n      type: Array\n    }\n  },\n  data: function () {\n    return {\n      difineMax: 30,\n      marginAxis: 40,\n      width: 0,\n      height: 0,\n      thresholds: []\n    }\n  },\n  computed: {\n    Root: function () {\n      const Root = d3.select(this.$el)\n      Root.append('div')\n        .attr('class', 'tooltip')\n        .style('opacity', 0)\n      return Root\n    },\n    Svg: function () {\n      return this.Root.select('svg')\n    },\n    Ggrid: function () {\n      return this.Svg.select('.grid')\n    },\n    svgWidth: function () {\n      return this.width + this.margin.left + this.margin.right\n    },\n    svgHeight: function () {\n      return this.height + this.margin.top + this.margin.bottom\n    },\n    xScale: function () {\n      return d3\n        .scaleTime()\n        .domain([\n          this.$date().parse(this.xAxisData.min),\n          this.$date().parse(this.xAxisData.max)\n        ])\n        .range([0, this.width])\n    },\n    yScales: function () {\n      let yScales = this.yAxisData\n      for (var index in this.yAxisData) {\n        yScales[index]['yScale'] = d3\n          .scaleLinear()\n          .domain([this.yAxisData[index]['min'], this.yAxisData[index]['max']])\n          .range([this.height, 0])\n      }\n      return yScales\n    },\n    yAxisData: function () {\n      let yAxisData = {}\n      this.thresholds.forEach(function (element) {\n        if (yAxisData[element.unit] === undefined) {\n          yAxisData[element.unit] = {\n            max: this.difineMax,\n            min: 0\n          }\n        }\n        let max = d3.max(element.data, function (d) {\n          return d.value\n        })\n        if (yAxisData[element.unit]['max'] <= max) {\n          yAxisData[element.unit]['max'] = Math.ceil(max / 10) * 10\n        }\n\n        let min = d3.min(element.data, function (d) {\n          return d.value\n        })\n        if (yAxisData[element.unit]['min'] >= min) {\n          if (min >= 0) {\n            yAxisData[element.unit]['min'] = 0\n          } else {\n            yAxisData[element.unit]['min'] = -Math.ceil(min / -10) * 10\n          }\n        }\n        element.lineStyle = 'dash'\n        element.linetype = 'monotone'\n        element.dotEnable = false\n      }, this)\n      this.handleWindowResize()\n      return yAxisData\n    },\n    margin () {\n      let margin = {\n        top: 30,\n        right: 40,\n        bottom: 20,\n        left:\n          Object.keys(this.yAxisData).length <= 0\n            ? this.marginAxis\n            : Object.keys(this.yAxisData).length * this.marginAxis\n      }\n      return margin\n    }\n  },\n  watch: {\n    graphData () {\n      let thresholds = []\n      let index = 0\n      this.graphData.forEach(function (element, ii) {\n        element.data.forEach(function (element, i) {\n          element.x = element.time\n          element.y = element.value\n        }, this)\n\n        let threshold = {\n          device_id: element.device_id,\n          name: element.name,\n          linetype: element.id.toString().endsWith('00') ? 'step' : 'monotone',\n          lineStyle: 'line',\n          unit: element.unit,\n          data: element.data,\n          xValue: 0,\n          yValue: 0,\n          opacity: 0,\n          id: index,\n          sigdigit: element.sigdigit,\n          deviceId: element.id\n        }\n        index++\n        thresholds.push(threshold)\n      }, this)\n      this.thresholds = thresholds\n    }\n  },\n  mounted () {\n    window.addEventListener('resize', this.handleWindowResize)\n    this.handleWindowResize()\n\n    this.eventGrid()\n  },\n  beforeDestroy: function () {\n    window.removeEventListener('resize', this.handleWindowResize)\n  },\n  methods: {\n    eventGrid () {\n      var lines = d3\n        .select(this.$el)\n        .select('svg')\n        .selectAll('#thresholdLine')\n        .node().childNodes\n      var tooltip = this.Root.selectAll('.tooltip')\n      var self = this\n\n      this.$nextTick(function () {\n        d3.select(this.$el)\n          .select('svg')\n          .selectAll('.dot')\n          .on('click', function (d) {\n            d3.selectAll('.active').classed('active', false)\n            d3.select(this).classed('active', true)\n\n            d3.select(this)\n              .transition()\n              .duration(400)\n              .attr('r', 50)\n              .transition()\n              .duration(400)\n              .attr('r', 7)\n\n            var time = self\n              .$date()\n              .format(\n                self.secondToHour(d3.select(this).attr('x')).toFixed(2),\n                'MM-DD HH:mm'\n              )\n\n            var ss =\n              time +\n              '<br>' +\n              d3.select(this).attr('name') +\n              ' : ' +\n              d3.select(this).attr('y') +\n              '<br>'\n            tooltip.html(ss)\n          })\n      })\n      d3.select(this.$el)\n        .select('svg')\n        .on('mouseover', function () {\n          d3.select(self.$el)\n            .select('svg')\n            .select('#circle')\n            .selectAll('circle')\n            .style('opacity', '1')\n          tooltip.transition().style('opacity', 1)\n        })\n      d3.select(this.$el).on(\n        'mouseleave',\n        function () {\n          d3.select(self.$el)\n            .select('svg')\n            .select('#circle')\n            .selectAll('circle')\n            .style('opacity', '0')\n          tooltip.transition().style('opacity', 0)\n          lines.forEach(function (element, i) {\n            self.thresholds[i].opacity = 0\n          })\n        },\n        this\n      )\n\n      d3.select(this.$el).on('mousemove', function () {\n        var mouse = d3.mouse(this)\n        mouse[0] -= self.margin.left\n        if (mouse[0] < 0) {\n          mouse[0] = 0\n        } else if (mouse[0] >= self.width) {\n          mouse[0] = self.width\n        }\n\n        var time = `<div style=\"margin-top:10px;margin-bottom:10px;text-align: center;font-weight: bold;\">\n          ${self\n    .$date()\n    .format(self.xScale.invert(mouse[0]), 'M/D HH:mm')}</div>`\n\n        lines.forEach((element, i) => {\n          var pos = element.getPointAtLength(mouse[0])\n          var beginning = 0\n          var end = element.getTotalLength()\n          var target = null\n\n          while (true) {\n            target = Math.floor((beginning + end) / 2)\n            pos = element.getPointAtLength(target)\n\n            if (\n              (target === end || target === beginning) &&\n              pos.x !== mouse[0]\n            ) {\n              break\n            }\n            if (pos.x > mouse[0]) end = target\n            else if (pos.x < mouse[0]) beginning = target\n            else {\n              // self.thresholds[i].opacity = 1\n              break // position found\n            }\n          }\n          self.$set(self.thresholds[i], 'xValue', pos.x)\n          self.$set(self.thresholds[i], 'yValue', pos.y)\n\n          const color = `color:${d3.schemeCategory10[i % 10]}`\n          let value = self.yScale(self.thresholds[i].unit).invert(pos.y)\n          const sigdigit = Math.pow(10, self.thresholds[i].sigdigit)\n          time += `<div style=\"margin-left:5px;margin-right:5px;margin-bottom:5px;${color}\">`\n          if (self.thresholds[i].deviceId.toString().endsWith('00')) {\n            time += `${self.thresholds[i].name} : ${\n              statusCode[value.toFixed(0)]\n            }</div>`\n          } else {\n            time += `${self.thresholds[i].name} : ${Math.floor(\n              value * sigdigit\n            ) / sigdigit} ${self.thresholds[i].unit}</div>`\n          }\n        })\n\n        if (tooltip.node()) {\n          let tooltipX = 0\n          if (mouse[0] < tooltip.node().getBoundingClientRect().width) {\n            tooltipX = mouse[0] + self.margin.left + 60 + 'px'\n          } else {\n            tooltipX =\n              mouse[0] +\n              self.margin.left -\n              tooltip.node().getBoundingClientRect().width -\n              20 +\n              'px'\n          }\n\n          tooltip\n            .html(time)\n            .style('left', tooltipX)\n            .style(\n              'top',\n              mouse[1] -\n                tooltip.node().getBoundingClientRect().height / 2 +\n                'px'\n            )\n            .style('padding', 2 + 'px')\n        }\n      })\n    },\n    handleWindowResize () {\n      this.getSize()\n    },\n    getSize () {\n      setTimeout(() => {\n        this.width =\n          this.$el.clientWidth - this.margin.left - this.margin.right\n        this.height =\n          this.$el.clientHeight - this.margin.top - this.margin.bottom\n      }, 1)\n    },\n    yScale (unit) {\n      if (unit !== undefined && this.yAxisData[unit]) {\n        return d3\n          .scaleLinear()\n          .domain([this.yAxisData[unit]['min'], this.yAxisData[unit]['max']])\n          .range([this.height, 0])\n      } else {\n        for (var index in this.yAxisData) {\n          return d3\n            .scaleLinear()\n            .domain([\n              this.yAxisData[index]['min'],\n              this.yAxisData[index]['max']\n            ])\n            .range([this.height, 0])\n        }\n      }\n    },\n    secondToHour (seconds) {\n      return addSeconds(this.xAxisData.min, seconds)\n    }\n  }\n}\n</script>\n\n<style >\ndiv.tooltip {\n  position: absolute;\n  /* text-align: center; */\n\n  /* width: auto;\n  height: auto;\n  padding: 2px;\n  font: 12px sans-serif;\n  background: lightsteelblue;\n  border: 0px;\n  border-radius: 8px;\n  pointer-events: none; */\n\n  border-radius: 10px;\n  padding: 6px;\n  color: #666;\n  background: rgba(255, 255, 255, 0.9);\n  border: solid 2px rgba(230, 230, 230, 0.8);\n  font-size: 14px;\n}\n</style>\n"]}]}