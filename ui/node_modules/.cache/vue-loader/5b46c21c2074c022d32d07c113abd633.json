{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/views/app/page/dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/views/app/page/dashboard.vue","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable standard/computed-property-even-spacing */\nimport preValue from '@/components/preValue'\nimport colorTemplate from '@/components/colorTemplate'\nimport { statusCode } from '@/constants/config'\nimport DeviceState from '@/components/DeviceState'\nimport screenfull from 'screenfull'\nimport Transfer from '@/components/Transfer'\nimport Retractable from '@/components/Retractable'\nimport RetSwitch from '@/components/Switch'\nimport LoadChart from '@/components/LoadChart'\nimport HouseTempChart from '@/components/HouseTempChart'\nimport { swiper, swiperSlide } from 'vue-awesome-swiper'\nimport 'swiper/dist/css/swiper.css'\nimport { Hooper, Slide } from 'hooper'\nimport 'hooper/dist/hooper.css'\n\nexport default {\n  components: {\n    preValue,\n    colorTemplate,\n    DeviceState,\n    swiper,\n    swiperSlide,\n    Retractable,\n    RetSwitch,\n    LoadChart,\n    Hooper,\n    Slide,\n    Transfer,\n    HouseTempChart\n  },\n  computed: {\n    fields () {\n      return this.$store.getters['field/getFields']\n    },\n    greenHouse () {\n      return this.fields.filter(item => item.fieldtype === 'greenhouse')\n    },\n    observationData () {\n      // eslint-disable-next-line vue/no-side-effects-in-computed-properties\n      return this.$store.getters['observation/getObservations']\n    },\n    deviceData () {\n      return this.$store.getters['device/getData']\n    },\n    deviceField () {\n      return this.$store.getters['device/getAllFieldDevices']\n    },\n    fieldData () {\n      let dataItems = {}\n      for (const key in this.deviceField) {\n        dataItems[key] = []\n        const devics = this.deviceField[key]\n        for (const device of devics) {\n          for (const data of device.datas) {\n            dataItems[key].push({\n              id: data.id,\n              name:\n                (device.name ? device.name : device.spec.Name) +\n                ' ' +\n                data.name,\n              sigdigit: data.sigdigit\n            })\n          }\n        }\n      }\n      return dataItems\n    },\n    getSensor () {\n      let device = {}\n      if (this.deviceField) {\n        for (const field in this.deviceField) {\n          device[field] = this.deviceField[field].filter(device => {\n            return device.spec.Class === 'sensor'\n          })\n        }\n      }\n      return device\n    },\n    getRetractable () {\n      let device = {}\n      if (this.deviceField) {\n        for (const field in this.deviceField) {\n          device[field] = this.deviceField[field].filter(device => {\n            return (\n              device.spec.Class === 'actuator' &&\n              device.spec.Type.startsWith('retractable')\n            )\n          })\n        }\n      }\n      return device\n    },\n    getSwitch () {\n      let device = {}\n      if (this.deviceField) {\n        for (const field in this.deviceField) {\n          device[field] = this.deviceField[field].filter(device => {\n            return (\n              device.spec.Class === 'actuator' &&\n              device.spec.Type.startsWith('switch')\n            )\n          })\n        }\n      }\n      return device\n    }\n  },\n  data () {\n    let self = this\n    return {\n      statusCode: statusCode,\n      dialogTableVisible: false,\n      activeName: 'retractable',\n      tempObservationData: {},\n      activeIndex: 0,\n      swiperOption: {\n        /* autoplay: 3000, */\n        initialSlide: 0,\n        loop: false,\n        autoplayDisableOnInteraction: false,\n        grabCursor: true,\n        /* setWrapperSize: true,\n          autoHeight: true, */\n        mousewheelControl: true,\n        paginationClickable: true,\n        spaceBetween: 30,\n        pagination: {\n          el: '.swiper-pagination',\n          type: 'progress'\n        },\n        navigation: {\n          nextEl: '.swiper-button-next',\n          prevEl: '.swiper-button-prev'\n        },\n        on: {\n          slideChange () {\n            self.activeIndex = this.activeIndex\n          }\n        }\n      }\n    }\n  },\n  watch: {\n    observationData (newValue, oldValue) {\n      for (const key in newValue) {\n        if (!this.tempObservationData.hasOwnProperty(key)) {\n          this.tempObservationData[key] = newValue[key]\n        }\n        if (this.tempObservationData[key].nvalue !== newValue[key].nvalue) {\n          this.tempObservationData[key].nvalue = newValue[key].nvalue\n        }\n      }\n      // this.tempObservationData = this._.cloneDeep(newValue)\n    }\n  },\n  created () {\n    screenfull.request()\n  },\n  destroyed () {\n    screenfull.exit()\n  },\n  mounted () {},\n  methods: {\n    getObsData (data) {\n      if (data) {\n        if (data.unit === '상태') {\n          return this.statusCode[data.nvalue]\n        } else {\n          return `${data.nvalue} ${data.unit}`\n        }\n      } else {\n        return '---'\n      }\n    },\n    setUiinfo (type) {\n      this.dialogTableVisible = true\n    },\n    switchTime (data1, data2) {\n      if (isNaN(data1 / data2)) {\n        return 0\n      }\n      return Math.round((data1 / data2) * 100)\n    },\n    slideCount (data) {\n      return Math.ceil(data.length / 5)\n    },\n    sigdigt (data) {\n      const value = Math.pow(10, data.sigdigit)\n      return Math.floor(data.nvalue * value) / value\n    },\n    color (index) {\n      if (index % 4 === 0) {\n        return 'bg-primary-400'\n      } else if (index % 4 === 1) {\n        return 'bg-danger-400'\n      } else if (index % 4 === 2) {\n        return 'bg-indigo-400'\n      } else if (index % 4 === 3) {\n        return 'bg-success-400'\n      }\n    }\n  }\n}\n",{"version":3,"sources":["dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"dashboard.vue","sourceRoot":"src/views/app/page","sourcesContent":["<template>\n  <div style=\"padding-top:65px;height:100%\">\n    <div v-if=\"greenHouse.length === 0\" style=\"height:100%;text-align: center;\">\n      <div style=\"margin: 0;top:50%;left:50%;position: absolute;-ms-transform: translateX(-50%) translateY(-50%);transform: translateX(-50%) translateY(-50%);\">\n        <img src=\"@/assets/img/nodata.png\" style=\"height:250px\"/>\n        <br>\n        <h2>구역 데이터가 없습니다.</h2><br><h2>구역을 추가 하세요.</h2>\n      </div>\n    </div>\n    <template v-else>\n      <Transfer :dialogTableVisible=\"dialogTableVisible\" />\n      <swiper :options=\"swiperOption\" style=\"height:100%\">\n        <swiper-slide v-for=\"house in greenHouse\" :key=\"house.id\">\n          <div style=\"height:100%\">\n            <div class=\"row pT-20 pB-20\">\n              <div class=\"col-lg-12\">\n                <!-- <div class=\"my-sub-title pL-20\"># 실시간 센서</div> -->\n                <b-card>\n                  <div v-if=\"getSensor[house.id].length === 0\">\n                    <img src=\"@/assets/img/nodata.png\" class=\"mr-3\" style=\"height:20px;\"/>등록된 센서 데이터가 없습니다.\n                  </div>\n                  <infinite-slide-bar duration=\"60s\" v-else>\n                    <div class=\"items\">\n                      <div v-for=\"item in getSensor[house.id]\" :key=\"item.id\">\n                        <div>\n                          <div\n                            class=\"pL-15 pR-15 text-muted\"\n                            :value=\"observationData[(100000 + item.id) * 100 + 1].nvalue\"\n                          >{{item.name}}</div>\n                          <colorTemplate\n                            :value=\"observationData[(100000 + item.id) * 100 + 1] | digit\"\n                            class=\"pL-15 pR-15\"\n                          >\n                            <div style=\"font-size:20px\">\n                              {{observationData[(100000 + item.id) * 100 + 1] | digit}}\n                              <preValue :value=\"observationData[(100000 + item.id) * 100 + 1]\"></preValue>\n                            </div>\n                          </colorTemplate>\n                        </div>\n                      </div>\n                    </div>\n                  </infinite-slide-bar>\n                </b-card>\n              </div>\n            </div>\n            <div class=\"row\" style=\"height:90%\">\n              <div class=\"col-lg-6\" style=\"height:95%\">\n                <b-card style=\"height:100%\">\n                  <div class=\"row\" style=\"height:35%;\">\n                    <div class=\"col-lg-6\" style=\"padding:0px;\">\n                      <LoadChart\n                        style=\"height:100%\"\n                        :fieldId=\"house.id\"\n                        :uiInfo=\"house.uiinfo['dashboard']\"\n                        uiType=\"ventilation\"\n                        :obs=\"observationData\"\n                        name=\"환기 부하\"\n                      />\n                    </div>\n                    <div class=\"col-lg-6\" style=\"padding-right:0px\">\n                      <LoadChart\n                        style=\"height:100%\"\n                        :fieldId=\"house.id\"\n                        :uiInfo=\"house.uiinfo['dashboard']\"\n                        uiType=\"heating\"\n                        :obs=\"observationData\"\n                        name=\"난방 부하\"\n                      />\n                    </div>\n                  </div>\n                  <!-- style=\"min-height:35%;margin-bottom:1% -->\n                  <!-- style=\"height:61%;\" class=\"pB-20\" -->\n                  <HouseTempChart\n                    style=\"height:60%;\"\n                    :uiInfo=\"house.uiinfo['dashboard']\"\n                    uiType=\"temp\"\n                    :sensor=\"getSensor[0].concat(getSensor[house.id])\"\n                    :field=\"house\"\n                    :obs=\"observationData\"\n                    name=\"온실 온도\"\n                  />\n                </b-card>\n              </div>\n              <div class=\"col-lg-6\" style=\"height:95%\">\n                <b-card style=\"height:100%\">\n                  <div class=\"row\" style=\"height:50%\">\n                    <div class=\"col-lg-6\" style=\"padding:0px;height:100%\">\n                      <Retractable\n                        v-if=\"house.uiinfo['dashboard'].retractable.type.select === 'ratio'\"\n                        style=\"height:100%\"\n                        :uiInfo=\"house.uiinfo['dashboard'].retractable\"\n                        :obs=\"observationData\"\n                        :device=\"deviceField[house.id]\"\n                        :item=\"getRetractable[house.id]\"\n                        path=\"retractable\"\n                        type=\"ratio\"\n                        :fieldId=\"house.id\"\n                      />\n                      <RetSwitch\n                        v-if=\"house.uiinfo['dashboard'].retractable.type.select === 'time'\"\n                        style=\"height:100%\"\n                        :uiInfo=\"house.uiinfo['dashboard'].retractable\"\n                        :obs=\"observationData\"\n                        :device=\"deviceField[house.id]\"\n                        :item=\"getRetractable[house.id]\"\n                        path=\"retractable\"\n                        type=\"time\"\n                        :fieldId=\"house.id\"\n                      />\n                    </div>\n                    <div class=\"col-lg-6\" style=\"height:100%\">\n                      <div v-if=\"getRetractable[house.id].length === 0\">\n                        <div style=\"height:100%;text-align: center;\">\n                          <div style=\"margin: 0;top:50%;left:50%;position: absolute;-ms-transform: translateX(-50%) translateY(-50%);transform: translateX(-50%) translateY(-50%);\">\n                            <img src=\"@/assets/img/nodata.png\" style=\"height:40px\"/>\n                              <br><br>\n                              <div>등록된 개폐기 데이터가 없습니다.</div>\n                          </div>\n                        </div>\n                      </div>\n                      <Hooper v-else\n                        :autoPlay=\"true\"\n                        :infiniteScroll=\"true\"\n                        :playSpeed=\"5000\"\n                        :transition=\"1000\"\n                        style=\"height:100%\"\n                      >\n                        <Slide v-for=\"slide in slideCount(getRetractable[house.id])\" :key=\"slide\">\n                          <div v-for=\"item in 5\" :key=\"item\">\n                            <div\n                              v-if=\"getRetractable[house.id][((slide-1)*5)+item-1]\"\n                              class=\"mT-10 pL-20\"\n                            >\n                              <div\n                                v-if=\"house.uiinfo['dashboard'].retractable.type.select === 'ratio'\"\n                              >\n                                <div class=\"mB-5\" style=\"font-weight: 900\">\n                                  {{getRetractable[house.id][((slide-1)*5)+item-1].name}}\n                                  <DeviceState\n                                    :wrap=\"true\"\n                                    :value=\"getObsData(observationData[(100000 + getRetractable[house.id][((slide-1)*5)+item-1].id) * 100])\"\n                                  />\n                                </div>\n                                <el-progress\n                                  v-if=\"observationData[(100000 + getRetractable[house.id][((slide-1)*5)+item-1].id) * 100 + 2]\"\n                                  :text-inside=\"true\"\n                                  :stroke-width=\"26\"\n                                  :percentage=\"sigdigt(observationData[(100000 + getRetractable[house.id][((slide-1)*5)+item-1].id) * 100 + 2])\"\n                                ></el-progress>\n                              </div>\n                              <div\n                                v-if=\"house.uiinfo['dashboard'].retractable.type.select === 'time'\"\n                              >\n                                <div class=\"mB-5\" style=\"font-weight: 900\">\n                                  {{getRetractable[house.id][((slide-1)*5)+item-1].name}}\n                                  <DeviceState\n                                    :wrap=\"true\"\n                                    :value=\"getObsData(observationData[(100000 + getRetractable[house.id][((slide-1)*5)+item-1].id) * 100])\"\n                                  />\n                                </div>\n                                <template v-if=\"observationData[(100000 + getRetractable[house.id][((slide-1)*5)+item-1].id) * 100 + 4]\">\n                                  남은 시간 {{observationData[(100000 + getRetractable[house.id][((slide-1)*5)+item-1].id) * 100 + 4].nvalue}}초\n                                </template>\n                                <template>\n                                  남은시간 미지원\n                                </template>\n                                <br />\n                              </div>\n                            </div>\n                          </div>\n                        </Slide>\n                      </Hooper>\n                    </div>\n                  </div>\n                  <div class=\"row\" style=\"height:50%\">\n                    <div class=\"col-lg-6\" style=\"padding:0px;\">\n                      <RetSwitch\n                        style=\"height:100%\"\n                        :uiInfo=\"house.uiinfo['dashboard'].switch\"\n                        :obs=\"observationData\"\n                        :device=\"deviceField[house.id]\"\n                        :item=\"getSwitch[house.id]\"\n                        :fieldId=\"house.id\"\n                        path=\"switch\"\n                      />\n                    </div>\n                    <div class=\"col-lg-6\" style=\"height:100%\">\n                      <div v-if=\"getSwitch[house.id].length === 0\">\n                        <div style=\"height:100%;text-align: center;\">\n                          <div style=\"margin: 0;top:50%;left:50%;position: absolute;-ms-transform: translateX(-50%) translateY(-50%);transform: translateX(-50%) translateY(-50%);\">\n                            <img src=\"@/assets/img/nodata.png\" style=\"height:40px\"/>\n                              <br><br>\n                              <div>등록된 스위치 데이터가 없습니다.</div>\n                          </div>\n                        </div>\n                      </div>\n                      <Hooper\n                        v-else\n                        :autoPlay=\"true\"\n                        :infiniteScroll=\"true\"\n                        :playSpeed=\"5000\"\n                        :transition=\"1000\"\n                        style=\"height:100%\"\n                      >\n                        <Slide v-for=\"slide in slideCount(getSwitch[house.id])\" :key=\"slide\">\n                          <div v-for=\"item in 5\" :key=\"item\">\n                            <div\n                              v-if=\"getSwitch[house.id][((slide-1)*5)+item-1]\"\n                              class=\"mT-10 pL-20\"\n                            >\n                              <div>\n                                <div class=\"mB-5\" style=\"font-weight: 900\">\n                                  {{getSwitch[house.id][((slide-1)*5)+item-1].name}}\n                                  <DeviceState\n                                    :wrap=\"true\"\n                                    :value=\"getObsData(observationData[(100000 + getSwitch[house.id][((slide-1)*5)+item-1].id) * 100])\"\n                                  />\n                                </div>\n                                <template v-if=\"observationData[(100000 + getSwitch[house.id][((slide-1)*5)+item-1].id) * 100 + 4]\">\n                                  남은 시간 {{observationData[(100000 + getSwitch[house.id][((slide-1)*5)+item-1].id) * 100 + 4].nvalue}}초\n                                </template>\n                                <template>\n                                  남은시간 미지원\n                                </template>\n                                <br />\n                              </div>\n                            </div>\n                          </div>\n                        </Slide>\n                      </Hooper>\n                    </div>\n                  </div>\n                </b-card>\n              </div>\n            </div>\n          </div>\n        </swiper-slide>\n      </swiper>\n\n      <div class=\"swiper-pagination\" slot=\"pagination \"></div>\n      <div class=\"swiper-button-prev\" slot=\"button-prev \"></div>\n      <div class=\"swiper-button-next\" slot=\"button-next \"></div>\n    </template>\n  </div>\n</template>\n\n<script>\n/* eslint-disable standard/computed-property-even-spacing */\nimport preValue from '@/components/preValue'\nimport colorTemplate from '@/components/colorTemplate'\nimport { statusCode } from '@/constants/config'\nimport DeviceState from '@/components/DeviceState'\nimport screenfull from 'screenfull'\nimport Transfer from '@/components/Transfer'\nimport Retractable from '@/components/Retractable'\nimport RetSwitch from '@/components/Switch'\nimport LoadChart from '@/components/LoadChart'\nimport HouseTempChart from '@/components/HouseTempChart'\nimport { swiper, swiperSlide } from 'vue-awesome-swiper'\nimport 'swiper/dist/css/swiper.css'\nimport { Hooper, Slide } from 'hooper'\nimport 'hooper/dist/hooper.css'\n\nexport default {\n  components: {\n    preValue,\n    colorTemplate,\n    DeviceState,\n    swiper,\n    swiperSlide,\n    Retractable,\n    RetSwitch,\n    LoadChart,\n    Hooper,\n    Slide,\n    Transfer,\n    HouseTempChart\n  },\n  computed: {\n    fields () {\n      return this.$store.getters['field/getFields']\n    },\n    greenHouse () {\n      return this.fields.filter(item => item.fieldtype === 'greenhouse')\n    },\n    observationData () {\n      // eslint-disable-next-line vue/no-side-effects-in-computed-properties\n      return this.$store.getters['observation/getObservations']\n    },\n    deviceData () {\n      return this.$store.getters['device/getData']\n    },\n    deviceField () {\n      return this.$store.getters['device/getAllFieldDevices']\n    },\n    fieldData () {\n      let dataItems = {}\n      for (const key in this.deviceField) {\n        dataItems[key] = []\n        const devics = this.deviceField[key]\n        for (const device of devics) {\n          for (const data of device.datas) {\n            dataItems[key].push({\n              id: data.id,\n              name:\n                (device.name ? device.name : device.spec.Name) +\n                ' ' +\n                data.name,\n              sigdigit: data.sigdigit\n            })\n          }\n        }\n      }\n      return dataItems\n    },\n    getSensor () {\n      let device = {}\n      if (this.deviceField) {\n        for (const field in this.deviceField) {\n          device[field] = this.deviceField[field].filter(device => {\n            return device.spec.Class === 'sensor'\n          })\n        }\n      }\n      return device\n    },\n    getRetractable () {\n      let device = {}\n      if (this.deviceField) {\n        for (const field in this.deviceField) {\n          device[field] = this.deviceField[field].filter(device => {\n            return (\n              device.spec.Class === 'actuator' &&\n              device.spec.Type.startsWith('retractable')\n            )\n          })\n        }\n      }\n      return device\n    },\n    getSwitch () {\n      let device = {}\n      if (this.deviceField) {\n        for (const field in this.deviceField) {\n          device[field] = this.deviceField[field].filter(device => {\n            return (\n              device.spec.Class === 'actuator' &&\n              device.spec.Type.startsWith('switch')\n            )\n          })\n        }\n      }\n      return device\n    }\n  },\n  data () {\n    let self = this\n    return {\n      statusCode: statusCode,\n      dialogTableVisible: false,\n      activeName: 'retractable',\n      tempObservationData: {},\n      activeIndex: 0,\n      swiperOption: {\n        /* autoplay: 3000, */\n        initialSlide: 0,\n        loop: false,\n        autoplayDisableOnInteraction: false,\n        grabCursor: true,\n        /* setWrapperSize: true,\n          autoHeight: true, */\n        mousewheelControl: true,\n        paginationClickable: true,\n        spaceBetween: 30,\n        pagination: {\n          el: '.swiper-pagination',\n          type: 'progress'\n        },\n        navigation: {\n          nextEl: '.swiper-button-next',\n          prevEl: '.swiper-button-prev'\n        },\n        on: {\n          slideChange () {\n            self.activeIndex = this.activeIndex\n          }\n        }\n      }\n    }\n  },\n  watch: {\n    observationData (newValue, oldValue) {\n      for (const key in newValue) {\n        if (!this.tempObservationData.hasOwnProperty(key)) {\n          this.tempObservationData[key] = newValue[key]\n        }\n        if (this.tempObservationData[key].nvalue !== newValue[key].nvalue) {\n          this.tempObservationData[key].nvalue = newValue[key].nvalue\n        }\n      }\n      // this.tempObservationData = this._.cloneDeep(newValue)\n    }\n  },\n  created () {\n    screenfull.request()\n  },\n  destroyed () {\n    screenfull.exit()\n  },\n  mounted () {},\n  methods: {\n    getObsData (data) {\n      if (data) {\n        if (data.unit === '상태') {\n          return this.statusCode[data.nvalue]\n        } else {\n          return `${data.nvalue} ${data.unit}`\n        }\n      } else {\n        return '---'\n      }\n    },\n    setUiinfo (type) {\n      this.dialogTableVisible = true\n    },\n    switchTime (data1, data2) {\n      if (isNaN(data1 / data2)) {\n        return 0\n      }\n      return Math.round((data1 / data2) * 100)\n    },\n    slideCount (data) {\n      return Math.ceil(data.length / 5)\n    },\n    sigdigt (data) {\n      const value = Math.pow(10, data.sigdigit)\n      return Math.floor(data.nvalue * value) / value\n    },\n    color (index) {\n      if (index % 4 === 0) {\n        return 'bg-primary-400'\n      } else if (index % 4 === 1) {\n        return 'bg-danger-400'\n      } else if (index % 4 === 2) {\n        return 'bg-indigo-400'\n      } else if (index % 4 === 3) {\n        return 'bg-success-400'\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\ndiv >>> .el-progress-bar__innerText {\n  color: rgba(27, 61, 252, 0.712);\n}\n.my-sub-title {\n  font-size: 21px;\n}\n.my-sub-title,\n.my-title {\n  float: left;\n  width: 100%;\n  font-weight: 700;\n  margin: 10px 0;\n}\n.items {\n  display: flex;\n  justify-content: space-around;\n}\n</style>\n\n<style>\n/* .navbar {\n  margin-bottom: 5px !important;\n} */\n\n.navbar-nav.navbar-center {\n  position: absolute;\n  left: 50%;\n  -webkit-transform: translatex(-50%);\n  transform: translatex(-50%);\n}\n\n.dashboard {\n  height: calc(100% - 65px);\n}\n\n.progress-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n.progress-list > li + li {\n  margin-top: 20px;\n}\n\n.progress-list > li > label {\n  display: block;\n}\n\n.progress-list > li span {\n  float: right;\n  display: block;\n}\n</style>\n"]}]}