{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/components/LineChart.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/components/LineChart.vue","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndiv.tooltip {\n  position: absolute;\n  text-align: center;\n  pointer-events: none;\n\n  /* width: auto;\n  height: auto;\n  padding: 2px;\n  font: 12px sans-serif;\n  background: lightsteelblue;\n  border: 0px;\n  border-radius: 8px;\n  pointer-events: none; */\n\n  border-radius: 10px;\n  padding: 6px;\n  color: #666;\n  background: rgba(255, 255, 255, 0.9);\n  border: solid 2px rgba(230, 230, 230, 0.8);\n  font-size: 14px;\n  text-align: center;\n}\n",{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+pBA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"LineChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"h-100\">\n    <svg :height=\"defineHeight\" style=\"width:100%;height:100%\">\n      <defsVue id=\"detail\" />\n      <g id=\"main\" :transform=\"'translate('+margin.left+ ','+margin.top+')'\">\n        <g id=\"grid\">\n          <vgridVue\n            ref=\"vgridVue\"\n            :x-scale=\"xScale\"\n            :isGrid=\"false\"\n            :width=\"width\"\n            :height=\"height\"\n          />\n          <hgridVue\n            ref=\"hgridVue\"\n            :yScales=\"yScales\"\n            :isGrid=\"false\"\n            :yAxisData=\"yAxisData\"\n            :width=\"width\"\n          />\n        </g>\n        <imageVue\n          v-for=\"(item,index) in sunLines\"\n          :key=\"index\"\n          :x-scale=\"xScale\"\n          :y-scale=\"yScale()\"\n          :parameters=\"item\"\n          :posY=\"height\"\n          :index=\"index\"\n          :xScaleFunction=\"secondToHour\"\n        />\n        <g id=\"line\">\n          <g id=\"sectionLine\">\n            <lineVue\n              v-for=\"(item,index) in getSections\"\n              :key=\"index\"\n              :x-scale=\"xScale\"\n              :y-scale=\"yScale()\"\n              :parameters=\"item.data\"\n              :index=\"0\"\n              :xScaleFunction=\"secondToHour\"\n              lineStyle=\"section\"\n              lineType=\"straight\"\n            />\n          </g>\n          <g id=\"thresholdLine\">\n            <lineVue\n              v-for=\"(item,index) in chartData\"\n              :lineStyle=\"item.lineStyle\"\n              :lineType=\"item.linetype\"\n              :key=\"item.id\"\n              :x-scale=\"xScale\"\n              :y-scale=\"yScale(item.unit)\"\n              :parameters=\"item.data\"\n              :index=\"index\"\n              :xScaleFunction=\"secondToHour\"\n            />\n          </g>\n        </g>\n        <g id=\"bullet\">\n          <bulletVue\n            v-for=\"(item,index) in chartData\"\n            :key=\"index\"\n            :x-scale=\"xScale\"\n            :y-scale=\"yScale(item.unit)\"\n            :parameters=\"item\"\n            :index=\"index\"\n            :xScaleFunction=\"secondToHour\"\n          />\n        </g>\n        <g id=\"circle\">\n          <circleTextVue\n            v-for=\"(item,index) in chartData\"\n            :key=\"item.id\"\n            :x-scale=\"xScale\"\n            :y-scale=\"yScale(item.unit)\"\n            :xValue=\"item.xValue\"\n            :opacity=\"item.opacity\"\n            :yValue=\"item.yValue\"\n            :index=\"index\"\n            :unit=\"item.unit\"\n            :deviceId=\"item.deviceId\"\n          />\n        </g>\n        <g id=\"title\">\n          <sectionTextVue\n            v-for=\"(item,index) in getSections\"\n            :key=\"index\"\n            :x-scale=\"xScale\"\n            :y-scale=\"yScale()\"\n            :parameters=\"item\"\n            :posY=\"-10\"\n            :index=\"index\"\n            :xScaleFunction=\"secondToHour\"\n          />\n        </g>\n        <g id=\"legend\">\n          <legendVue\n            v-for=\"(item,index) in chartData\"\n            :key=\"index\"\n            :index=\"index\"\n            :name=\"item.name\"\n            :posX=\"width\"\n          />\n        </g>\n      </g>\n    </svg>\n    <div class=\"tooltip\" />\n  </div>\n</template>\n\n<script>\nimport { addSeconds } from 'date-fns'\nimport vgridVue from '@/components/chart/vgridVue'\nimport hgridVue from '@/components/chart/hgridVue'\nimport lineVue from '@/components/chart/lineVue'\nimport bulletVue from '@/components/chart/bulletVue'\nimport circleTextVue from '@/components/chart/circleTextVue'\nimport sectionTextVue from '@/components/chart/sectionTextVue'\nimport imageVue from '@/components/chart/imageVue'\nimport legendVue from '@/components/chart/legendVue'\nimport defsVue from '@/components/chart/defsVue'\n\nimport * as d3 from 'd3'\nimport SunCalc from 'suncalc'\n\nexport default {\n  components: {\n    vgridVue,\n    hgridVue,\n    lineVue,\n    bulletVue,\n    circleTextVue,\n    sectionTextVue,\n    legendVue,\n    imageVue,\n    defsVue\n  },\n  props: {\n    defineHeight: {\n      required: false,\n      type: Number,\n      default: 366\n    },\n    id: {\n      required: true,\n      type: String\n    },\n    sections: {\n      required: false\n    },\n    thresholds: {\n      required: false\n    },\n    graphData: {\n      required: false,\n      type: Array\n    },\n    useds: {\n      required: false\n    },\n    xAxisData: {\n      required: true\n    },\n    latlng: {\n      required: false\n    }\n  },\n  data: function () {\n    return {\n      sunTime: {},\n      sunRise: 0,\n      sunSet: 0,\n      chartData: [],\n      difineMax: 30,\n      marginAxis: 40,\n      width: 0,\n      height: 0\n    }\n  },\n  computed: {\n    Root: function () {\n      const Root = d3.select(this.$el)\n      return Root\n    },\n    Svg: function () {\n      return this.Root.select('svg')\n    },\n    Ggrid: function () {\n      return this.Svg.select('.grid')\n    },\n    svgWidth: function () {\n      return this.width + this.margin.left + this.margin.right\n    },\n    svgHeight: function () {\n      return this.height + this.margin.top + this.margin.bottom\n    },\n    xScale: function () {\n      return d3\n        .scaleTime()\n        .domain([\n          this.$date().parse(this.xAxisData.min),\n          this.$date().parse(this.xAxisData.max)\n        ])\n        .range([0, this.width])\n    },\n    yScales: function () {\n      let yScales = this.yAxisData\n      for (var index in this.yAxisData) {\n        yScales[index]['yScale'] = d3\n          .scaleLinear()\n          .domain([this.yAxisData[index]['min'], this.yAxisData[index]['max']])\n          .range([this.height, 0])\n      }\n      return yScales\n    },\n    yAxisData: function () {\n      let yAxisData = {}\n      this.chartData.forEach(function (element) {\n        if (yAxisData[element.unit] === undefined) {\n          yAxisData[element.unit] = {\n            max: this.difineMax,\n            min: 0\n          }\n        }\n        let max = d3.max(element.data, function (d) {\n          return d.y\n        })\n        if (yAxisData[element.unit]['max'] <= max) {\n          yAxisData[element.unit]['max'] = Math.ceil(max / 10) * 10\n        }\n\n        let min = d3.min(element.data, function (d) {\n          return d.y\n        })\n        if (yAxisData[element.unit]['min'] >= min) {\n          yAxisData[element.unit]['min'] = -Math.ceil(min / -10) * 10\n        }\n        element.lineStyle = 'dash'\n      }, this)\n\n      this.handleWindowResize()\n\n      return yAxisData\n    },\n    margin () {\n      let margin = {\n        top: 30,\n        right: 40,\n        bottom: 20,\n        left:\n          Object.keys(this.yAxisData).length <= 0\n            ? this.marginAxis\n            : Object.keys(this.yAxisData).length * this.marginAxis\n      }\n      return margin\n    },\n    sunLines: function () {\n      let sunLines = []\n      if (this.sunRise) {\n        sunLines.push({\n          x: this.sunRise,\n          type: 'rise'\n        })\n      }\n      if (this.sunSet) {\n        sunLines.push({\n          x: this.sunSet,\n          type: 'set'\n        })\n      }\n      return sunLines\n    },\n    getSections: function () {\n      let sections = []\n\n      if (this.sections) {\n        this.sections.forEach((section, sectionIdx) => {\n          if (this.useds[sectionIdx]) {\n            const item = {\n              name: section.name,\n              data: [\n                {\n                  x: this.transTime(section.type, section.value),\n                  y: this.minValue\n                },\n                {\n                  x: this.transTime(section.type, section.value),\n                  y: this.maxValue\n                }\n              ]\n            }\n            sections.push(item)\n          }\n        })\n      }\n      return sections\n    },\n    maxValue () {\n      var maxValue = 0\n      for (var index in this.yAxisData) {\n        if (maxValue < this.yAxisData[index]['max']) {\n          maxValue = this.yAxisData[index]['max']\n        }\n      }\n      return maxValue\n    },\n    minValue () {\n      var minValue = 0\n      for (var index in this.yAxisData) {\n        if (minValue > this.yAxisData[index]['min']) {\n          minValue = this.yAxisData[index]['min']\n        }\n      }\n      return minValue\n    }\n  },\n  watch: {\n    thresholds () {\n      if (this.sunTime) {\n        this.chartDataMaker()\n      }\n    },\n    graphData () {\n      this.chartDataMaker()\n    },\n    latlng () {\n      this.sunTimeMaker()\n      this.chartDataMaker()\n    }\n  },\n  mounted () {\n    window.addEventListener('resize', this.handleWindowResize)\n    this.handleWindowResize()\n\n    this.sunTimeMaker()\n    this.eventGrid()\n  },\n  beforeDestroy: function () {\n    window.removeEventListener('resize', this.handleWindowResize)\n  },\n  methods: {\n    sunTimeMaker () {\n      if (this.latlng) {\n        this.sunTime = SunCalc.getTimes(\n          new Date(),\n          this.latlng.lat,\n          this.latlng.lng\n        )\n        this.sunRise =\n          parseInt(this.sunTime.sunrise.getHours() * 60 * 60) +\n          parseInt(this.sunTime.sunrise.getMinutes() * 60)\n        this.sunSet =\n          parseInt(this.sunTime.sunset.getHours() * 60 * 60) +\n          parseInt(this.sunTime.sunset.getMinutes() * 60)\n      }\n    },\n    chartDataMaker () {\n      this.$set(this, 'chartData', [])\n\n      if (this.thresholds) {\n        this.thresholds.forEach((threshold, thresholdIdx) => {\n          let item = {\n            id: threshold.id,\n            name: threshold.name,\n            linetype: threshold.linetype,\n            unit: threshold.unit,\n            data: [],\n            opacity: threshold.opacity,\n            xValue: threshold.xValue,\n            yValue: threshold.yValue\n          }\n\n          threshold.timeoption.forEach((time, timeIdx) => {\n            if (this.useds[timeIdx]) {\n              item.data.push({\n                isDot: true,\n                x: this.transTime(\n                  this.sections[timeIdx].type,\n                  this.sections[timeIdx].value\n                ),\n                y: time.to\n              })\n            }\n          })\n          if (item.data.length > 0) {\n            if (item.data[0].x > 0) {\n              const data = {\n                isDot: false,\n                x: 0,\n                y: item.data[0].y\n              }\n              item.data.splice(0, 0, data)\n            }\n          }\n          this.chartData.push(item)\n        })\n      }\n\n      if (this.graphData) {\n        let index = 0\n        this.graphData.forEach(function (element, ii) {\n          element.data.forEach(function (element, i) {\n            element.x = element.time\n            element.y = element.value\n          }, this)\n\n          let threshold = {\n            deviceId: element.id,\n            name: element.name,\n            linetype: element.id.toString().endsWith('00')\n              ? 'step'\n              : 'monotone',\n            lineStyle: 'line',\n            unit: element.unit,\n            data: element.data,\n            xValue: 0,\n            yValue: 0,\n            opacity: 0,\n            id: index,\n            sigdigit: element.sigdigit\n          }\n          index++\n          this.chartData.push(threshold)\n        }, this)\n      }\n    },\n    transTime (type, value) {\n      var newTime = ''\n      var sun = ''\n\n      if (type.indexOf('rise') >= 0) {\n        sun = this.sunRise\n      } else if (type.indexOf('set') >= 0) {\n        sun = this.sunSet\n      }\n\n      if (type.indexOf('rise') >= 0 || type.indexOf('set') >= 0) {\n        if (type.indexOf('-') >= 0) {\n          newTime = Number(sun) - Number(value)\n        } else if (type.indexOf('+') >= 0) {\n          newTime = Number(sun) + Number(value)\n        } else {\n          newTime = Number(sun)\n        }\n      } else {\n        newTime = Number(value)\n      }\n      return newTime\n    },\n    eventGrid () {\n      var lines = d3\n        .select(this.$el)\n        .select('svg')\n        .selectAll('#thresholdLine')\n        .node().childNodes\n      var tooltip = this.Root.selectAll('.tooltip')\n      var self = this\n\n      this.$nextTick(function () {\n        d3.select(this.$el)\n          .select('svg')\n          .selectAll('.dot')\n          .on('click', function (d) {\n            d3.selectAll('.active').classed('active', false)\n            d3.select(this).classed('active', true)\n\n            d3.select(this)\n              .transition()\n              .duration(400)\n              .attr('r', 50)\n              .transition()\n              .duration(400)\n              .attr('r', 7)\n\n            var time = self\n              .$date()\n              .format(\n                self.secondToHour(d3.select(this).attr('x')).toFixed(2),\n                'MM-DD HH:mm'\n              )\n\n            var ss =\n              time +\n              '<br>' +\n              d3.select(this).attr('name') +\n              ' : ' +\n              d3.select(this).attr('y') +\n              '<br>'\n            tooltip.html(ss)\n          })\n      })\n      d3.select(this.$el)\n        .select('svg')\n        .on('mouseover', function () {\n          tooltip.transition().style('opacity', 1)\n          d3.select(self.$el)\n            .select('svg')\n            .select('#circle')\n            .selectAll('circle')\n            .style('opacity', '1')\n        })\n        .on(\n          'mouseleave',\n          function () {\n            tooltip.transition().style('opacity', 0)\n            d3.select(self.$el)\n              .select('svg')\n              .select('#circle')\n              .selectAll('circle')\n              .style('opacity', '0')\n            // d3.select(this.$el).select('svg').selectAll('#thresholdLine').style('opacity', '0')\n            /* lines.forEach(function (element, i) {\n              self.$set(self.chartData[i], 'opacity', 0)\n            }) */\n          },\n          this\n        )\n        .on('mousemove', function () {\n          var mouse = d3.mouse(this)\n          mouse[0] -= self.margin.left\n          if (mouse[0] < 0) {\n            mouse[0] = 0\n          } else if (mouse[0] >= self.width) {\n            mouse[0] = self.width\n          }\n\n          var time =\n            '<div style=\"font-weight: bold;margin: 0.25em 0;\">' +\n            self.$date().format(self.xScale.invert(mouse[0]), 'HH:mm') +\n            '</div>'\n\n          lines.forEach((element, i) => {\n            var target = null\n            var beginning = 0\n            var end = element.getTotalLength()\n            var pos = element.getPointAtLength(mouse[0])\n            while (true) {\n              target = Math.floor((beginning + end) / 2)\n              pos = element.getPointAtLength(target)\n              if (\n                (target === end || target === beginning) &&\n                pos.x !== mouse[0]\n              ) {\n                break\n              }\n              if (pos.x > mouse[0]) end = target\n              else if (pos.x < mouse[0]) beginning = target\n              else {\n                // self.thresholds[i].opacity = 1\n                // self.$set(self.chartData[i], 'opacity', 1)\n                break // position found\n              }\n            }\n\n            self.$set(self.chartData[i], 'xValue', pos.x)\n            self.$set(self.chartData[i], 'yValue', pos.y)\n\n            const color = `color:${d3.schemeCategory10[i % 10]}`\n            let value = self.yScale(self.chartData[i].unit).invert(pos.y)\n\n            const sigdigit = Math.pow(10, self.chartData[i].sigdigit)\n            time += `<div style=\"margin-left:5px;margin-right:5px;margin-bottom:5px;${color}\">`\n            if (self.chartData[i].deviceId) {\n              if (self.chartData[i].deviceId.toString().endsWith('00')) {\n                time += `${self.chartData[i].name} : ${\n                  self.statusCode[value.toFixed(0)]\n                }</div>`\n              } else {\n                time += `${self.chartData[i].name} : ${Math.floor(\n                  value * sigdigit\n                ) / sigdigit} ${\n                  self.chartData[i].unit ? self.chartData[i].unit : ''\n                }</div>`\n              }\n            }\n          })\n\n          if (tooltip.node()) {\n            if (self.latlng && self.sunLines[0]) {\n              var time2 = self.xScale(self.secondToHour(self.sunLines[0].x))\n              if (mouse[0] >= time2 - 35 && mouse[0] <= time2 + 35) {\n                time +=\n                  '<div style=\"color: #0c6aff;\">일출 : ' +\n                  self\n                    .$date()\n                    .format(\n                      self.xScale.invert(\n                        self.xScale(self.secondToHour(self.sunLines[0].x))\n                      ),\n                      'HH:mm'\n                    ) +\n                  '</div>'\n              }\n\n              time2 = self.xScale(self.secondToHour(self.sunLines[1].x))\n              if (mouse[0] >= time2 - 35 && mouse[0] <= time2 + 35) {\n                time +=\n                  '<div style=\"color: #ff0505;\">일몰 : ' +\n                  self\n                    .$date()\n                    .format(\n                      self.xScale.invert(\n                        self.xScale(self.secondToHour(self.sunLines[1].x))\n                      ),\n                      'HH:mm'\n                    ) +\n                  '</div>'\n              }\n            }\n\n            let tooltipX = 0\n            if (mouse[0] < tooltip.node().getBoundingClientRect().width) {\n              tooltipX = mouse[0] + self.margin.left + 60 + 'px'\n            } else {\n              tooltipX =\n                mouse[0] +\n                self.margin.left -\n                tooltip.node().getBoundingClientRect().width -\n                20 +\n                'px'\n            }\n\n            tooltip\n              .html(time)\n              .style('left', tooltipX)\n              .style(\n                'top',\n                mouse[1] + 200 +\n                  'px'\n              )\n              .style('padding', 5 + 'px')\n          }\n        })\n    },\n    handleWindowResize () {\n      this.getSize()\n    },\n    getSize () {\n      setTimeout(() => {\n        this.width =\n          this.$el.clientWidth - this.margin.left - this.margin.right\n        this.height =\n          this.$el.clientHeight - this.margin.top - this.margin.bottom\n      }, 1)\n    },\n    yScale (unit) {\n      if (unit !== undefined && this.yAxisData[unit]) {\n        return d3\n          .scaleLinear()\n          .domain([this.yAxisData[unit]['min'], this.yAxisData[unit]['max']])\n          .range([this.height, 0])\n      } else {\n        let ys = null\n        for (var index in this.yAxisData) {\n          ys = d3\n            .scaleLinear()\n            .domain([0, this.yAxisData[index]['max']])\n            .range([this.height, 0])\n        }\n        return ys\n      }\n    },\n    secondToHour (seconds) {\n      return addSeconds(this.xAxisData.min, seconds)\n    }\n  }\n}\n</script>\n\n<style >\ndiv.tooltip {\n  position: absolute;\n  text-align: center;\n  pointer-events: none;\n\n  /* width: auto;\n  height: auto;\n  padding: 2px;\n  font: 12px sans-serif;\n  background: lightsteelblue;\n  border: 0px;\n  border-radius: 8px;\n  pointer-events: none; */\n\n  border-radius: 10px;\n  padding: 6px;\n  color: #666;\n  background: rgba(255, 255, 255, 0.9);\n  border: solid 2px rgba(230, 230, 230, 0.8);\n  font-size: 14px;\n  text-align: center;\n}\n</style>\n"]}]}