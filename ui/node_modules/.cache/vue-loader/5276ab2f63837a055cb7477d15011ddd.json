{"remainingRequest":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mrchoi87/farmosV2/ui/src/components/Switch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mrchoi87/farmosV2/ui/src/components/Switch.vue","mtime":1607499348989},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mrchoi87/farmosV2/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Transfer from '@/components/Transfer'\r\nimport * as am4core from '@amcharts/amcharts4/core'\r\nimport * as am4charts from '@amcharts/amcharts4/charts'\r\nimport am4themesAnimated from '@amcharts/amcharts4/themes/animated'\r\n\r\nam4core.useTheme(am4themesAnimated)\r\n\r\nexport default {\r\n  components: {\r\n    Transfer\r\n  },\r\n  props: ['fieldId', 'uiInfo', 'obs', 'device', 'item', 'path', 'type'],\r\n  data () {\r\n    return {\r\n      chart: Function,\r\n      showDialog: false,\r\n      showChart: false\r\n    }\r\n  },\r\n  watch: {\r\n    async uiInfo (newValue, oldValue) {\r\n      await this.makeChart()\r\n      await this.makeData()\r\n    },\r\n    obs: {\r\n      deep: true,\r\n      handler () {\r\n        this.makeData()\r\n      }\r\n    },\r\n    device: {\r\n      deep: true,\r\n      handler () {\r\n        this.makeData()\r\n      }\r\n    }\r\n\r\n    /* obs (newValue, oldValue) {\r\n      this.makeData()\r\n    },\r\n    device (newValue, oldValue) {\r\n      this.makeData()\r\n    } */\r\n  },\r\n  methods: {\r\n    async makeChart () {\r\n      let tempData = null\r\n      if (this.type) {\r\n        tempData = this.uiInfo[this.type]\r\n      } else {\r\n        tempData = this.uiInfo\r\n      }\r\n\r\n      /* if (Object.values(tempData).length === 0) {\r\n        this.showChart = false\r\n        return\r\n      } else {\r\n        this.showChart = true\r\n      } */\r\n\r\n      await this.$nextTick()\r\n      this.chart = am4core.create(this.$refs.chartdiv, am4charts.XYChart3D)\r\n\r\n      // Create axes\r\n      let categoryAxis = this.chart.yAxes.push(new am4charts.CategoryAxis())\r\n      categoryAxis.dataFields.category = 'category'\r\n      categoryAxis.numberFormatter.numberFormat = '#'\r\n      categoryAxis.renderer.inversed = true\r\n\r\n      let valueAxis = this.chart.xAxes.push(new am4charts.ValueAxis())\r\n      valueAxis.min = 0\r\n      this.chart.xAxes.push(valueAxis)\r\n\r\n      // Create series\r\n      let series = this.chart.series.push(new am4charts.ColumnSeries3D())\r\n      series.dataFields.valueX = 'end'\r\n      series.dataFields.categoryY = 'category'\r\n      series.name = ''\r\n      series.columns.template.propertyFields.fill = 'color'\r\n      series.columns.template.tooltipText =\r\n        '{category} {name}: [bold]{valueX}[/]'\r\n      series.columns.template.column3D.stroke = am4core.color('#fff')\r\n      series.columns.template.column3D.strokeOpacity = 0.2\r\n\r\n      let valueLabel = series.bullets.push(new am4charts.LabelBullet())\r\n      valueLabel.label.text = '{name}'\r\n      valueLabel.label.horizontalCenter = 'left'\r\n      valueLabel.label.dx = 0\r\n      valueLabel.label.fill = am4core.color('#fff')\r\n      valueLabel.label.hideOversized = false\r\n      valueLabel.label.truncate = false\r\n\r\n      let categoryLabel = series.bullets.push(new am4charts.LabelBullet())\r\n      categoryLabel.label.text = '{end}'\r\n      categoryLabel.label.horizontalCenter = 'right'\r\n      categoryLabel.label.dx = -10\r\n      categoryLabel.label.hideOversized = false\r\n      categoryLabel.label.fill = am4core.color('#fff')\r\n      categoryLabel.label.truncate = false\r\n    },\r\n    makeData () {\r\n      let tempData = null\r\n      if (this.type) {\r\n        tempData = this.uiInfo[this.type]\r\n      } else {\r\n        tempData = this.uiInfo\r\n      }\r\n\r\n      let data = []\r\n      for (const key in tempData.device) {\r\n        let name = ''\r\n        for (const device of this.device) {\r\n          // eslint-disable-next-line eqeqeq\r\n          if (device.id == key) {\r\n            name = device.name\r\n            break\r\n          }\r\n        }\r\n\r\n        data.push({\r\n          category: name,\r\n          value: this.obs[tempData.device[key][0]].nvalue,\r\n          full: 100\r\n        })\r\n        data.push({\r\n          category: name,\r\n          end: this.obs[tempData.device[key][0]].nvalue,\r\n          color: this.chart.colors.next(),\r\n          color2: this.chart.colors.next()\r\n        })\r\n        this.showChart = true\r\n      }\r\n      this.chart.data = data\r\n    }\r\n  },\r\n  async mounted () {\r\n    await this.makeChart()\r\n    await this.makeData()\r\n  },\r\n  beforeDestroy () {\r\n    if (this.chart) {\r\n      this.chart.dispose()\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["Switch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Switch.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div style=\"height:100%\">\r\n    <div style=\"display: flex;\">\r\n      <div>{{path === 'retractable' ? '개폐기 상태' : '스위치 상태' }}</div>\r\n      <div class=\"ml-auto el-icon-setting\" style=\"z-index: 1;\" @click=\"showDialog = true\"></div>\r\n    </div>\r\n    <div v-if=\"showChart\" ref=\"chartdiv\" style=\"height:90%\"></div>\r\n    <div v-else  style=\"height:100%;text-align: center;\">\r\n      <div style=\"margin: 0;top:50%;left:50%;position: absolute;-ms-transform: translateX(-50%) translateY(-50%);transform: translateX(-50%) translateY(-50%);\">\r\n        <img src=\"@/assets/img/nodata.png\" style=\"height:40px\"/>\r\n        <br><br>\r\n      <div>선택된 {{path === 'retractable' ? '개폐기' : '스위치'}} 데이터가 없습니다.</div>\r\n    </div>\r\n    </div>\r\n    <Transfer\r\n      :fieldId=\"fieldId\"\r\n      :path=\"['dashboard',path]\"\r\n      :uiInfo=\"uiInfo\"\r\n      :devices=\"item\"\r\n      :showDialog=\"showDialog\"\r\n      :closeDialog=\"()=>showDialog = false\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Transfer from '@/components/Transfer'\r\nimport * as am4core from '@amcharts/amcharts4/core'\r\nimport * as am4charts from '@amcharts/amcharts4/charts'\r\nimport am4themesAnimated from '@amcharts/amcharts4/themes/animated'\r\n\r\nam4core.useTheme(am4themesAnimated)\r\n\r\nexport default {\r\n  components: {\r\n    Transfer\r\n  },\r\n  props: ['fieldId', 'uiInfo', 'obs', 'device', 'item', 'path', 'type'],\r\n  data () {\r\n    return {\r\n      chart: Function,\r\n      showDialog: false,\r\n      showChart: false\r\n    }\r\n  },\r\n  watch: {\r\n    async uiInfo (newValue, oldValue) {\r\n      await this.makeChart()\r\n      await this.makeData()\r\n    },\r\n    obs: {\r\n      deep: true,\r\n      handler () {\r\n        this.makeData()\r\n      }\r\n    },\r\n    device: {\r\n      deep: true,\r\n      handler () {\r\n        this.makeData()\r\n      }\r\n    }\r\n\r\n    /* obs (newValue, oldValue) {\r\n      this.makeData()\r\n    },\r\n    device (newValue, oldValue) {\r\n      this.makeData()\r\n    } */\r\n  },\r\n  methods: {\r\n    async makeChart () {\r\n      let tempData = null\r\n      if (this.type) {\r\n        tempData = this.uiInfo[this.type]\r\n      } else {\r\n        tempData = this.uiInfo\r\n      }\r\n\r\n      /* if (Object.values(tempData).length === 0) {\r\n        this.showChart = false\r\n        return\r\n      } else {\r\n        this.showChart = true\r\n      } */\r\n\r\n      await this.$nextTick()\r\n      this.chart = am4core.create(this.$refs.chartdiv, am4charts.XYChart3D)\r\n\r\n      // Create axes\r\n      let categoryAxis = this.chart.yAxes.push(new am4charts.CategoryAxis())\r\n      categoryAxis.dataFields.category = 'category'\r\n      categoryAxis.numberFormatter.numberFormat = '#'\r\n      categoryAxis.renderer.inversed = true\r\n\r\n      let valueAxis = this.chart.xAxes.push(new am4charts.ValueAxis())\r\n      valueAxis.min = 0\r\n      this.chart.xAxes.push(valueAxis)\r\n\r\n      // Create series\r\n      let series = this.chart.series.push(new am4charts.ColumnSeries3D())\r\n      series.dataFields.valueX = 'end'\r\n      series.dataFields.categoryY = 'category'\r\n      series.name = ''\r\n      series.columns.template.propertyFields.fill = 'color'\r\n      series.columns.template.tooltipText =\r\n        '{category} {name}: [bold]{valueX}[/]'\r\n      series.columns.template.column3D.stroke = am4core.color('#fff')\r\n      series.columns.template.column3D.strokeOpacity = 0.2\r\n\r\n      let valueLabel = series.bullets.push(new am4charts.LabelBullet())\r\n      valueLabel.label.text = '{name}'\r\n      valueLabel.label.horizontalCenter = 'left'\r\n      valueLabel.label.dx = 0\r\n      valueLabel.label.fill = am4core.color('#fff')\r\n      valueLabel.label.hideOversized = false\r\n      valueLabel.label.truncate = false\r\n\r\n      let categoryLabel = series.bullets.push(new am4charts.LabelBullet())\r\n      categoryLabel.label.text = '{end}'\r\n      categoryLabel.label.horizontalCenter = 'right'\r\n      categoryLabel.label.dx = -10\r\n      categoryLabel.label.hideOversized = false\r\n      categoryLabel.label.fill = am4core.color('#fff')\r\n      categoryLabel.label.truncate = false\r\n    },\r\n    makeData () {\r\n      let tempData = null\r\n      if (this.type) {\r\n        tempData = this.uiInfo[this.type]\r\n      } else {\r\n        tempData = this.uiInfo\r\n      }\r\n\r\n      let data = []\r\n      for (const key in tempData.device) {\r\n        let name = ''\r\n        for (const device of this.device) {\r\n          // eslint-disable-next-line eqeqeq\r\n          if (device.id == key) {\r\n            name = device.name\r\n            break\r\n          }\r\n        }\r\n\r\n        data.push({\r\n          category: name,\r\n          value: this.obs[tempData.device[key][0]].nvalue,\r\n          full: 100\r\n        })\r\n        data.push({\r\n          category: name,\r\n          end: this.obs[tempData.device[key][0]].nvalue,\r\n          color: this.chart.colors.next(),\r\n          color2: this.chart.colors.next()\r\n        })\r\n        this.showChart = true\r\n      }\r\n      this.chart.data = data\r\n    }\r\n  },\r\n  async mounted () {\r\n    await this.makeChart()\r\n    await this.makeData()\r\n  },\r\n  beforeDestroy () {\r\n    if (this.chart) {\r\n      this.chart.dispose()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n</style>\r\n"]}]}